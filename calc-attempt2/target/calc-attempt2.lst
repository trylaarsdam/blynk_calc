
c:/Users/Nerdom/Desktop/calc-attempt2/target/calc-attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000181cc  2**0
                  CONTENTS
  3 .data         00000070  2003e2a8  000d8130  0000e2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004d8  2003e318  2003e318  0001e318  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d81a0  000d81a0  000181a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d81c8  000d81c8  000181c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ebcdc  00000000  00000000  000181cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012de8  00000000  00000000  00103ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001b632  00000000  00000000  00116c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000025a8  00000000  00000000  001322c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000044b8  00000000  00000000  0013486a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00039cb5  00000000  00000000  00138d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002e60b  00000000  00000000  001729d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00108dbe  00000000  00000000  001a0fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c9c0  00000000  00000000  002a9da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	e0 76 0d 00                                         .v..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fa65 	bl	d74fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fa6a 	bl	d7512 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2a8 	.word	0x2003e2a8
   d4048:	000d8130 	.word	0x000d8130
   d404c:	2003e318 	.word	0x2003e318
   d4050:	2003e318 	.word	0x2003e318
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fd03 	bl	d5a64 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8124 	.word	0x000d8124
   d4080:	000d80dc 	.word	0x000d80dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bca4 	b.w	d49d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ffdd 	bl	d5048 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bcb5 	b.w	d5a00 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 ba59 	b.w	d554c <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 ba5f 	b.w	d555c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 ba5d 	b.w	d555c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d40b4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d40b6:	f001 f895 	bl	d51e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d40ba:	4b03      	ldr	r3, [pc, #12]	; (d40c8 <_ZN10CloudClass7processEv+0x14>)
   d40bc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d40be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d40c2:	f001 ba33 	b.w	d552c <spark_process>
   d40c6:	bf00      	nop
   d40c8:	2003e734 	.word	0x2003e734

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000d7eb0 	.word	0x000d7eb0

000d4100 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffe2 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	bd10      	pop	{r4, pc}

000d410c <_ZN9TCPClientD0Ev>:
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
   d4110:	f7ff ffdc 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	211c      	movs	r1, #28
   d4118:	f002 fbdf 	bl	d68da <_ZdlPvj>
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4120:	6803      	ldr	r3, [r0, #0]
   d4122:	b12b      	cbz	r3, d4130 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4124:	6842      	ldr	r2, [r0, #4]
   d4126:	4293      	cmp	r3, r2
   d4128:	d202      	bcs.n	d4130 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d412a:	4618      	mov	r0, r3
   d412c:	f003 b9d0 	b.w	d74d0 <atoi>
   d4130:	2000      	movs	r0, #0
   d4132:	4770      	bx	lr

000d4134 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4134:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4136:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4138:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d413a:	b145      	cbz	r5, d414e <_ZN10BlynkParam8iteratorppEv+0x1a>
   d413c:	6843      	ldr	r3, [r0, #4]
   d413e:	429d      	cmp	r5, r3
   d4140:	d205      	bcs.n	d414e <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d4142:	4628      	mov	r0, r5
   d4144:	f003 fa20 	bl	d7588 <strlen>
   d4148:	3001      	adds	r0, #1
   d414a:	4405      	add	r5, r0
   d414c:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d414e:	4620      	mov	r0, r4
   d4150:	bd38      	pop	{r3, r4, r5, pc}

000d4152 <_ZN10BlynkParam3addEPKvj>:
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
   d4152:	b570      	push	{r4, r5, r6, lr}
    if (len + l > buff_size)
   d4154:	6843      	ldr	r3, [r0, #4]
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
   d4156:	4604      	mov	r4, r0
    if (len + l > buff_size)
   d4158:	6880      	ldr	r0, [r0, #8]
   d415a:	189e      	adds	r6, r3, r2
   d415c:	4286      	cmp	r6, r0
    return iterator::invalid();
}

inline
void BlynkParam::add(const void* b, size_t l)
{
   d415e:	4615      	mov	r5, r2
    if (len + l > buff_size)
   d4160:	d806      	bhi.n	d4170 <_ZN10BlynkParam3addEPKvj+0x1e>
        return;
    memcpy(buff+len, b, l);
   d4162:	6820      	ldr	r0, [r4, #0]
   d4164:	4418      	add	r0, r3
   d4166:	f003 f9c9 	bl	d74fc <memcpy>
    len += l;
   d416a:	6863      	ldr	r3, [r4, #4]
   d416c:	441d      	add	r5, r3
   d416e:	6065      	str	r5, [r4, #4]
   d4170:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4174 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4174:	b570      	push	{r4, r5, r6, lr}
   d4176:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4178:	6840      	ldr	r0, [r0, #4]
   d417a:	68a6      	ldr	r6, [r4, #8]
   d417c:	6825      	ldr	r5, [r4, #0]
   d417e:	4a05      	ldr	r2, [pc, #20]	; (d4194 <_ZN10BlynkParam3addEi+0x20>)
   d4180:	460b      	mov	r3, r1
   d4182:	1a31      	subs	r1, r6, r0
   d4184:	4428      	add	r0, r5
   d4186:	f001 f9f1 	bl	d556c <snprintf>
   d418a:	6863      	ldr	r3, [r4, #4]
   d418c:	3001      	adds	r0, #1
   d418e:	4418      	add	r0, r3
   d4190:	6060      	str	r0, [r4, #4]
   d4192:	bd70      	pop	{r4, r5, r6, pc}
   d4194:	000d7747 	.word	0x000d7747

000d4198 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4198:	b570      	push	{r4, r5, r6, lr}
   d419a:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d419c:	6840      	ldr	r0, [r0, #4]
   d419e:	68a6      	ldr	r6, [r4, #8]
   d41a0:	6825      	ldr	r5, [r4, #0]
   d41a2:	4a05      	ldr	r2, [pc, #20]	; (d41b8 <_ZN10BlynkParam3addEl+0x20>)
   d41a4:	460b      	mov	r3, r1
   d41a6:	1a31      	subs	r1, r6, r0
   d41a8:	4428      	add	r0, r5
   d41aa:	f001 f9df 	bl	d556c <snprintf>
   d41ae:	6863      	ldr	r3, [r4, #4]
   d41b0:	3001      	adds	r0, #1
   d41b2:	4418      	add	r0, r3
   d41b4:	6060      	str	r0, [r4, #4]
   d41b6:	bd70      	pop	{r4, r5, r6, pc}
   d41b8:	000d774a 	.word	0x000d774a

000d41bc <BlynkWidgetWrite0>:
int equalsButton = 0;
int clearButton = 0;
int clearAllButton = 0;
int backspaceButton = 0;

BLYNK_WRITE(blynk_0){
   d41bc:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d41be:	6808      	ldr	r0, [r1, #0]
   d41c0:	f003 f986 	bl	d74d0 <atoi>
   d41c4:	4b03      	ldr	r3, [pc, #12]	; (d41d4 <BlynkWidgetWrite0+0x18>)
  if(param.asInt()){
   d41c6:	b110      	cbz	r0, d41ce <BlynkWidgetWrite0+0x12>
    num_0 = 1;
   d41c8:	2201      	movs	r2, #1
   d41ca:	601a      	str	r2, [r3, #0]
   d41cc:	bd08      	pop	{r3, pc}
  }
  else{
    num_0 = 0;
   d41ce:	6018      	str	r0, [r3, #0]
   d41d0:	bd08      	pop	{r3, pc}
   d41d2:	bf00      	nop
   d41d4:	2003e394 	.word	0x2003e394

000d41d8 <BlynkWidgetWrite1>:
  }
}
BLYNK_WRITE(blynk_1){
   d41d8:	b508      	push	{r3, lr}
   d41da:	6808      	ldr	r0, [r1, #0]
   d41dc:	f003 f978 	bl	d74d0 <atoi>
num_1 = param.asInt();
   d41e0:	4b01      	ldr	r3, [pc, #4]	; (d41e8 <BlynkWidgetWrite1+0x10>)
   d41e2:	6018      	str	r0, [r3, #0]
   d41e4:	bd08      	pop	{r3, pc}
   d41e6:	bf00      	nop
   d41e8:	2003e398 	.word	0x2003e398

000d41ec <BlynkWidgetWrite2>:
}
BLYNK_WRITE(blynk_2){
   d41ec:	b508      	push	{r3, lr}
   d41ee:	6808      	ldr	r0, [r1, #0]
   d41f0:	f003 f96e 	bl	d74d0 <atoi>
num_2 = param.asInt();
   d41f4:	4b01      	ldr	r3, [pc, #4]	; (d41fc <BlynkWidgetWrite2+0x10>)
   d41f6:	6018      	str	r0, [r3, #0]
   d41f8:	bd08      	pop	{r3, pc}
   d41fa:	bf00      	nop
   d41fc:	2003e39c 	.word	0x2003e39c

000d4200 <BlynkWidgetWrite3>:
}
BLYNK_WRITE(blynk_3){
   d4200:	b508      	push	{r3, lr}
   d4202:	6808      	ldr	r0, [r1, #0]
   d4204:	f003 f964 	bl	d74d0 <atoi>
num_3 = param.asInt();
   d4208:	4b01      	ldr	r3, [pc, #4]	; (d4210 <BlynkWidgetWrite3+0x10>)
   d420a:	6018      	str	r0, [r3, #0]
   d420c:	bd08      	pop	{r3, pc}
   d420e:	bf00      	nop
   d4210:	2003e3a0 	.word	0x2003e3a0

000d4214 <BlynkWidgetWrite4>:
}
BLYNK_WRITE(blynk_4){
   d4214:	b508      	push	{r3, lr}
   d4216:	6808      	ldr	r0, [r1, #0]
   d4218:	f003 f95a 	bl	d74d0 <atoi>
num_4 = param.asInt();
   d421c:	4b01      	ldr	r3, [pc, #4]	; (d4224 <BlynkWidgetWrite4+0x10>)
   d421e:	6018      	str	r0, [r3, #0]
   d4220:	bd08      	pop	{r3, pc}
   d4222:	bf00      	nop
   d4224:	2003e3a4 	.word	0x2003e3a4

000d4228 <BlynkWidgetWrite5>:
}
BLYNK_WRITE(blynk_5){
   d4228:	b508      	push	{r3, lr}
   d422a:	6808      	ldr	r0, [r1, #0]
   d422c:	f003 f950 	bl	d74d0 <atoi>
num_5 = param.asInt();
   d4230:	4b01      	ldr	r3, [pc, #4]	; (d4238 <BlynkWidgetWrite5+0x10>)
   d4232:	6018      	str	r0, [r3, #0]
   d4234:	bd08      	pop	{r3, pc}
   d4236:	bf00      	nop
   d4238:	2003e3a8 	.word	0x2003e3a8

000d423c <BlynkWidgetWrite6>:
}
BLYNK_WRITE(blynk_6){
   d423c:	b508      	push	{r3, lr}
   d423e:	6808      	ldr	r0, [r1, #0]
   d4240:	f003 f946 	bl	d74d0 <atoi>
num_6 = param.asInt();
   d4244:	4b01      	ldr	r3, [pc, #4]	; (d424c <BlynkWidgetWrite6+0x10>)
   d4246:	6018      	str	r0, [r3, #0]
   d4248:	bd08      	pop	{r3, pc}
   d424a:	bf00      	nop
   d424c:	2003e3ac 	.word	0x2003e3ac

000d4250 <BlynkWidgetWrite7>:
}
BLYNK_WRITE(blynk_7){
   d4250:	b508      	push	{r3, lr}
   d4252:	6808      	ldr	r0, [r1, #0]
   d4254:	f003 f93c 	bl	d74d0 <atoi>
num_7 = param.asInt();
   d4258:	4b01      	ldr	r3, [pc, #4]	; (d4260 <BlynkWidgetWrite7+0x10>)
   d425a:	6018      	str	r0, [r3, #0]
   d425c:	bd08      	pop	{r3, pc}
   d425e:	bf00      	nop
   d4260:	2003e3b0 	.word	0x2003e3b0

000d4264 <BlynkWidgetWrite8>:
}
BLYNK_WRITE(blynk_8){
   d4264:	b508      	push	{r3, lr}
   d4266:	6808      	ldr	r0, [r1, #0]
   d4268:	f003 f932 	bl	d74d0 <atoi>
num_8 = param.asInt();
   d426c:	4b01      	ldr	r3, [pc, #4]	; (d4274 <BlynkWidgetWrite8+0x10>)
   d426e:	6018      	str	r0, [r3, #0]
   d4270:	bd08      	pop	{r3, pc}
   d4272:	bf00      	nop
   d4274:	2003e3b4 	.word	0x2003e3b4

000d4278 <BlynkWidgetWrite9>:
}
BLYNK_WRITE(blynk_9){
   d4278:	b508      	push	{r3, lr}
   d427a:	6808      	ldr	r0, [r1, #0]
   d427c:	f003 f928 	bl	d74d0 <atoi>
num_9 = param.asInt();
   d4280:	4b01      	ldr	r3, [pc, #4]	; (d4288 <BlynkWidgetWrite9+0x10>)
   d4282:	6018      	str	r0, [r3, #0]
   d4284:	bd08      	pop	{r3, pc}
   d4286:	bf00      	nop
   d4288:	2003e3b8 	.word	0x2003e3b8

000d428c <BlynkWidgetWrite10>:
}
BLYNK_WRITE(blynk_decimal){
   d428c:	b508      	push	{r3, lr}
   d428e:	6808      	ldr	r0, [r1, #0]
   d4290:	f003 f91e 	bl	d74d0 <atoi>
decimal = param.asInt();
   d4294:	4b01      	ldr	r3, [pc, #4]	; (d429c <BlynkWidgetWrite10+0x10>)
   d4296:	6018      	str	r0, [r3, #0]
   d4298:	bd08      	pop	{r3, pc}
   d429a:	bf00      	nop
   d429c:	2003e328 	.word	0x2003e328

000d42a0 <BlynkWidgetWrite11>:
}
BLYNK_WRITE(blynk_addition){
   d42a0:	b508      	push	{r3, lr}
   d42a2:	6808      	ldr	r0, [r1, #0]
   d42a4:	f003 f914 	bl	d74d0 <atoi>
addButton = param.asInt();
   d42a8:	4b01      	ldr	r3, [pc, #4]	; (d42b0 <BlynkWidgetWrite11+0x10>)
   d42aa:	6018      	str	r0, [r3, #0]
   d42ac:	bd08      	pop	{r3, pc}
   d42ae:	bf00      	nop
   d42b0:	2003e31c 	.word	0x2003e31c

000d42b4 <BlynkWidgetWrite12>:
}
BLYNK_WRITE(blynk_subtraction){
   d42b4:	b508      	push	{r3, lr}
   d42b6:	6808      	ldr	r0, [r1, #0]
   d42b8:	f003 f90a 	bl	d74d0 <atoi>
subtractButton = param.asInt();
   d42bc:	4b01      	ldr	r3, [pc, #4]	; (d42c4 <BlynkWidgetWrite12+0x10>)
   d42be:	6018      	str	r0, [r3, #0]
   d42c0:	bd08      	pop	{r3, pc}
   d42c2:	bf00      	nop
   d42c4:	2003e334 	.word	0x2003e334

000d42c8 <BlynkWidgetWrite13>:
}
BLYNK_WRITE(blynk_multiplication){
   d42c8:	b508      	push	{r3, lr}
   d42ca:	6808      	ldr	r0, [r1, #0]
   d42cc:	f003 f900 	bl	d74d0 <atoi>
multiplyButton = param.asInt();
   d42d0:	4b01      	ldr	r3, [pc, #4]	; (d42d8 <BlynkWidgetWrite13+0x10>)
   d42d2:	6018      	str	r0, [r3, #0]
   d42d4:	bd08      	pop	{r3, pc}
   d42d6:	bf00      	nop
   d42d8:	2003e3c4 	.word	0x2003e3c4

000d42dc <BlynkWidgetWrite14>:
}
BLYNK_WRITE(blynk_division){
   d42dc:	b508      	push	{r3, lr}
   d42de:	6808      	ldr	r0, [r1, #0]
   d42e0:	f003 f8f6 	bl	d74d0 <atoi>
divideButton = param.asInt();
   d42e4:	4b01      	ldr	r3, [pc, #4]	; (d42ec <BlynkWidgetWrite14+0x10>)
   d42e6:	6018      	str	r0, [r3, #0]
   d42e8:	bd08      	pop	{r3, pc}
   d42ea:	bf00      	nop
   d42ec:	2003e32c 	.word	0x2003e32c

000d42f0 <BlynkWidgetWrite15>:
}
BLYNK_WRITE(blynk_equals){
   d42f0:	b508      	push	{r3, lr}
   d42f2:	6808      	ldr	r0, [r1, #0]
   d42f4:	f003 f8ec 	bl	d74d0 <atoi>
equalsButton = param.asInt();
   d42f8:	4b01      	ldr	r3, [pc, #4]	; (d4300 <BlynkWidgetWrite15+0x10>)
   d42fa:	6018      	str	r0, [r3, #0]
   d42fc:	bd08      	pop	{r3, pc}
   d42fe:	bf00      	nop
   d4300:	2003e3bc 	.word	0x2003e3bc

000d4304 <BlynkWidgetWrite16>:
}
BLYNK_WRITE(blynk_clear){
   d4304:	b508      	push	{r3, lr}
   d4306:	6808      	ldr	r0, [r1, #0]
   d4308:	f003 f8e2 	bl	d74d0 <atoi>
clearButton = param.asInt();
   d430c:	4b01      	ldr	r3, [pc, #4]	; (d4314 <BlynkWidgetWrite16+0x10>)
   d430e:	6018      	str	r0, [r3, #0]
   d4310:	bd08      	pop	{r3, pc}
   d4312:	bf00      	nop
   d4314:	2003e330 	.word	0x2003e330

000d4318 <BlynkWidgetWrite17>:
}
BLYNK_WRITE(blynk_clearEverything){
   d4318:	b508      	push	{r3, lr}
   d431a:	6808      	ldr	r0, [r1, #0]
   d431c:	f003 f8d8 	bl	d74d0 <atoi>
clearAllButton = param.asInt();
   d4320:	4b01      	ldr	r3, [pc, #4]	; (d4328 <BlynkWidgetWrite17+0x10>)
   d4322:	6018      	str	r0, [r3, #0]
   d4324:	bd08      	pop	{r3, pc}
   d4326:	bf00      	nop
   d4328:	2003e3c0 	.word	0x2003e3c0

000d432c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d432c:	b508      	push	{r3, lr}
        state = CONNECTING;
   d432e:	2300      	movs	r3, #0
   d4330:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4332:	6800      	ldr	r0, [r0, #0]
   d4334:	f002 f839 	bl	d63aa <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d433c:	f000 bec2 	b.w	d50c4 <BlynkNoOpCbk>

000d4340 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4344:	188e      	adds	r6, r1, r2
   d4346:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4348:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d434a:	4680      	mov	r8, r0
   d434c:	460d      	mov	r5, r1
   d434e:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4350:	9105      	str	r1, [sp, #20]
   d4352:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4354:	f080 80ee 	bcs.w	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d4358:	880b      	ldrh	r3, [r1, #0]
   d435a:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d435e:	a805      	add	r0, sp, #20
   d4360:	f7ff fee8 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d4364:	6803      	ldr	r3, [r0, #0]
   d4366:	429e      	cmp	r6, r3
   d4368:	f240 80e4 	bls.w	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d436c:	a805      	add	r0, sp, #20
   d436e:	f7ff fed7 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d4372:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d4376:	f247 2276 	movw	r2, #29302	; 0x7276
   d437a:	4293      	cmp	r3, r2
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d437c:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d437e:	f000 80a0 	beq.w	d44c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x182>
   d4382:	d80d      	bhi.n	d43a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d4384:	f247 2261 	movw	r2, #29281	; 0x7261
   d4388:	4293      	cmp	r3, r2
   d438a:	d065      	beq.n	d4458 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
   d438c:	f247 2264 	movw	r2, #29284	; 0x7264
   d4390:	4293      	cmp	r3, r2
   d4392:	d039      	beq.n	d4408 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc8>
   d4394:	f646 5270 	movw	r2, #28016	; 0x6d70
   d4398:	4293      	cmp	r3, r2
   d439a:	f040 80bd 	bne.w	d4518 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
   d439e:	e02f      	b.n	d4400 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
   d43a0:	f247 7264 	movw	r2, #30564	; 0x7764
   d43a4:	4293      	cmp	r3, r2
   d43a6:	d042      	beq.n	d442e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xee>
   d43a8:	f247 7276 	movw	r2, #30582	; 0x7776
   d43ac:	4293      	cmp	r3, r2
   d43ae:	f000 8099 	beq.w	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a4>
   d43b2:	f247 7261 	movw	r2, #30561	; 0x7761
   d43b6:	4293      	cmp	r3, r2
   d43b8:	f040 80ae 	bne.w	d4518 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d8>
   d43bc:	e06e      	b.n	d449c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x15c>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
   d43be:	a805      	add	r0, sp, #20
   d43c0:	f7ff feae 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d43c4:	b2c5      	uxtb	r5, r0
            ++it;
   d43c6:	a805      	add	r0, sp, #20
   d43c8:	f7ff feb4 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d43cc:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d43ce:	495b      	ldr	r1, [pc, #364]	; (d453c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
   d43d0:	4620      	mov	r0, r4
   d43d2:	f003 f8cf 	bl	d7574 <strcmp>
   d43d6:	4601      	mov	r1, r0
   d43d8:	2800      	cmp	r0, #0
   d43da:	f000 80a7 	beq.w	d452c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d43de:	4958      	ldr	r1, [pc, #352]	; (d4540 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
   d43e0:	4620      	mov	r0, r4
   d43e2:	f003 f8c7 	bl	d7574 <strcmp>
   d43e6:	2800      	cmp	r0, #0
   d43e8:	f000 809f 	beq.w	d452a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ea>
   d43ec:	4955      	ldr	r1, [pc, #340]	; (d4544 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>)
   d43ee:	4620      	mov	r0, r4
   d43f0:	f003 f8c0 	bl	d7574 <strcmp>
   d43f4:	2800      	cmp	r0, #0
   d43f6:	f000 8098 	beq.w	d452a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ea>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d43fa:	a805      	add	r0, sp, #20
   d43fc:	f7ff fe9a 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d4400:	9b05      	ldr	r3, [sp, #20]
   d4402:	429e      	cmp	r6, r3
   d4404:	d8db      	bhi.n	d43be <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7e>
   d4406:	e095      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4408:	ab0a      	add	r3, sp, #40	; 0x28
   d440a:	9307      	str	r3, [sp, #28]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d440c:	2203      	movs	r2, #3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d440e:	2310      	movs	r3, #16
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4410:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4412:	2500      	movs	r5, #0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4414:	494c      	ldr	r1, [pc, #304]	; (d4548 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4416:	9309      	str	r3, [sp, #36]	; 0x24
   d4418:	9508      	str	r5, [sp, #32]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d441a:	f7ff fe9a 	bl	d4152 <_ZN10BlynkParam3addEPKvj>
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
        rsp.add(pin);
   d441e:	a807      	add	r0, sp, #28
   d4420:	4621      	mov	r1, r4
   d4422:	f7ff fea7 	bl	d4174 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d4426:	4620      	mov	r0, r4
   d4428:	f002 f9c0 	bl	d67ac <digitalRead>
   d442c:	e026      	b.n	d447c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13c>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d442e:	a805      	add	r0, sp, #20
   d4430:	f7ff fe80 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d4434:	6803      	ldr	r3, [r0, #0]
   d4436:	429e      	cmp	r6, r3
   d4438:	d97c      	bls.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d443a:	b2a4      	uxth	r4, r4
   d443c:	2101      	movs	r1, #1
   d443e:	4620      	mov	r0, r4
   d4440:	f002 f98a 	bl	d6758 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4444:	a805      	add	r0, sp, #20
   d4446:	f7ff fe6b 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d444a:	1c01      	adds	r1, r0, #0
   d444c:	bf18      	it	ne
   d444e:	2101      	movne	r1, #1
   d4450:	4620      	mov	r0, r4
   d4452:	f002 f992 	bl	d677a <digitalWrite>
    } break;
   d4456:	e06d      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4458:	ab0a      	add	r3, sp, #40	; 0x28
   d445a:	9307      	str	r3, [sp, #28]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d445c:	2203      	movs	r2, #3
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d445e:	2310      	movs	r3, #16
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4460:	493a      	ldr	r1, [pc, #232]	; (d454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4462:	9309      	str	r3, [sp, #36]	; 0x24
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4464:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4466:	2500      	movs	r5, #0
   d4468:	9508      	str	r5, [sp, #32]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d446a:	f7ff fe72 	bl	d4152 <_ZN10BlynkParam3addEPKvj>
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
        rsp.add(pin);
   d446e:	a807      	add	r0, sp, #28
   d4470:	4621      	mov	r1, r4
   d4472:	f7ff fe7f 	bl	d4174 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4476:	4620      	mov	r0, r4
   d4478:	f002 f9ab 	bl	d67d2 <analogRead>
   d447c:	4601      	mov	r1, r0
   d447e:	a807      	add	r0, sp, #28
   d4480:	f7ff fe8a 	bl	d4198 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d4484:	9b08      	ldr	r3, [sp, #32]
   d4486:	9502      	str	r5, [sp, #8]
   d4488:	3b01      	subs	r3, #1
   d448a:	9300      	str	r3, [sp, #0]
   d448c:	9b07      	ldr	r3, [sp, #28]
   d448e:	9501      	str	r5, [sp, #4]
   d4490:	462a      	mov	r2, r5
   d4492:	2114      	movs	r1, #20
   d4494:	4640      	mov	r0, r8
   d4496:	f000 fab9 	bl	d4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d449a:	e04b      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d449c:	a805      	add	r0, sp, #20
   d449e:	f7ff fe49 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d44a2:	6803      	ldr	r3, [r0, #0]
   d44a4:	429e      	cmp	r6, r3
   d44a6:	d945      	bls.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d44a8:	b2a4      	uxth	r4, r4
   d44aa:	2101      	movs	r1, #1
   d44ac:	4620      	mov	r0, r4
   d44ae:	f002 f953 	bl	d6758 <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d44b2:	a805      	add	r0, sp, #20
   d44b4:	f7ff fe34 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d44b8:	4601      	mov	r1, r0
   d44ba:	4620      	mov	r0, r4
   d44bc:	f002 f9a0 	bl	d6800 <_Z11analogWritetm>
    } break;
   d44c0:	e038      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d44c2:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d44c4:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d44c6:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d44ca:	f000 fdfd 	bl	d50c8 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d44ce:	4603      	mov	r3, r0
            handler(req);
   d44d0:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d44d2:	b123      	cbz	r3, d44de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19e>
   d44d4:	4a1e      	ldr	r2, [pc, #120]	; (d4550 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
   d44d6:	4293      	cmp	r3, r2
   d44d8:	d001      	beq.n	d44de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19e>
            handler(req);
   d44da:	4798      	blx	r3
   d44dc:	e02a      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        } else {
            BlynkWidgetReadDefault(req);
   d44de:	f000 fdef 	bl	d50c0 <BlynkWidgetRead>
        }
    } break;
   d44e2:	e027      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    case BLYNK_HW_VW: {
        ++it;
   d44e4:	a805      	add	r0, sp, #20
   d44e6:	f7ff fe25 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d44ea:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d44ec:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d44ee:	1b5d      	subs	r5, r3, r5
   d44f0:	1b7d      	subs	r5, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d44f2:	4620      	mov	r0, r4
   d44f4:	950b      	str	r5, [sp, #44]	; 0x2c
   d44f6:	950c      	str	r5, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d44f8:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d44fc:	f000 fdee 	bl	d50dc <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4500:	4603      	mov	r3, r0
            handler(req, param2);
   d4502:	a90a      	add	r1, sp, #40	; 0x28
   d4504:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d4506:	b123      	cbz	r3, d4512 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
   d4508:	4a12      	ldr	r2, [pc, #72]	; (d4554 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x214>)
   d450a:	4293      	cmp	r3, r2
   d450c:	d001      	beq.n	d4512 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d2>
            handler(req, param2);
   d450e:	4798      	blx	r3
   d4510:	e010      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d4512:	f000 fdd6 	bl	d50c2 <BlynkWidgetWrite>
        }
    } break;
   d4516:	e00d      	b.n	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4518:	2300      	movs	r3, #0
   d451a:	2102      	movs	r1, #2
   d451c:	9100      	str	r1, [sp, #0]
   d451e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4522:	9302      	str	r3, [sp, #8]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	4619      	mov	r1, r3
   d4528:	e7b4      	b.n	d4494 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d452a:	2101      	movs	r1, #1
   d452c:	4628      	mov	r0, r5
   d452e:	f002 f913 	bl	d6758 <pinMode>
   d4532:	e762      	b.n	d43fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d4534:	b00e      	add	sp, #56	; 0x38
   d4536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d453a:	bf00      	nop
   d453c:	000d774e 	.word	0x000d774e
   d4540:	000d7751 	.word	0x000d7751
   d4544:	000d7755 	.word	0x000d7755
   d4548:	000d7759 	.word	0x000d7759
   d454c:	000d775c 	.word	0x000d775c
   d4550:	000d50c1 	.word	0x000d50c1
   d4554:	000d50c3 	.word	0x000d50c3

000d4558 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d4558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d455c:	b08e      	sub	sp, #56	; 0x38
   d455e:	af04      	add	r7, sp, #16
   d4560:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4562:	2205      	movs	r2, #5
   d4564:	f107 010c 	add.w	r1, r7, #12
   d4568:	6800      	ldr	r0, [r0, #0]
   d456a:	f001 f9e3 	bl	d5934 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d456e:	2800      	cmp	r0, #0
   d4570:	f000 8119 	beq.w	d47a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4574:	2805      	cmp	r0, #5
   d4576:	d001      	beq.n	d457c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
   d4578:	2000      	movs	r0, #0
   d457a:	e119      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d457c:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d4580:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4584:	0a13      	lsrs	r3, r2, #8
   d4586:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d458a:	0a23      	lsrs	r3, r4, #8
   d458c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4590:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
   d4592:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4594:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d4598:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d459c:	2a00      	cmp	r2, #0
   d459e:	d0eb      	beq.n	d4578 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d45a0:	7b3b      	ldrb	r3, [r7, #12]
   d45a2:	b9f3      	cbnz	r3, d45e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
   d45a4:	f000 fd88 	bl	d50b8 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d45a8:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d45aa:	60e8      	str	r0, [r5, #12]
   d45ac:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d45b0:	b99b      	cbnz	r3, d45da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   d45b2:	f8b7 100d 	ldrh.w	r1, [r7, #13]
   d45b6:	2901      	cmp	r1, #1
   d45b8:	d10f      	bne.n	d45da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
   d45ba:	2a04      	cmp	r2, #4
   d45bc:	d001      	beq.n	d45c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   d45be:	2ac8      	cmp	r2, #200	; 0xc8
   d45c0:	d1da      	bne.n	d4578 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
   d45c2:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
   d45c4:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
   d45c6:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
   d45c8:	4628      	mov	r0, r5
   d45ca:	f000 fad7 	bl	d4b7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d45ce:	f7ff fd71 	bl	d40b4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d45d2:	f000 fd77 	bl	d50c4 <BlynkNoOpCbk>
                return true;
   d45d6:	4620      	mov	r0, r4
   d45d8:	e0ea      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d45da:	1f50      	subs	r0, r2, #5
   d45dc:	bf18      	it	ne
   d45de:	2001      	movne	r0, #1
   d45e0:	e0e6      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d45e2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   d45e6:	d903      	bls.n	d45f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
   d45e8:	4628      	mov	r0, r5
   d45ea:	f7ff fe9f 	bl	d432c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d45ee:	e0da      	b.n	d47a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d45f0:	f104 0308 	add.w	r3, r4, #8
   d45f4:	f023 0307 	bic.w	r3, r3, #7
   d45f8:	46e8      	mov	r8, sp
   d45fa:	ebad 0d03 	sub.w	sp, sp, r3
   d45fe:	ae04      	add	r6, sp, #16
   d4600:	4622      	mov	r2, r4
   d4602:	4631      	mov	r1, r6
   d4604:	6828      	ldr	r0, [r5, #0]
   d4606:	f001 f995 	bl	d5934 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d460a:	4284      	cmp	r4, r0
   d460c:	f04f 0400 	mov.w	r4, #0
   d4610:	f040 80c4 	bne.w	d479c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d4614:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d4618:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d461a:	f000 fd4d 	bl	d50b8 <_Z11BlynkMillisv>

    switch (hdr.type)
   d461e:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d4620:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
   d4622:	2b11      	cmp	r3, #17
   d4624:	d072      	beq.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
   d4626:	d806      	bhi.n	d4636 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
   d4628:	2b06      	cmp	r3, #6
   d462a:	d020      	beq.n	d466e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
   d462c:	2b0f      	cmp	r3, #15
   d462e:	d060      	beq.n	d46f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
   d4630:	2b02      	cmp	r3, #2
   d4632:	d009      	beq.n	d4648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
   d4634:	e0ae      	b.n	d4794 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4636:	2b29      	cmp	r3, #41	; 0x29
   d4638:	d025      	beq.n	d4686 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   d463a:	2b37      	cmp	r3, #55	; 0x37
   d463c:	f000 80b0 	beq.w	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d4640:	2b14      	cmp	r3, #20
   d4642:	f040 80a7 	bne.w	d4794 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4646:	e054      	b.n	d46f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d4648:	7f6b      	ldrb	r3, [r5, #29]
   d464a:	b943      	cbnz	r3, d465e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
   d464c:	2301      	movs	r3, #1
   d464e:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d4650:	4628      	mov	r0, r5
   d4652:	f000 fa93 	bl	d4b7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4656:	f7ff fd2d 	bl	d40b4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d465a:	f000 fd33 	bl	d50c4 <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d465e:	2300      	movs	r3, #0
   d4660:	21c8      	movs	r1, #200	; 0xc8
   d4662:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d4666:	9302      	str	r3, [sp, #8]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	9100      	str	r1, [sp, #0]
   d466c:	e006      	b.n	d467c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d466e:	23c8      	movs	r3, #200	; 0xc8
   d4670:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d4674:	9300      	str	r3, [sp, #0]
   d4676:	9402      	str	r4, [sp, #8]
   d4678:	9401      	str	r4, [sp, #4]
   d467a:	4623      	mov	r3, r4
   d467c:	4619      	mov	r1, r3
   d467e:	4628      	mov	r0, r5
   d4680:	f000 f9c4 	bl	d4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4684:	e08c      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d4686:	68ab      	ldr	r3, [r5, #8]
   d4688:	b91b      	cbnz	r3, d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
   d468a:	2020      	movs	r0, #32
   d468c:	f000 ff5e 	bl	d554c <malloc>
   d4690:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4692:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4696:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4698:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d469a:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d469c:	623c      	str	r4, [r7, #32]
   d469e:	d301      	bcc.n	d46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
   d46a0:	2000      	movs	r0, #0
   d46a2:	e07e      	b.n	d47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
   d46a4:	2220      	movs	r2, #32
   d46a6:	4631      	mov	r1, r6
   d46a8:	68a8      	ldr	r0, [r5, #8]
   d46aa:	f002 ff75 	bl	d7598 <strncpy>
        if (++it < param.end())
   d46ae:	f107 001c 	add.w	r0, r7, #28
   d46b2:	f7ff fd3f 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d46b6:	6803      	ldr	r3, [r0, #0]
   d46b8:	42a3      	cmp	r3, r4
   d46ba:	d207      	bcs.n	d46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d46bc:	69f8      	ldr	r0, [r7, #28]
   d46be:	b118      	cbz	r0, d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d46c0:	6a3b      	ldr	r3, [r7, #32]
   d46c2:	4298      	cmp	r0, r3
   d46c4:	d371      	bcc.n	d47aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d46c6:	2000      	movs	r0, #0
            redir_port = it.asLong();
   d46c8:	b284      	uxth	r4, r0
   d46ca:	e000      	b.n	d46ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d46cc:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d46ce:	6828      	ldr	r0, [r5, #0]
   d46d0:	f001 fe6b 	bl	d63aa <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d46d4:	682b      	ldr	r3, [r5, #0]
   d46d6:	68aa      	ldr	r2, [r5, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d46d8:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d46da:	871c      	strh	r4, [r3, #56]	; 0x38
        state = CONNECTING;
   d46dc:	2300      	movs	r3, #0
   d46de:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d46e0:	f000 fcea 	bl	d50b8 <_Z11BlynkMillisv>
   d46e4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d46e8:	3808      	subs	r0, #8
   d46ea:	6128      	str	r0, [r5, #16]
   d46ec:	60e8      	str	r0, [r5, #12]
   d46ee:	6168      	str	r0, [r5, #20]
   d46f0:	e056      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d46f2:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
   d46f4:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d46f8:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d46fc:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
   d46fe:	4631      	mov	r1, r6
   d4700:	4628      	mov	r0, r5
   d4702:	f7ff fe1d 	bl	d4340 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4706:	2300      	movs	r3, #0
   d4708:	836b      	strh	r3, [r5, #26]
   d470a:	e049      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d470c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d4710:	713c      	strb	r4, [r7, #4]
   d4712:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d4714:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4716:	617e      	str	r6, [r7, #20]
   d4718:	61bb      	str	r3, [r7, #24]
   d471a:	d241      	bcs.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d471c:	6830      	ldr	r0, [r6, #0]
   d471e:	60b8      	str	r0, [r7, #8]

        ++it;
   d4720:	f107 0014 	add.w	r0, r7, #20
   d4724:	f7ff fd06 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d4728:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d472a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d472e:	61fa      	str	r2, [r7, #28]
   d4730:	1b96      	subs	r6, r2, r6
   d4732:	1b9e      	subs	r6, r3, r6
        BlynkParam param2(start, length);

        switch (cmd32) {
   d4734:	4a20      	ldr	r2, [pc, #128]	; (d47b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
   d4736:	68bb      	ldr	r3, [r7, #8]
   d4738:	623e      	str	r6, [r7, #32]
   d473a:	4293      	cmp	r3, r2
   d473c:	627e      	str	r6, [r7, #36]	; 0x24
   d473e:	d01d      	beq.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   d4740:	d80b      	bhi.n	d475a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
   d4742:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d4746:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d474a:	4293      	cmp	r3, r2
   d474c:	d128      	bne.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d474e:	f107 011c 	add.w	r1, r7, #28
   d4752:	1d38      	adds	r0, r7, #4
   d4754:	f000 fcb5 	bl	d50c2 <BlynkWidgetWrite>
   d4758:	e022      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d475a:	4a18      	ldr	r2, [pc, #96]	; (d47bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
   d475c:	4293      	cmp	r3, r2
   d475e:	d013      	beq.n	d4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   d4760:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d4764:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d4768:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d476c:	4293      	cmp	r3, r2
   d476e:	d117      	bne.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4770:	f107 011c 	add.w	r1, r7, #28
   d4774:	1d38      	adds	r0, r7, #4
   d4776:	f000 fca4 	bl	d50c2 <BlynkWidgetWrite>
   d477a:	e011      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d477c:	f107 011c 	add.w	r1, r7, #28
   d4780:	1d38      	adds	r0, r7, #4
   d4782:	f000 fc9e 	bl	d50c2 <BlynkWidgetWrite>
   d4786:	e00b      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4788:	f107 011c 	add.w	r1, r7, #28
   d478c:	1d38      	adds	r0, r7, #4
   d478e:	f000 fc98 	bl	d50c2 <BlynkWidgetWrite>
   d4792:	e005      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d4794:	4628      	mov	r0, r5
   d4796:	f7ff fdc9 	bl	d432c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d479a:	e001      	b.n	d47a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d479c:	4620      	mov	r0, r4
   d479e:	e000      	b.n	d47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d47a0:	2001      	movs	r0, #1
   d47a2:	46c5      	mov	sp, r8
   d47a4:	e004      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d47a6:	2001      	movs	r0, #1
   d47a8:	e002      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d47aa:	f002 fe95 	bl	d74d8 <atol>
   d47ae:	e78b      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
   d47b0:	3728      	adds	r7, #40	; 0x28
   d47b2:	46bd      	mov	sp, r7
   d47b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d47b8:	00637472 	.word	0x00637472
   d47bc:	6e6f6361 	.word	0x6e6f6361

000d47c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d47c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47c4:	4604      	mov	r4, r0
   d47c6:	b08a      	sub	sp, #40	; 0x28
   d47c8:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d47ca:	f7ff fc73 	bl	d40b4 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d47ce:	7f63      	ldrb	r3, [r4, #29]
   d47d0:	2b02      	cmp	r3, #2
   d47d2:	f000 809d 	beq.w	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d47d6:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d47d8:	8b62      	ldrh	r2, [r4, #26]
   d47da:	3301      	adds	r3, #1
   d47dc:	b2db      	uxtb	r3, r3
   d47de:	7723      	strb	r3, [r4, #28]
   d47e0:	2a00      	cmp	r2, #0
   d47e2:	d141      	bne.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d47e4:	2b02      	cmp	r3, #2
   d47e6:	d83f      	bhi.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d47e8:	6820      	ldr	r0, [r4, #0]
   d47ea:	f001 fc0a 	bl	d6002 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d47ee:	b140      	cbz	r0, d4802 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
   d47f0:	2d00      	cmp	r5, #0
   d47f2:	f040 808f 	bne.w	d4914 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
   d47f6:	6820      	ldr	r0, [r4, #0]
   d47f8:	f001 fdee 	bl	d63d8 <_ZN9TCPClient9availableEv>
   d47fc:	2800      	cmp	r0, #0
   d47fe:	f300 8089 	bgt.w	d4914 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d4802:	f000 fc59 	bl	d50b8 <_Z11BlynkMillisv>
   d4806:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4808:	6820      	ldr	r0, [r4, #0]
   d480a:	f001 fbfa 	bl	d6002 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d480e:	7f67      	ldrb	r7, [r4, #29]
   d4810:	2f01      	cmp	r7, #1
   d4812:	4605      	mov	r5, r0
   d4814:	d12a      	bne.n	d486c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
   d4816:	b920      	cbnz	r0, d4822 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d4818:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d481a:	4620      	mov	r0, r4
   d481c:	f7ff fd86 	bl	d432c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4820:	e072      	b.n	d4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d4822:	68e3      	ldr	r3, [r4, #12]
   d4824:	f644 2238 	movw	r2, #19000	; 0x4a38
   d4828:	1af3      	subs	r3, r6, r3
   d482a:	4293      	cmp	r3, r2
   d482c:	d904      	bls.n	d4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d482e:	4620      	mov	r0, r4
   d4830:	f7ff fd7c 	bl	d432c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4834:	2500      	movs	r5, #0
   d4836:	e067      	b.n	d4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4838:	f242 7210 	movw	r2, #10000	; 0x2710
   d483c:	4293      	cmp	r3, r2
   d483e:	d803      	bhi.n	d4848 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
   d4840:	6923      	ldr	r3, [r4, #16]
   d4842:	1af3      	subs	r3, r6, r3
   d4844:	4293      	cmp	r3, r2
   d4846:	d90f      	bls.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4848:	6963      	ldr	r3, [r4, #20]
   d484a:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d484e:	1af3      	subs	r3, r6, r3
   d4850:	4293      	cmp	r3, r2
   d4852:	d909      	bls.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d4854:	2300      	movs	r3, #0
   d4856:	9302      	str	r3, [sp, #8]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	9300      	str	r3, [sp, #0]
   d485c:	461a      	mov	r2, r3
   d485e:	2106      	movs	r1, #6
   d4860:	4620      	mov	r0, r4
   d4862:	f000 f8d3 	bl	d4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d4866:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d4868:	2501      	movs	r5, #1
   d486a:	e04d      	b.n	d4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d486c:	2f00      	cmp	r7, #0
   d486e:	d1fb      	bne.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4870:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d4872:	b150      	cbz	r0, d488a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
   d4874:	1ab6      	subs	r6, r6, r2
   d4876:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d487a:	429e      	cmp	r6, r3
   d487c:	d9f4      	bls.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d487e:	6820      	ldr	r0, [r4, #0]
   d4880:	f001 fd93 	bl	d63aa <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
   d4884:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
   d4886:	7767      	strb	r7, [r4, #29]
            return false;
   d4888:	e03e      	b.n	d4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d488a:	1ab2      	subs	r2, r6, r2
   d488c:	f241 3388 	movw	r3, #5000	; 0x1388
   d4890:	429a      	cmp	r2, r3
   d4892:	d9e9      	bls.n	d4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4894:	6820      	ldr	r0, [r4, #0]
   d4896:	f001 fd88 	bl	d63aa <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d489a:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
   d489e:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
   d48a2:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
   d48a6:	f1bc 0f00 	cmp.w	ip, #0
   d48aa:	d006      	beq.n	d48ba <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
   d48ac:	462b      	mov	r3, r5
   d48ae:	4642      	mov	r2, r8
   d48b0:	4661      	mov	r1, ip
   d48b2:	4670      	mov	r0, lr
   d48b4:	f001 fbd2 	bl	d605c <_ZN9TCPClient7connectEPKctm>
   d48b8:	e00e      	b.n	d48d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d48ba:	4b1f      	ldr	r3, [pc, #124]	; (d4938 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
   d48bc:	9304      	str	r3, [sp, #16]
   d48be:	f10e 0720 	add.w	r7, lr, #32
   d48c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d48c4:	ad05      	add	r5, sp, #20
   d48c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d48c8:	683b      	ldr	r3, [r7, #0]
   d48ca:	702b      	strb	r3, [r5, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
   d48cc:	4642      	mov	r2, r8
   d48ce:	4663      	mov	r3, ip
   d48d0:	a904      	add	r1, sp, #16
   d48d2:	4670      	mov	r0, lr
   d48d4:	f001 fcec 	bl	d62b0 <_ZN9TCPClient7connectE9IPAddresstm>
   d48d8:	1e43      	subs	r3, r0, #1
   d48da:	425d      	negs	r5, r3
   d48dc:	415d      	adcs	r5, r3
   d48de:	b90d      	cbnz	r5, d48e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
   d48e0:	6166      	str	r6, [r4, #20]
                return false;
   d48e2:	e011      	b.n	d4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d48e4:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d48e6:	2601      	movs	r6, #1
   d48e8:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d48ea:	4638      	mov	r0, r7
   d48ec:	f002 fe4c 	bl	d7588 <strlen>
   d48f0:	2300      	movs	r3, #0
   d48f2:	e88d 0009 	stmia.w	sp, {r0, r3}
   d48f6:	9302      	str	r3, [sp, #8]
   d48f8:	4632      	mov	r2, r6
   d48fa:	463b      	mov	r3, r7
   d48fc:	2102      	movs	r1, #2
   d48fe:	4620      	mov	r0, r4
   d4900:	f000 f884 	bl	d4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4904:	6923      	ldr	r3, [r4, #16]
   d4906:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d4908:	7f23      	ldrb	r3, [r4, #28]
   d490a:	3b01      	subs	r3, #1
   d490c:	7723      	strb	r3, [r4, #28]
   d490e:	e00e      	b.n	d492e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d4910:	2500      	movs	r5, #0
   d4912:	e00c      	b.n	d492e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d4914:	4620      	mov	r0, r4
   d4916:	f7ff fe1f 	bl	d4558 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d491a:	4605      	mov	r5, r0
   d491c:	2800      	cmp	r0, #0
   d491e:	f47f af6a 	bne.w	d47f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4922:	6820      	ldr	r0, [r4, #0]
   d4924:	f001 fd41 	bl	d63aa <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d4928:	f000 fbcc 	bl	d50c4 <BlynkNoOpCbk>
                return false;
   d492c:	e7ec      	b.n	d4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
   d492e:	4628      	mov	r0, r5
   d4930:	b00a      	add	sp, #40	; 0x28
   d4932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4936:	bf00      	nop
   d4938:	000d7dc4 	.word	0x000d7dc4

000d493c <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4940:	4614      	mov	r4, r2
   d4942:	b08c      	sub	sp, #48	; 0x30
   d4944:	4605      	mov	r5, r0
   d4946:	3404      	adds	r4, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4948:	f640 30b8 	movw	r0, #3000	; 0xbb8
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d494c:	460f      	mov	r7, r1
   d494e:	4698      	mov	r8, r3
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4950:	f000 fbb0 	bl	d50b4 <_Z10BlynkDelaym>
   d4954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4956:	ae01      	add	r6, sp, #4
   d4958:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d495a:	6823      	ldr	r3, [r4, #0]
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d495c:	606f      	str	r7, [r5, #4]
   d495e:	7033      	strb	r3, [r6, #0]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4960:	f000 fbaa 	bl	d50b8 <_Z11BlynkMillisv>
   d4964:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4968:	3808      	subs	r0, #8
   d496a:	af01      	add	r7, sp, #4
   d496c:	6128      	str	r0, [r5, #16]
   d496e:	60e8      	str	r0, [r5, #12]
   d4970:	6168      	str	r0, [r5, #20]
   d4972:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4974:	ae07      	add	r6, sp, #28
   d4976:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4978:	683b      	ldr	r3, [r7, #0]
   d497a:	7033      	strb	r3, [r6, #0]
   d497c:	af07      	add	r7, sp, #28
   d497e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    void config(const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(addr, port);
   d4980:	682c      	ldr	r4, [r5, #0]
    BlynkTransportParticle()
        : domain(NULL), port(0)
    {}

    void begin(IPAddress a, uint16_t p) {
        domain = NULL;
   d4982:	f04f 0e00 	mov.w	lr, #0
   d4986:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
        port = p;
   d498a:	f8a4 8038 	strh.w	r8, [r4, #56]	; 0x38
   d498e:	3420      	adds	r4, #32
   d4990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4992:	6833      	ldr	r3, [r6, #0]
   d4994:	7023      	strb	r3, [r4, #0]

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d4996:	f242 3627 	movw	r6, #8999	; 0x2327

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
   d499a:	4674      	mov	r4, lr
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d499c:	6828      	ldr	r0, [r5, #0]
   d499e:	f001 fd04 	bl	d63aa <_ZN9TCPClient4stopEv>
   d49a2:	776c      	strb	r4, [r5, #29]
        millis_time_t started = BlynkMillis();
   d49a4:	f000 fb88 	bl	d50b8 <_Z11BlynkMillisv>
   d49a8:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
   d49aa:	7f6b      	ldrb	r3, [r5, #29]
   d49ac:	2b01      	cmp	r3, #1
   d49ae:	d009      	beq.n	d49c4 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
   d49b0:	f000 fb82 	bl	d50b8 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d49b4:	1bc0      	subs	r0, r0, r7
   d49b6:	42b0      	cmp	r0, r6
   d49b8:	d804      	bhi.n	d49c4 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
        {
            run();
   d49ba:	2100      	movs	r1, #0
   d49bc:	4628      	mov	r0, r5
   d49be:	f7ff feff 	bl	d47c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d49c2:	e7f2      	b.n	d49aa <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, addr, port);
        while(this->connect() != true) {}
   d49c4:	7f6b      	ldrb	r3, [r5, #29]
   d49c6:	2b01      	cmp	r3, #1
   d49c8:	d1e8      	bne.n	d499c <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d49ca:	b00c      	add	sp, #48	; 0x30
   d49cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d49d0 <setup>:
float value2 = 0;
//double answer = 0;
enum selected_operator {add,subtract,multiply,divide,none};
enum selected_operator selectedOperator;
uint16_t delay_amount = 400;
void setup() {
   d49d0:	b500      	push	{lr}
   d49d2:	b089      	sub	sp, #36	; 0x24
  Blynk.begin("74b8982979ac48d2b49c1e32adcf79e3",IPAddress(167,99,150,124),8080); 
   d49d4:	237c      	movs	r3, #124	; 0x7c
   d49d6:	9300      	str	r3, [sp, #0]
   d49d8:	2263      	movs	r2, #99	; 0x63
   d49da:	2396      	movs	r3, #150	; 0x96
   d49dc:	21a7      	movs	r1, #167	; 0xa7
   d49de:	a802      	add	r0, sp, #8
   d49e0:	f001 f8d8 	bl	d5b94 <_ZN9IPAddressC1Ehhhh>
   d49e4:	f641 7390 	movw	r3, #8080	; 0x1f90
   d49e8:	aa02      	add	r2, sp, #8
   d49ea:	4906      	ldr	r1, [pc, #24]	; (d4a04 <setup+0x34>)
   d49ec:	4806      	ldr	r0, [pc, #24]	; (d4a08 <setup+0x38>)
   d49ee:	f7ff ffa5 	bl	d493c <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  Serial.begin(9600);
   d49f2:	f001 f949 	bl	d5c88 <_Z16_fetch_usbserialv>
   d49f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d49fa:	f001 f939 	bl	d5c70 <_ZN9USBSerial5beginEl>
}
   d49fe:	b009      	add	sp, #36	; 0x24
   d4a00:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a04:	000d775f 	.word	0x000d775f
   d4a08:	2003e338 	.word	0x2003e338

000d4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a10:	b083      	sub	sp, #12
   d4a12:	af00      	add	r7, sp, #0
   d4a14:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4a16:	6800      	ldr	r0, [r0, #0]
   d4a18:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4a1a:	4689      	mov	r9, r1
   d4a1c:	4616      	mov	r6, r2
   d4a1e:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4a20:	46ea      	mov	sl, sp
   d4a22:	f001 faee 	bl	d6002 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
   d4a26:	2800      	cmp	r0, #0
   d4a28:	d060      	beq.n	d4aec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
   d4a2a:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d4a2e:	f000 80a0 	beq.w	d4b72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d4a32:	f1b9 0f06 	cmp.w	r9, #6
   d4a36:	f000 809c 	beq.w	d4b72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d4a3a:	7f63      	ldrb	r3, [r4, #29]
   d4a3c:	2b01      	cmp	r3, #1
   d4a3e:	d155      	bne.n	d4aec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d4a40:	b916      	cbnz	r6, d4a48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4a42:	8b66      	ldrh	r6, [r4, #26]
   d4a44:	2e00      	cmp	r6, #0
   d4a46:	d056      	beq.n	d4af6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4a48:	f1a9 030c 	sub.w	r3, r9, #12
   d4a4c:	2b08      	cmp	r3, #8
   d4a4e:	d95a      	bls.n	d4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfa>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d4a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a52:	f1bb 0f00 	cmp.w	fp, #0
   d4a56:	bf14      	ite	ne
   d4a58:	46a8      	movne	r8, r5
   d4a5a:	f04f 0800 	moveq.w	r8, #0
   d4a5e:	2a00      	cmp	r2, #0
   d4a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a62:	f108 0305 	add.w	r3, r8, #5
   d4a66:	bf14      	ite	ne
   d4a68:	4690      	movne	r8, r2
   d4a6a:	f04f 0800 	moveq.w	r8, #0
   d4a6e:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d4a70:	f108 0307 	add.w	r3, r8, #7
   d4a74:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d4a78:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d4a7a:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d4a7e:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d4a82:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d4a88:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d4a8c:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d4a90:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a94:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d4a98:	f1bb 0f00 	cmp.w	fp, #0
   d4a9c:	d052      	beq.n	d4b44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
   d4a9e:	2d00      	cmp	r5, #0
   d4aa0:	d050      	beq.n	d4b44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
        memcpy(buff + pos, data, length);
   d4aa2:	462a      	mov	r2, r5
   d4aa4:	4659      	mov	r1, fp
   d4aa6:	f10d 0005 	add.w	r0, sp, #5
   d4aaa:	f002 fd27 	bl	d74fc <memcpy>
        pos += length;
   d4aae:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d4ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4ab2:	2b00      	cmp	r3, #0
   d4ab4:	d148      	bne.n	d4b48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d4ab6:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d4ab8:	4545      	cmp	r5, r8
   d4aba:	d251      	bcs.n	d4b60 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4abc:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d4ac0:	687b      	ldr	r3, [r7, #4]
   d4ac2:	6820      	ldr	r0, [r4, #0]
   d4ac4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4ac8:	bf28      	it	cs
   d4aca:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4ace:	1959      	adds	r1, r3, r5
   d4ad0:	f001 fa81 	bl	d5fd6 <_ZN9TCPClient5writeEPKhj>
   d4ad4:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4ad6:	2000      	movs	r0, #0
   d4ad8:	f000 faec 	bl	d50b4 <_Z10BlynkDelaym>
        if (w == 0) {
   d4adc:	2e00      	cmp	r6, #0
   d4ade:	d13d      	bne.n	d4b5c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4ae0:	6820      	ldr	r0, [r4, #0]
   d4ae2:	f001 fc62 	bl	d63aa <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
   d4ae6:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4ae8:	f000 faec 	bl	d50c4 <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4aec:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d4aee:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4af0:	46bd      	mov	sp, r7
   d4af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4af6:	8b23      	ldrh	r3, [r4, #24]
   d4af8:	3301      	adds	r3, #1
   d4afa:	b29b      	uxth	r3, r3
   d4afc:	b903      	cbnz	r3, d4b00 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf4>
        msgIdOut = 1;
   d4afe:	2301      	movs	r3, #1
   d4b00:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4b02:	8b26      	ldrh	r6, [r4, #24]
   d4b04:	e7a0      	b.n	d4a48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4b06:	68e3      	ldr	r3, [r4, #12]
   d4b08:	6922      	ldr	r2, [r4, #16]
   d4b0a:	4293      	cmp	r3, r2
   d4b0c:	bf38      	it	cc
   d4b0e:	4613      	movcc	r3, r2
   d4b10:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4b14:	f000 fad0 	bl	d50b8 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d4b18:	ebc0 0008 	rsb	r0, r0, r8
   d4b1c:	2800      	cmp	r0, #0
   d4b1e:	db0a      	blt.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12a>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d4b20:	2100      	movs	r1, #0
   d4b22:	4620      	mov	r0, r4
   d4b24:	f7ff fe4c 	bl	d47c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4b28:	f000 fac6 	bl	d50b8 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d4b2c:	ebc0 0008 	rsb	r0, r0, r8
   d4b30:	2800      	cmp	r0, #0
   d4b32:	daf5      	bge.n	d4b20 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x114>
   d4b34:	e78c      	b.n	d4a50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d4b36:	7f21      	ldrb	r1, [r4, #28]
   d4b38:	2900      	cmp	r1, #0
   d4b3a:	d189      	bne.n	d4a50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f7ff fe3f 	bl	d47c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4b42:	e785      	b.n	d4a50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d4b44:	2005      	movs	r0, #5
   d4b46:	e7b3      	b.n	d4ab0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d4b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4b4a:	2b00      	cmp	r3, #0
   d4b4c:	d0b3      	beq.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
        memcpy(buff + pos, data2, length2);
   d4b4e:	461a      	mov	r2, r3
   d4b50:	687b      	ldr	r3, [r7, #4]
   d4b52:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4b54:	4418      	add	r0, r3
   d4b56:	f002 fcd1 	bl	d74fc <memcpy>
   d4b5a:	e7ac      	b.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d4b5c:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d4b5e:	e7ab      	b.n	d4ab8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        }
    }

#endif

    if (wlen != full_length) {
   d4b60:	d003      	beq.n	d4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15e>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d4b62:	4620      	mov	r0, r4
   d4b64:	f7ff fbe2 	bl	d432c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4b68:	e7c0      	b.n	d4aec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
    }

    lastActivityOut = BlynkMillis();
   d4b6a:	f000 faa5 	bl	d50b8 <_Z11BlynkMillisv>
   d4b6e:	6120      	str	r0, [r4, #16]
   d4b70:	e7bc      	b.n	d4aec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d4b72:	2e00      	cmp	r6, #0
   d4b74:	f47f af6c 	bne.w	d4a50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d4b78:	e763      	b.n	d4a42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
	...

000d4b7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d4b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
   d4b7e:	2200      	movs	r2, #0
   d4b80:	2349      	movs	r3, #73	; 0x49
   d4b82:	9300      	str	r3, [sp, #0]
   d4b84:	9202      	str	r2, [sp, #8]
   d4b86:	9201      	str	r2, [sp, #4]
   d4b88:	4b03      	ldr	r3, [pc, #12]	; (d4b98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d4b8a:	2111      	movs	r1, #17
   d4b8c:	f7ff ff3e 	bl	d4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d4b90:	b005      	add	sp, #20
   d4b92:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b96:	bf00      	nop
   d4b98:	000d76fc 	.word	0x000d76fc

000d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d4b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b9e:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4ba2:	ab0a      	add	r3, sp, #40	; 0x28
   d4ba4:	2400      	movs	r4, #0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4ba6:	2203      	movs	r2, #3
   d4ba8:	4606      	mov	r6, r0
   d4baa:	460d      	mov	r5, r1
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4bac:	9307      	str	r3, [sp, #28]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4bae:	a807      	add	r0, sp, #28
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4bb4:	4916      	ldr	r1, [pc, #88]	; (d4c10 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
   d4bb6:	ed8d 0a05 	vstr	s0, [sp, #20]
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4bba:	9309      	str	r3, [sp, #36]	; 0x24
   d4bbc:	9408      	str	r4, [sp, #32]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d4bbe:	f7ff fac8 	bl	d4152 <_ZN10BlynkParam3addEPKvj>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
        cmd.add(pin);
   d4bc2:	4629      	mov	r1, r5
   d4bc4:	a807      	add	r0, sp, #28
   d4bc6:	f7ff fad5 	bl	d4174 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d4bca:	ed9d 0a05 	vldr	s0, [sp, #20]
   d4bce:	9b08      	ldr	r3, [sp, #32]
   d4bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4bd2:	9d07      	ldr	r5, [sp, #28]
   d4bd4:	ee10 0a10 	vmov	r0, s0
   d4bd8:	1acf      	subs	r7, r1, r3
   d4bda:	441d      	add	r5, r3
   d4bdc:	f002 f92c 	bl	d6e38 <__aeabi_f2d>
   d4be0:	4a0c      	ldr	r2, [pc, #48]	; (d4c14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d4be2:	e9cd 0100 	strd	r0, r1, [sp]
   d4be6:	4639      	mov	r1, r7
   d4be8:	4628      	mov	r0, r5
   d4bea:	f000 fcbf 	bl	d556c <snprintf>
   d4bee:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4bf0:	9402      	str	r4, [sp, #8]
   d4bf2:	3001      	adds	r0, #1
   d4bf4:	4418      	add	r0, r3
   d4bf6:	9008      	str	r0, [sp, #32]
   d4bf8:	3801      	subs	r0, #1
   d4bfa:	9000      	str	r0, [sp, #0]
   d4bfc:	9401      	str	r4, [sp, #4]
   d4bfe:	9b07      	ldr	r3, [sp, #28]
   d4c00:	4622      	mov	r2, r4
   d4c02:	2114      	movs	r1, #20
   d4c04:	4630      	mov	r0, r6
   d4c06:	f7ff ff01 	bl	d4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4c0a:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d4c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c10:	000d7780 	.word	0x000d7780
   d4c14:	000d7783 	.word	0x000d7783

000d4c18 <_Z15determine_inputv>:

void determine_input(){
   d4c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(num_0 == 1){
   d4c1c:	4bb4      	ldr	r3, [pc, #720]	; (d4ef0 <_Z15determine_inputv+0x2d8>)
   d4c1e:	681b      	ldr	r3, [r3, #0]
   d4c20:	2b01      	cmp	r3, #1
   d4c22:	d10a      	bne.n	d4c3a <_Z15determine_inputv+0x22>
    Serial.println("0");
    value2 = ((value2 * 10) + 0);
   d4c24:	4cb3      	ldr	r4, [pc, #716]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
  Serial.begin(9600);
}

void determine_input(){
  if(num_0 == 1){
    Serial.println("0");
   d4c26:	f001 f82f 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4c2a:	49b3      	ldr	r1, [pc, #716]	; (d4ef8 <_Z15determine_inputv+0x2e0>)
   d4c2c:	f000 fd55 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 0);
   d4c30:	edd4 6a00 	vldr	s13, [r4]
   d4c34:	eddf 7ab1 	vldr	s15, [pc, #708]	; d4efc <_Z15determine_inputv+0x2e4>
   d4c38:	e00d      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2);   
    delay(delay_amount);
  }
  else if(num_1 == 1){
   d4c3a:	4bb1      	ldr	r3, [pc, #708]	; (d4f00 <_Z15determine_inputv+0x2e8>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	2b01      	cmp	r3, #1
   d4c40:	d124      	bne.n	d4c8c <_Z15determine_inputv+0x74>
    Serial.println("1");
    value2 = ((value2 * 10) + 1);
   d4c42:	4cac      	ldr	r4, [pc, #688]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2);   
    delay(delay_amount);
  }
  else if(num_1 == 1){
    Serial.println("1");
   d4c44:	f001 f820 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4c48:	49ae      	ldr	r1, [pc, #696]	; (d4f04 <_Z15determine_inputv+0x2ec>)
   d4c4a:	f000 fd46 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 1);
   d4c4e:	edd4 6a00 	vldr	s13, [r4]
   d4c52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4c56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4c5a:	eee6 7a87 	vfma.f32	s15, s13, s14
   d4c5e:	edc4 7a00 	vstr	s15, [r4]
    Serial.println((float) value2);
   d4c62:	f001 f811 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4c66:	4605      	mov	r5, r0
   d4c68:	6820      	ldr	r0, [r4, #0]
   d4c6a:	f002 f8e5 	bl	d6e38 <__aeabi_f2d>
   d4c6e:	ec41 0b10 	vmov	d0, r0, r1
   d4c72:	2102      	movs	r1, #2
   d4c74:	4628      	mov	r0, r5
   d4c76:	f000 fe3d 	bl	d58f4 <_ZN5Print7printlnEdi>
    Blynk.virtualWrite(blynk_display, value2);   
   d4c7a:	ed94 0a00 	vldr	s0, [r4]
   d4c7e:	48a2      	ldr	r0, [pc, #648]	; (d4f08 <_Z15determine_inputv+0x2f0>)
   d4c80:	2113      	movs	r1, #19
   d4c82:	f7ff ff8b 	bl	d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    delay(delay_amount);
   d4c86:	4ba1      	ldr	r3, [pc, #644]	; (d4f0c <_Z15determine_inputv+0x2f4>)
   d4c88:	8818      	ldrh	r0, [r3, #0]
   d4c8a:	e1cc      	b.n	d5026 <_Z15determine_inputv+0x40e>
  }
  else if(num_2 == 1){
   d4c8c:	4ba0      	ldr	r3, [pc, #640]	; (d4f10 <_Z15determine_inputv+0x2f8>)
   d4c8e:	681b      	ldr	r3, [r3, #0]
   d4c90:	2b01      	cmp	r3, #1
   d4c92:	d10a      	bne.n	d4caa <_Z15determine_inputv+0x92>
    Serial.println("2");
    value2 = ((value2 * 10) + 2);
   d4c94:	4c97      	ldr	r4, [pc, #604]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2);   
    delay(delay_amount);
  }
  else if(num_2 == 1){
    Serial.println("2");
   d4c96:	f000 fff7 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4c9a:	499e      	ldr	r1, [pc, #632]	; (d4f14 <_Z15determine_inputv+0x2fc>)
   d4c9c:	f000 fd1d 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 2);
   d4ca0:	edd4 6a00 	vldr	s13, [r4]
   d4ca4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d4ca8:	e7d5      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2);      
    delay(delay_amount);
  }
  else if(num_3 == 1){
   d4caa:	4b9b      	ldr	r3, [pc, #620]	; (d4f18 <_Z15determine_inputv+0x300>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	2b01      	cmp	r3, #1
   d4cb0:	d10a      	bne.n	d4cc8 <_Z15determine_inputv+0xb0>
    Serial.println("3");
    value2 = ((value2 * 10) + 3);
   d4cb2:	4c90      	ldr	r4, [pc, #576]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2);      
    delay(delay_amount);
  }
  else if(num_3 == 1){
    Serial.println("3");
   d4cb4:	f000 ffe8 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4cb8:	4998      	ldr	r1, [pc, #608]	; (d4f1c <_Z15determine_inputv+0x304>)
   d4cba:	f000 fd0e 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 3);
   d4cbe:	edd4 6a00 	vldr	s13, [r4]
   d4cc2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d4cc6:	e7c6      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_4 == 1){
   d4cc8:	4b95      	ldr	r3, [pc, #596]	; (d4f20 <_Z15determine_inputv+0x308>)
   d4cca:	681b      	ldr	r3, [r3, #0]
   d4ccc:	2b01      	cmp	r3, #1
   d4cce:	d10a      	bne.n	d4ce6 <_Z15determine_inputv+0xce>
    Serial.println("4");
    value2 = ((value2 * 10) + 4);
   d4cd0:	4c88      	ldr	r4, [pc, #544]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_4 == 1){
    Serial.println("4");
   d4cd2:	f000 ffd9 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4cd6:	4993      	ldr	r1, [pc, #588]	; (d4f24 <_Z15determine_inputv+0x30c>)
   d4cd8:	f000 fcff 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 4);
   d4cdc:	edd4 6a00 	vldr	s13, [r4]
   d4ce0:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   d4ce4:	e7b7      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount); 
  }
  else if(num_5 == 1){
   d4ce6:	4b90      	ldr	r3, [pc, #576]	; (d4f28 <_Z15determine_inputv+0x310>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	2b01      	cmp	r3, #1
   d4cec:	d10a      	bne.n	d4d04 <_Z15determine_inputv+0xec>
    Serial.println("5");
    value2 = ((value2 * 10) + 5);
   d4cee:	4c81      	ldr	r4, [pc, #516]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount); 
  }
  else if(num_5 == 1){
    Serial.println("5");
   d4cf0:	f000 ffca 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4cf4:	498d      	ldr	r1, [pc, #564]	; (d4f2c <_Z15determine_inputv+0x314>)
   d4cf6:	f000 fcf0 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 5);
   d4cfa:	edd4 6a00 	vldr	s13, [r4]
   d4cfe:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4d02:	e7a8      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_6 == 1){
   d4d04:	4b8a      	ldr	r3, [pc, #552]	; (d4f30 <_Z15determine_inputv+0x318>)
   d4d06:	681b      	ldr	r3, [r3, #0]
   d4d08:	2b01      	cmp	r3, #1
   d4d0a:	d10a      	bne.n	d4d22 <_Z15determine_inputv+0x10a>
    Serial.println("6");
    value2 = ((value2 * 10) + 6);
   d4d0c:	4c79      	ldr	r4, [pc, #484]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_6 == 1){
    Serial.println("6");
   d4d0e:	f000 ffbb 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4d12:	4988      	ldr	r1, [pc, #544]	; (d4f34 <_Z15determine_inputv+0x31c>)
   d4d14:	f000 fce1 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 6);
   d4d18:	edd4 6a00 	vldr	s13, [r4]
   d4d1c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   d4d20:	e799      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_7 == 1){
   d4d22:	4b85      	ldr	r3, [pc, #532]	; (d4f38 <_Z15determine_inputv+0x320>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	2b01      	cmp	r3, #1
   d4d28:	d10a      	bne.n	d4d40 <_Z15determine_inputv+0x128>
    Serial.println("7");
    value2 = ((value2 * 10) + 7);
   d4d2a:	4c72      	ldr	r4, [pc, #456]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_7 == 1){
    Serial.println("7");
   d4d2c:	f000 ffac 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4d30:	4982      	ldr	r1, [pc, #520]	; (d4f3c <_Z15determine_inputv+0x324>)
   d4d32:	f000 fcd2 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 7);
   d4d36:	edd4 6a00 	vldr	s13, [r4]
   d4d3a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   d4d3e:	e78a      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_8 == 1){
   d4d40:	4b7f      	ldr	r3, [pc, #508]	; (d4f40 <_Z15determine_inputv+0x328>)
   d4d42:	681b      	ldr	r3, [r3, #0]
   d4d44:	2b01      	cmp	r3, #1
   d4d46:	d10a      	bne.n	d4d5e <_Z15determine_inputv+0x146>
    Serial.println("8");
    value2 = ((value2 * 10) + 8);
   d4d48:	4c6a      	ldr	r4, [pc, #424]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_8 == 1){
    Serial.println("8");
   d4d4a:	f000 ff9d 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4d4e:	497d      	ldr	r1, [pc, #500]	; (d4f44 <_Z15determine_inputv+0x32c>)
   d4d50:	f000 fcc3 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 8);
   d4d54:	edd4 6a00 	vldr	s13, [r4]
   d4d58:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   d4d5c:	e77b      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_9 == 1){
   d4d5e:	4b7a      	ldr	r3, [pc, #488]	; (d4f48 <_Z15determine_inputv+0x330>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	2b01      	cmp	r3, #1
   d4d64:	d10a      	bne.n	d4d7c <_Z15determine_inputv+0x164>
    Serial.println("9");
    value2 = ((value2 * 10) + 9);
   d4d66:	4c63      	ldr	r4, [pc, #396]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(num_9 == 1){
    Serial.println("9");
   d4d68:	f000 ff8e 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4d6c:	4977      	ldr	r1, [pc, #476]	; (d4f4c <_Z15determine_inputv+0x334>)
   d4d6e:	f000 fcb4 	bl	d56da <_ZN5Print7printlnEPKc>
    value2 = ((value2 * 10) + 9);
   d4d72:	edd4 6a00 	vldr	s13, [r4]
   d4d76:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4d7a:	e76c      	b.n	d4c56 <_Z15determine_inputv+0x3e>
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(addButton == 1){
   d4d7c:	4b74      	ldr	r3, [pc, #464]	; (d4f50 <_Z15determine_inputv+0x338>)
   d4d7e:	681b      	ldr	r3, [r3, #0]
   d4d80:	2b01      	cmp	r3, #1
   d4d82:	d11e      	bne.n	d4dc2 <_Z15determine_inputv+0x1aa>
    Serial.println("Add Selected");
    value1 = value2;
   d4d84:	4c5b      	ldr	r4, [pc, #364]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
   d4d86:	4d73      	ldr	r5, [pc, #460]	; (d4f54 <_Z15determine_inputv+0x33c>)
    Serial.println((float) value2);
    Blynk.virtualWrite(blynk_display, value2); 
    delay(delay_amount);
  }
  else if(addButton == 1){
    Serial.println("Add Selected");
   d4d88:	f000 ff7e 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4d8c:	4972      	ldr	r1, [pc, #456]	; (d4f58 <_Z15determine_inputv+0x340>)
   d4d8e:	f000 fca4 	bl	d56da <_ZN5Print7printlnEPKc>
    value1 = value2;
   d4d92:	6823      	ldr	r3, [r4, #0]
   d4d94:	602b      	str	r3, [r5, #0]
    Serial.println((float) value1);
   d4d96:	f000 ff77 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4d9a:	4606      	mov	r6, r0
   d4d9c:	6828      	ldr	r0, [r5, #0]
   d4d9e:	f002 f84b 	bl	d6e38 <__aeabi_f2d>
   d4da2:	ec41 0b10 	vmov	d0, r0, r1
   d4da6:	2102      	movs	r1, #2
   d4da8:	4630      	mov	r0, r6
   d4daa:	f000 fda3 	bl	d58f4 <_ZN5Print7printlnEdi>
    value2 = 0;
   d4dae:	ed9f 0a53 	vldr	s0, [pc, #332]	; d4efc <_Z15determine_inputv+0x2e4>
    Blynk.virtualWrite(blynk_display, value2);
   d4db2:	4855      	ldr	r0, [pc, #340]	; (d4f08 <_Z15determine_inputv+0x2f0>)
  }
  else if(addButton == 1){
    Serial.println("Add Selected");
    value1 = value2;
    Serial.println((float) value1);
    value2 = 0;
   d4db4:	ed84 0a00 	vstr	s0, [r4]
    Blynk.virtualWrite(blynk_display, value2);
   d4db8:	2113      	movs	r1, #19
   d4dba:	f7ff feef 	bl	d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    selectedOperator = add;
   d4dbe:	2200      	movs	r2, #0
   d4dc0:	e045      	b.n	d4e4e <_Z15determine_inputv+0x236>
    delay(delay_amount);
  }
  else if(subtractButton == 1){
   d4dc2:	4b66      	ldr	r3, [pc, #408]	; (d4f5c <_Z15determine_inputv+0x344>)
   d4dc4:	681c      	ldr	r4, [r3, #0]
   d4dc6:	2c01      	cmp	r4, #1
   d4dc8:	d11f      	bne.n	d4e0a <_Z15determine_inputv+0x1f2>
    Serial.println("Subtract Selected");
    value1 = value2;
   d4dca:	4d4a      	ldr	r5, [pc, #296]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
   d4dcc:	4e61      	ldr	r6, [pc, #388]	; (d4f54 <_Z15determine_inputv+0x33c>)
    Blynk.virtualWrite(blynk_display, value2);
    selectedOperator = add;
    delay(delay_amount);
  }
  else if(subtractButton == 1){
    Serial.println("Subtract Selected");
   d4dce:	f000 ff5b 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4dd2:	4963      	ldr	r1, [pc, #396]	; (d4f60 <_Z15determine_inputv+0x348>)
   d4dd4:	f000 fc81 	bl	d56da <_ZN5Print7printlnEPKc>
    value1 = value2;
   d4dd8:	682b      	ldr	r3, [r5, #0]
   d4dda:	6033      	str	r3, [r6, #0]
    Serial.println((float) value1);
   d4ddc:	f000 ff54 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4de0:	4607      	mov	r7, r0
   d4de2:	6830      	ldr	r0, [r6, #0]
   d4de4:	f002 f828 	bl	d6e38 <__aeabi_f2d>
   d4de8:	ec41 0b10 	vmov	d0, r0, r1
   d4dec:	2102      	movs	r1, #2
   d4dee:	4638      	mov	r0, r7
   d4df0:	f000 fd80 	bl	d58f4 <_ZN5Print7printlnEdi>
    value2 = 0;
   d4df4:	ed9f 0a41 	vldr	s0, [pc, #260]	; d4efc <_Z15determine_inputv+0x2e4>
    Blynk.virtualWrite(blynk_display, value2);
   d4df8:	4843      	ldr	r0, [pc, #268]	; (d4f08 <_Z15determine_inputv+0x2f0>)
  }
  else if(subtractButton == 1){
    Serial.println("Subtract Selected");
    value1 = value2;
    Serial.println((float) value1);
    value2 = 0;
   d4dfa:	ed85 0a00 	vstr	s0, [r5]
    Blynk.virtualWrite(blynk_display, value2);
   d4dfe:	2113      	movs	r1, #19
   d4e00:	f7ff fecc 	bl	d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    selectedOperator = subtract;
   d4e04:	4b57      	ldr	r3, [pc, #348]	; (d4f64 <_Z15determine_inputv+0x34c>)
   d4e06:	701c      	strb	r4, [r3, #0]
   d4e08:	e73d      	b.n	d4c86 <_Z15determine_inputv+0x6e>
    delay(delay_amount);
  }
  else if(multiplyButton == 1){
   d4e0a:	4b57      	ldr	r3, [pc, #348]	; (d4f68 <_Z15determine_inputv+0x350>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	2b01      	cmp	r3, #1
   d4e10:	d120      	bne.n	d4e54 <_Z15determine_inputv+0x23c>
    Serial.println("Multiply Selected");
    value1 = value2;
   d4e12:	4c38      	ldr	r4, [pc, #224]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
   d4e14:	4d4f      	ldr	r5, [pc, #316]	; (d4f54 <_Z15determine_inputv+0x33c>)
    Blynk.virtualWrite(blynk_display, value2);
    selectedOperator = subtract;
    delay(delay_amount);
  }
  else if(multiplyButton == 1){
    Serial.println("Multiply Selected");
   d4e16:	f000 ff37 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4e1a:	4954      	ldr	r1, [pc, #336]	; (d4f6c <_Z15determine_inputv+0x354>)
   d4e1c:	f000 fc5d 	bl	d56da <_ZN5Print7printlnEPKc>
    value1 = value2;
   d4e20:	6823      	ldr	r3, [r4, #0]
   d4e22:	602b      	str	r3, [r5, #0]
    Serial.println((float) value1);
   d4e24:	f000 ff30 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4e28:	4606      	mov	r6, r0
   d4e2a:	6828      	ldr	r0, [r5, #0]
   d4e2c:	f002 f804 	bl	d6e38 <__aeabi_f2d>
   d4e30:	ec41 0b10 	vmov	d0, r0, r1
   d4e34:	2102      	movs	r1, #2
   d4e36:	4630      	mov	r0, r6
   d4e38:	f000 fd5c 	bl	d58f4 <_ZN5Print7printlnEdi>
    value2 = 0;
   d4e3c:	ed9f 0a2f 	vldr	s0, [pc, #188]	; d4efc <_Z15determine_inputv+0x2e4>
    Blynk.virtualWrite(blynk_display, value2);
   d4e40:	4831      	ldr	r0, [pc, #196]	; (d4f08 <_Z15determine_inputv+0x2f0>)
  }
  else if(multiplyButton == 1){
    Serial.println("Multiply Selected");
    value1 = value2;
    Serial.println((float) value1);
    value2 = 0;
   d4e42:	ed84 0a00 	vstr	s0, [r4]
    Blynk.virtualWrite(blynk_display, value2);
   d4e46:	2113      	movs	r1, #19
   d4e48:	f7ff fea8 	bl	d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    selectedOperator = multiply;
   d4e4c:	2202      	movs	r2, #2
   d4e4e:	4b45      	ldr	r3, [pc, #276]	; (d4f64 <_Z15determine_inputv+0x34c>)
   d4e50:	701a      	strb	r2, [r3, #0]
   d4e52:	e718      	b.n	d4c86 <_Z15determine_inputv+0x6e>
    delay(delay_amount);
  }
  else if(divideButton == 1){
   d4e54:	4b46      	ldr	r3, [pc, #280]	; (d4f70 <_Z15determine_inputv+0x358>)
   d4e56:	681b      	ldr	r3, [r3, #0]
   d4e58:	2b01      	cmp	r3, #1
   d4e5a:	d11e      	bne.n	d4e9a <_Z15determine_inputv+0x282>
    Serial.println("Divide Selected");
    value1 = value2;
   d4e5c:	4c25      	ldr	r4, [pc, #148]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
   d4e5e:	4d3d      	ldr	r5, [pc, #244]	; (d4f54 <_Z15determine_inputv+0x33c>)
    Blynk.virtualWrite(blynk_display, value2);
    selectedOperator = multiply;
    delay(delay_amount);
  }
  else if(divideButton == 1){
    Serial.println("Divide Selected");
   d4e60:	f000 ff12 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4e64:	4943      	ldr	r1, [pc, #268]	; (d4f74 <_Z15determine_inputv+0x35c>)
   d4e66:	f000 fc38 	bl	d56da <_ZN5Print7printlnEPKc>
    value1 = value2;
   d4e6a:	6823      	ldr	r3, [r4, #0]
   d4e6c:	602b      	str	r3, [r5, #0]
    Serial.println((float) value1);
   d4e6e:	f000 ff0b 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4e72:	4606      	mov	r6, r0
   d4e74:	6828      	ldr	r0, [r5, #0]
   d4e76:	f001 ffdf 	bl	d6e38 <__aeabi_f2d>
   d4e7a:	ec41 0b10 	vmov	d0, r0, r1
   d4e7e:	2102      	movs	r1, #2
   d4e80:	4630      	mov	r0, r6
   d4e82:	f000 fd37 	bl	d58f4 <_ZN5Print7printlnEdi>
    value2 = 0;
   d4e86:	ed9f 0a1d 	vldr	s0, [pc, #116]	; d4efc <_Z15determine_inputv+0x2e4>
    Blynk.virtualWrite(blynk_display, value2);
   d4e8a:	481f      	ldr	r0, [pc, #124]	; (d4f08 <_Z15determine_inputv+0x2f0>)
  }
  else if(divideButton == 1){
    Serial.println("Divide Selected");
    value1 = value2;
    Serial.println((float) value1);
    value2 = 0;
   d4e8c:	ed84 0a00 	vstr	s0, [r4]
    Blynk.virtualWrite(blynk_display, value2);
   d4e90:	2113      	movs	r1, #19
   d4e92:	f7ff fe83 	bl	d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
    selectedOperator = divide;
   d4e96:	2203      	movs	r2, #3
   d4e98:	e7d9      	b.n	d4e4e <_Z15determine_inputv+0x236>
    delay(delay_amount);
  }
  else if(equalsButton == 1){
   d4e9a:	4b37      	ldr	r3, [pc, #220]	; (d4f78 <_Z15determine_inputv+0x360>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	2b01      	cmp	r3, #1
   d4ea0:	f040 80c5 	bne.w	d502e <_Z15determine_inputv+0x416>
    Serial.println("Equals Selected");
    if(selectedOperator == add){
   d4ea4:	4d2f      	ldr	r5, [pc, #188]	; (d4f64 <_Z15determine_inputv+0x34c>)
   d4ea6:	4c13      	ldr	r4, [pc, #76]	; (d4ef4 <_Z15determine_inputv+0x2dc>)
   d4ea8:	f8df 8060 	ldr.w	r8, [pc, #96]	; d4f0c <_Z15determine_inputv+0x2f4>
   d4eac:	4e29      	ldr	r6, [pc, #164]	; (d4f54 <_Z15determine_inputv+0x33c>)
    Blynk.virtualWrite(blynk_display, value2);
    selectedOperator = divide;
    delay(delay_amount);
  }
  else if(equalsButton == 1){
    Serial.println("Equals Selected");
   d4eae:	f000 feeb 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4eb2:	4932      	ldr	r1, [pc, #200]	; (d4f7c <_Z15determine_inputv+0x364>)
   d4eb4:	f000 fc11 	bl	d56da <_ZN5Print7printlnEPKc>
    if(selectedOperator == add){
   d4eb8:	782f      	ldrb	r7, [r5, #0]
   d4eba:	b95f      	cbnz	r7, d4ed4 <_Z15determine_inputv+0x2bc>
      Serial.println("Addition in Progress");
   d4ebc:	f000 fee4 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4ec0:	492f      	ldr	r1, [pc, #188]	; (d4f80 <_Z15determine_inputv+0x368>)
   d4ec2:	f000 fc0a 	bl	d56da <_ZN5Print7printlnEPKc>
      value2 = value1 + value2;
   d4ec6:	edd6 7a00 	vldr	s15, [r6]
   d4eca:	ed94 0a00 	vldr	s0, [r4]
   d4ece:	ee37 0a80 	vadd.f32	s0, s15, s0
   d4ed2:	e08c      	b.n	d4fee <_Z15determine_inputv+0x3d6>
      Blynk.virtualWrite(blynk_display, value2);
      selectedOperator = none;
      delay(delay_amount);
    }
    else if(selectedOperator == subtract){
   d4ed4:	2f01      	cmp	r7, #1
   d4ed6:	d157      	bne.n	d4f88 <_Z15determine_inputv+0x370>
      Serial.println("Subtraction in Progress");
   d4ed8:	f000 fed6 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4edc:	4929      	ldr	r1, [pc, #164]	; (d4f84 <_Z15determine_inputv+0x36c>)
   d4ede:	f000 fbfc 	bl	d56da <_ZN5Print7printlnEPKc>
      value2 = value1 - value2;
   d4ee2:	edd6 7a00 	vldr	s15, [r6]
   d4ee6:	ed94 0a00 	vldr	s0, [r4]
   d4eea:	ee37 0ac0 	vsub.f32	s0, s15, s0
   d4eee:	e07e      	b.n	d4fee <_Z15determine_inputv+0x3d6>
   d4ef0:	2003e394 	.word	0x2003e394
   d4ef4:	2003e324 	.word	0x2003e324
   d4ef8:	000d7789 	.word	0x000d7789
   d4efc:	00000000 	.word	0x00000000
   d4f00:	2003e398 	.word	0x2003e398
   d4f04:	000d7d09 	.word	0x000d7d09
   d4f08:	2003e338 	.word	0x2003e338
   d4f0c:	2003e2a8 	.word	0x2003e2a8
   d4f10:	2003e39c 	.word	0x2003e39c
   d4f14:	000d778b 	.word	0x000d778b
   d4f18:	2003e3a0 	.word	0x2003e3a0
   d4f1c:	000d777e 	.word	0x000d777e
   d4f20:	2003e3a4 	.word	0x2003e3a4
   d4f24:	000d778d 	.word	0x000d778d
   d4f28:	2003e3a8 	.word	0x2003e3a8
   d4f2c:	000d778f 	.word	0x000d778f
   d4f30:	2003e3ac 	.word	0x2003e3ac
   d4f34:	000d7791 	.word	0x000d7791
   d4f38:	2003e3b0 	.word	0x2003e3b0
   d4f3c:	000d7793 	.word	0x000d7793
   d4f40:	2003e3b4 	.word	0x2003e3b4
   d4f44:	000d7795 	.word	0x000d7795
   d4f48:	2003e3b8 	.word	0x2003e3b8
   d4f4c:	000d7797 	.word	0x000d7797
   d4f50:	2003e31c 	.word	0x2003e31c
   d4f54:	2003e320 	.word	0x2003e320
   d4f58:	000d7799 	.word	0x000d7799
   d4f5c:	2003e334 	.word	0x2003e334
   d4f60:	000d77a6 	.word	0x000d77a6
   d4f64:	2003e3c8 	.word	0x2003e3c8
   d4f68:	2003e3c4 	.word	0x2003e3c4
   d4f6c:	000d77b8 	.word	0x000d77b8
   d4f70:	2003e32c 	.word	0x2003e32c
   d4f74:	000d77ca 	.word	0x000d77ca
   d4f78:	2003e3bc 	.word	0x2003e3bc
   d4f7c:	000d77da 	.word	0x000d77da
   d4f80:	000d77ea 	.word	0x000d77ea
   d4f84:	000d77ff 	.word	0x000d77ff
      Blynk.virtualWrite(blynk_display, value2);
      selectedOperator = none;
      delay(delay_amount);
    }
    else if(selectedOperator == multiply){
   d4f88:	2f02      	cmp	r7, #2
   d4f8a:	d123      	bne.n	d4fd4 <_Z15determine_inputv+0x3bc>
      Serial.println("Multiplication in Progress");
   d4f8c:	f000 fe7c 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4f90:	4928      	ldr	r1, [pc, #160]	; (d5034 <_Z15determine_inputv+0x41c>)
   d4f92:	f000 fba2 	bl	d56da <_ZN5Print7printlnEPKc>
      Serial.println((float) value1);
   d4f96:	f000 fe77 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4f9a:	4681      	mov	r9, r0
   d4f9c:	6830      	ldr	r0, [r6, #0]
   d4f9e:	f001 ff4b 	bl	d6e38 <__aeabi_f2d>
   d4fa2:	ec41 0b10 	vmov	d0, r0, r1
   d4fa6:	4639      	mov	r1, r7
   d4fa8:	4648      	mov	r0, r9
   d4faa:	f000 fca3 	bl	d58f4 <_ZN5Print7printlnEdi>
      Serial.println((float) value2);
   d4fae:	f000 fe6b 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4fb2:	4681      	mov	r9, r0
   d4fb4:	6820      	ldr	r0, [r4, #0]
   d4fb6:	f001 ff3f 	bl	d6e38 <__aeabi_f2d>
   d4fba:	ec41 0b10 	vmov	d0, r0, r1
   d4fbe:	4639      	mov	r1, r7
   d4fc0:	4648      	mov	r0, r9
   d4fc2:	f000 fc97 	bl	d58f4 <_ZN5Print7printlnEdi>
      value2 = value1 * value2;
   d4fc6:	edd6 7a00 	vldr	s15, [r6]
   d4fca:	ed94 0a00 	vldr	s0, [r4]
   d4fce:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4fd2:	e00c      	b.n	d4fee <_Z15determine_inputv+0x3d6>
      Blynk.virtualWrite(blynk_display, value2);
      selectedOperator = none;
      delay(delay_amount);
    }
    else if(selectedOperator == divide){
   d4fd4:	2f03      	cmp	r7, #3
   d4fd6:	d113      	bne.n	d5000 <_Z15determine_inputv+0x3e8>
      Serial.println("Division in Progress");
   d4fd8:	f000 fe56 	bl	d5c88 <_Z16_fetch_usbserialv>
   d4fdc:	4916      	ldr	r1, [pc, #88]	; (d5038 <_Z15determine_inputv+0x420>)
   d4fde:	f000 fb7c 	bl	d56da <_ZN5Print7printlnEPKc>
      value2 = value1 / value2;
   d4fe2:	ed96 7a00 	vldr	s14, [r6]
   d4fe6:	edd4 7a00 	vldr	s15, [r4]
   d4fea:	ee87 0a27 	vdiv.f32	s0, s14, s15
      Blynk.virtualWrite(blynk_display, value2);
   d4fee:	2113      	movs	r1, #19
   d4ff0:	4812      	ldr	r0, [pc, #72]	; (d503c <_Z15determine_inputv+0x424>)
      selectedOperator = none;
      delay(delay_amount);
    }
    else if(selectedOperator == divide){
      Serial.println("Division in Progress");
      value2 = value1 / value2;
   d4ff2:	ed84 0a00 	vstr	s0, [r4]
      Blynk.virtualWrite(blynk_display, value2);
   d4ff6:	f7ff fdd1 	bl	d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
      selectedOperator = none;
   d4ffa:	2304      	movs	r3, #4
   d4ffc:	702b      	strb	r3, [r5, #0]
   d4ffe:	e010      	b.n	d5022 <_Z15determine_inputv+0x40a>
      delay(delay_amount);
    }
    else{
      Serial.println("Equals resulted in full clear");
   d5000:	f000 fe42 	bl	d5c88 <_Z16_fetch_usbserialv>
   d5004:	490e      	ldr	r1, [pc, #56]	; (d5040 <_Z15determine_inputv+0x428>)
   d5006:	f000 fb68 	bl	d56da <_ZN5Print7printlnEPKc>
      value1 = 0;
   d500a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; d5044 <_Z15determine_inputv+0x42c>
      value2 = 0;
      selectedOperator = none;
      Blynk.virtualWrite(blynk_display, value2);
   d500e:	480b      	ldr	r0, [pc, #44]	; (d503c <_Z15determine_inputv+0x424>)
      selectedOperator = none;
      delay(delay_amount);
    }
    else{
      Serial.println("Equals resulted in full clear");
      value1 = 0;
   d5010:	ed86 0a00 	vstr	s0, [r6]
      value2 = 0;
      selectedOperator = none;
   d5014:	2304      	movs	r3, #4
      Blynk.virtualWrite(blynk_display, value2);
   d5016:	2113      	movs	r1, #19
      delay(delay_amount);
    }
    else{
      Serial.println("Equals resulted in full clear");
      value1 = 0;
      value2 = 0;
   d5018:	ed84 0a00 	vstr	s0, [r4]
      selectedOperator = none;
   d501c:	702b      	strb	r3, [r5, #0]
      Blynk.virtualWrite(blynk_display, value2);
   d501e:	f7ff fdbd 	bl	d4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
      delay(delay_amount);
   d5022:	f8b8 0000 	ldrh.w	r0, [r8]
    }
  }
}
   d5026:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      Serial.println("Equals resulted in full clear");
      value1 = 0;
      value2 = 0;
      selectedOperator = none;
      Blynk.virtualWrite(blynk_display, value2);
      delay(delay_amount);
   d502a:	f000 bcab 	b.w	d5984 <delay>
   d502e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5032:	bf00      	nop
   d5034:	000d7817 	.word	0x000d7817
   d5038:	000d7832 	.word	0x000d7832
   d503c:	2003e338 	.word	0x2003e338
   d5040:	000d7847 	.word	0x000d7847
   d5044:	00000000 	.word	0x00000000

000d5048 <loop>:
  }
}

void take_input(int value){}

void loop() {
   d5048:	b508      	push	{r3, lr}
  Blynk.run();
   d504a:	2100      	movs	r1, #0
   d504c:	4803      	ldr	r0, [pc, #12]	; (d505c <loop+0x14>)
   d504e:	f7ff fbb7 	bl	d47c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  determine_input();
   d5052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void take_input(int value){}

void loop() {
  Blynk.run();
  determine_input();
   d5056:	f7ff bddf 	b.w	d4c18 <_Z15determine_inputv>
   d505a:	bf00      	nop
   d505c:	2003e338 	.word	0x2003e338

000d5060 <_GLOBAL__sub_I_Blynk>:
   d5060:	b538      	push	{r3, r4, r5, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d5062:	4d0f      	ldr	r5, [pc, #60]	; (d50a0 <_GLOBAL__sub_I_Blynk+0x40>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5064:	f000 f856 	bl	d5114 <HAL_Pin_Map>
   d5068:	4628      	mov	r0, r5
   d506a:	f001 fa51 	bl	d6510 <_ZN9TCPClientC1Ev>
   d506e:	f105 001c 	add.w	r0, r5, #28
   d5072:	2400      	movs	r4, #0
   d5074:	f000 fd4a 	bl	d5b0c <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d5078:	4a0a      	ldr	r2, [pc, #40]	; (d50a4 <_GLOBAL__sub_I_Blynk+0x44>)
   d507a:	490b      	ldr	r1, [pc, #44]	; (d50a8 <_GLOBAL__sub_I_Blynk+0x48>)
   d507c:	636c      	str	r4, [r5, #52]	; 0x34
   d507e:	4628      	mov	r0, r5
   d5080:	872c      	strh	r4, [r5, #56]	; 0x38
   d5082:	f001 fc25 	bl	d68d0 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d5086:	4b09      	ldr	r3, [pc, #36]	; (d50ac <_GLOBAL__sub_I_Blynk+0x4c>)
   d5088:	601d      	str	r5, [r3, #0]
   d508a:	605c      	str	r4, [r3, #4]
   d508c:	609c      	str	r4, [r3, #8]
   d508e:	60dc      	str	r4, [r3, #12]
   d5090:	611c      	str	r4, [r3, #16]
   d5092:	615c      	str	r4, [r3, #20]
   d5094:	831c      	strh	r4, [r3, #24]
   d5096:	835c      	strh	r4, [r3, #26]
   d5098:	771c      	strb	r4, [r3, #28]
   d509a:	775c      	strb	r4, [r3, #29]
   d509c:	bd38      	pop	{r3, r4, r5, pc}
   d509e:	bf00      	nop
   d50a0:	2003e358 	.word	0x2003e358
   d50a4:	2003e318 	.word	0x2003e318
   d50a8:	000d4101 	.word	0x000d4101
   d50ac:	2003e338 	.word	0x2003e338

000d50b0 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d50b0:	f000 b830 	b.w	d5114 <HAL_Pin_Map>

000d50b4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d50b4:	f000 bc66 	b.w	d5984 <delay>

000d50b8 <_Z11BlynkMillisv>:
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d50b8:	f000 b894 	b.w	d51e4 <HAL_Timer_Get_Milli_Seconds>

000d50bc <_GLOBAL__sub_I__Z10BlynkResetv>:
   d50bc:	f000 b82a 	b.w	d5114 <HAL_Pin_Map>

000d50c0 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d50c0:	4770      	bx	lr

000d50c2 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d50c2:	4770      	bx	lr

000d50c4 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d50c4:	4770      	bx	lr
	...

000d50c8 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d50c8:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d50ca:	bf9a      	itte	ls
   d50cc:	4b02      	ldrls	r3, [pc, #8]	; (d50d8 <GetReadHandler+0x10>)
   d50ce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d50d2:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d50d4:	4770      	bx	lr
   d50d6:	bf00      	nop
   d50d8:	000d7a68 	.word	0x000d7a68

000d50dc <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d50dc:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d50de:	bf9a      	itte	ls
   d50e0:	4b02      	ldrls	r3, [pc, #8]	; (d50ec <GetWriteHandler+0x10>)
   d50e2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d50e6:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d50e8:	4770      	bx	lr
   d50ea:	bf00      	nop
   d50ec:	000d7868 	.word	0x000d7868

000d50f0 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d50f0:	f000 b810 	b.w	d5114 <HAL_Pin_Map>

000d50f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <netdb_freeaddrinfo+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	689b      	ldr	r3, [r3, #8]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030268 	.word	0x00030268

000d5104 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <netdb_getaddrinfo+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	68db      	ldr	r3, [r3, #12]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030268 	.word	0x00030268

000d5114 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <HAL_Pin_Map+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	681b      	ldr	r3, [r3, #0]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	0003022c 	.word	0x0003022c

000d5124 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b02      	ldr	r3, [pc, #8]	; (d5130 <HAL_Validate_Pin_Function+0xc>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	685b      	ldr	r3, [r3, #4]
   d512c:	9301      	str	r3, [sp, #4]
   d512e:	bd08      	pop	{r3, pc}
   d5130:	0003022c 	.word	0x0003022c

000d5134 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5134:	b508      	push	{r3, lr}
   d5136:	4b02      	ldr	r3, [pc, #8]	; (d5140 <HAL_Pin_Mode+0xc>)
   d5138:	681b      	ldr	r3, [r3, #0]
   d513a:	689b      	ldr	r3, [r3, #8]
   d513c:	9301      	str	r3, [sp, #4]
   d513e:	bd08      	pop	{r3, pc}
   d5140:	0003022c 	.word	0x0003022c

000d5144 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5144:	b508      	push	{r3, lr}
   d5146:	4b02      	ldr	r3, [pc, #8]	; (d5150 <HAL_Get_Pin_Mode+0xc>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	68db      	ldr	r3, [r3, #12]
   d514c:	9301      	str	r3, [sp, #4]
   d514e:	bd08      	pop	{r3, pc}
   d5150:	0003022c 	.word	0x0003022c

000d5154 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5154:	b508      	push	{r3, lr}
   d5156:	4b02      	ldr	r3, [pc, #8]	; (d5160 <HAL_GPIO_Write+0xc>)
   d5158:	681b      	ldr	r3, [r3, #0]
   d515a:	691b      	ldr	r3, [r3, #16]
   d515c:	9301      	str	r3, [sp, #4]
   d515e:	bd08      	pop	{r3, pc}
   d5160:	0003022c 	.word	0x0003022c

000d5164 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5164:	b508      	push	{r3, lr}
   d5166:	4b02      	ldr	r3, [pc, #8]	; (d5170 <HAL_GPIO_Read+0xc>)
   d5168:	681b      	ldr	r3, [r3, #0]
   d516a:	695b      	ldr	r3, [r3, #20]
   d516c:	9301      	str	r3, [sp, #4]
   d516e:	bd08      	pop	{r3, pc}
   d5170:	0003022c 	.word	0x0003022c

000d5174 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5174:	b508      	push	{r3, lr}
   d5176:	4b02      	ldr	r3, [pc, #8]	; (d5180 <HAL_DAC_Write+0xc>)
   d5178:	681b      	ldr	r3, [r3, #0]
   d517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d517c:	9301      	str	r3, [sp, #4]
   d517e:	bd08      	pop	{r3, pc}
   d5180:	0003022c 	.word	0x0003022c

000d5184 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5184:	b508      	push	{r3, lr}
   d5186:	4b02      	ldr	r3, [pc, #8]	; (d5190 <HAL_ADC_Read+0xc>)
   d5188:	681b      	ldr	r3, [r3, #0]
   d518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d518c:	9301      	str	r3, [sp, #4]
   d518e:	bd08      	pop	{r3, pc}
   d5190:	0003022c 	.word	0x0003022c

000d5194 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d5194:	b508      	push	{r3, lr}
   d5196:	4b02      	ldr	r3, [pc, #8]	; (d51a0 <HAL_PWM_Write_Ext+0xc>)
   d5198:	681b      	ldr	r3, [r3, #0]
   d519a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d519c:	9301      	str	r3, [sp, #4]
   d519e:	bd08      	pop	{r3, pc}
   d51a0:	0003022c 	.word	0x0003022c

000d51a4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d51a4:	b508      	push	{r3, lr}
   d51a6:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <HAL_SPI_Init+0xc>)
   d51a8:	681b      	ldr	r3, [r3, #0]
   d51aa:	69db      	ldr	r3, [r3, #28]
   d51ac:	9301      	str	r3, [sp, #4]
   d51ae:	bd08      	pop	{r3, pc}
   d51b0:	00030230 	.word	0x00030230

000d51b4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d51b4:	b508      	push	{r3, lr}
   d51b6:	4b02      	ldr	r3, [pc, #8]	; (d51c0 <HAL_SPI_Is_Enabled+0xc>)
   d51b8:	681b      	ldr	r3, [r3, #0]
   d51ba:	6a1b      	ldr	r3, [r3, #32]
   d51bc:	9301      	str	r3, [sp, #4]
   d51be:	bd08      	pop	{r3, pc}
   d51c0:	00030230 	.word	0x00030230

000d51c4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d51c4:	b508      	push	{r3, lr}
   d51c6:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <if_index_to_name+0xc>)
   d51c8:	681b      	ldr	r3, [r3, #0]
   d51ca:	695b      	ldr	r3, [r3, #20]
   d51cc:	9301      	str	r3, [sp, #4]
   d51ce:	bd08      	pop	{r3, pc}
   d51d0:	0003026c 	.word	0x0003026c

000d51d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d51d4:	b508      	push	{r3, lr}
   d51d6:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <HAL_RNG_GetRandomNumber+0xc>)
   d51d8:	681b      	ldr	r3, [r3, #0]
   d51da:	685b      	ldr	r3, [r3, #4]
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	bd08      	pop	{r3, pc}
   d51e0:	00030218 	.word	0x00030218

000d51e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d51e4:	b508      	push	{r3, lr}
   d51e6:	4b02      	ldr	r3, [pc, #8]	; (d51f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d51e8:	681b      	ldr	r3, [r3, #0]
   d51ea:	695b      	ldr	r3, [r3, #20]
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	bd08      	pop	{r3, pc}
   d51f0:	00030218 	.word	0x00030218

000d51f4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d51f4:	b508      	push	{r3, lr}
   d51f6:	4b02      	ldr	r3, [pc, #8]	; (d5200 <os_thread_is_current+0xc>)
   d51f8:	681b      	ldr	r3, [r3, #0]
   d51fa:	689b      	ldr	r3, [r3, #8]
   d51fc:	9301      	str	r3, [sp, #4]
   d51fe:	bd08      	pop	{r3, pc}
   d5200:	00030248 	.word	0x00030248

000d5204 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <os_thread_join+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	691b      	ldr	r3, [r3, #16]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030248 	.word	0x00030248

000d5214 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <os_thread_cleanup+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	695b      	ldr	r3, [r3, #20]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030248 	.word	0x00030248

000d5224 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <os_mutex_create+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	00030248 	.word	0x00030248

000d5234 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <os_mutex_recursive_create+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	00030248 	.word	0x00030248

000d5244 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <inet_inet_ntop+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	695b      	ldr	r3, [r3, #20]
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	00030264 	.word	0x00030264

000d5254 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <inet_htonl+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	6a1b      	ldr	r3, [r3, #32]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	00030264 	.word	0x00030264

000d5264 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <inet_htons+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	00030264 	.word	0x00030264

000d5274 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <HAL_USART_Init+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	681b      	ldr	r3, [r3, #0]
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	0003023c 	.word	0x0003023c

000d5284 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <HAL_USART_Write_Data+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	68db      	ldr	r3, [r3, #12]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	0003023c 	.word	0x0003023c

000d5294 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <HAL_USART_Available_Data+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	691b      	ldr	r3, [r3, #16]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	0003023c 	.word	0x0003023c

000d52a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <HAL_USART_Read_Data+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	695b      	ldr	r3, [r3, #20]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	0003023c 	.word	0x0003023c

000d52b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <HAL_USART_Peek_Data+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	699b      	ldr	r3, [r3, #24]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	0003023c 	.word	0x0003023c

000d52c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <HAL_USART_Flush_Data+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	69db      	ldr	r3, [r3, #28]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	0003023c 	.word	0x0003023c

000d52d4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <HAL_USART_Is_Enabled+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6a1b      	ldr	r3, [r3, #32]
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	0003023c 	.word	0x0003023c

000d52e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <HAL_USART_Available_Data_For_Write+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	0003023c 	.word	0x0003023c

000d52f4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <HAL_I2C_Write_Data+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	6a1b      	ldr	r3, [r3, #32]
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030228 	.word	0x00030228

000d5304 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <HAL_I2C_Available_Data+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030228 	.word	0x00030228

000d5314 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <HAL_I2C_Read_Data+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030228 	.word	0x00030228

000d5324 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <HAL_I2C_Peek_Data+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	00030228 	.word	0x00030228

000d5334 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <HAL_I2C_Flush_Data+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030228 	.word	0x00030228

000d5344 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <HAL_I2C_Is_Enabled+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030228 	.word	0x00030228

000d5354 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <HAL_I2C_Init+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030228 	.word	0x00030228

000d5364 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <sock_setsockopt+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	699b      	ldr	r3, [r3, #24]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030238 	.word	0x00030238

000d5374 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <sock_close+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	69db      	ldr	r3, [r3, #28]
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	00030238 	.word	0x00030238

000d5384 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <sock_connect+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	6a1b      	ldr	r3, [r3, #32]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030238 	.word	0x00030238

000d5394 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <sock_recv+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030238 	.word	0x00030238

000d53a4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <sock_send+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	00030238 	.word	0x00030238

000d53b4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <sock_socket+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	00030238 	.word	0x00030238

000d53c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <HAL_USB_USART_Init+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	681b      	ldr	r3, [r3, #0]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	0003024c 	.word	0x0003024c

000d53d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <HAL_USB_USART_Begin+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	685b      	ldr	r3, [r3, #4]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003024c 	.word	0x0003024c

000d53e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <HAL_USB_USART_Available_Data+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	691b      	ldr	r3, [r3, #16]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	0003024c 	.word	0x0003024c

000d53f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	695b      	ldr	r3, [r3, #20]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	0003024c 	.word	0x0003024c

000d5404 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <HAL_USB_USART_Receive_Data+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	699b      	ldr	r3, [r3, #24]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	0003024c 	.word	0x0003024c

000d5414 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <HAL_USB_USART_Send_Data+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	69db      	ldr	r3, [r3, #28]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	0003024c 	.word	0x0003024c

000d5424 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <HAL_USB_USART_Flush_Data+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	6a1b      	ldr	r3, [r3, #32]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	0003024c 	.word	0x0003024c

000d5434 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <log_message+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030260 	.word	0x00030260

000d5444 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <set_system_mode+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	685b      	ldr	r3, [r3, #4]
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030220 	.word	0x00030220

000d5454 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <system_delay_ms+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	695b      	ldr	r3, [r3, #20]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030220 	.word	0x00030220

000d5464 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b03      	ldr	r3, [pc, #12]	; (d5474 <system_ctrl_set_app_request_handler+0x10>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d546e:	9301      	str	r3, [sp, #4]
   d5470:	bd08      	pop	{r3, pc}
   d5472:	0000      	.short	0x0000
   d5474:	00030220 	.word	0x00030220

000d5478 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b03      	ldr	r3, [pc, #12]	; (d5488 <system_ctrl_set_result+0x10>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5482:	9301      	str	r3, [sp, #4]
   d5484:	bd08      	pop	{r3, pc}
   d5486:	0000      	.short	0x0000
   d5488:	00030220 	.word	0x00030220

000d548c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <network_connect+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	685b      	ldr	r3, [r3, #4]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030240 	.word	0x00030240

000d549c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <network_connecting+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	689b      	ldr	r3, [r3, #8]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	00030240 	.word	0x00030240

000d54ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <network_disconnect+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	68db      	ldr	r3, [r3, #12]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	00030240 	.word	0x00030240

000d54bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <network_ready+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	691b      	ldr	r3, [r3, #16]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	00030240 	.word	0x00030240

000d54cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <network_on+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	695b      	ldr	r3, [r3, #20]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	00030240 	.word	0x00030240

000d54dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <network_off+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	699b      	ldr	r3, [r3, #24]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	00030240 	.word	0x00030240

000d54ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <network_listen+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	69db      	ldr	r3, [r3, #28]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	00030240 	.word	0x00030240

000d54fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <network_listening+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	6a1b      	ldr	r3, [r3, #32]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	00030240 	.word	0x00030240

000d550c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <network_set_listen_timeout+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	00030240 	.word	0x00030240

000d551c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <network_get_listen_timeout+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030240 	.word	0x00030240

000d552c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <spark_process+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	689b      	ldr	r3, [r3, #8]
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030244 	.word	0x00030244

000d553c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030244 	.word	0x00030244

000d554c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <malloc+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	681b      	ldr	r3, [r3, #0]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	0003021c 	.word	0x0003021c

000d555c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <free+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	685b      	ldr	r3, [r3, #4]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	0003021c 	.word	0x0003021c

000d556c <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <snprintf+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	69db      	ldr	r3, [r3, #28]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	0003021c 	.word	0x0003021c

000d557c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <__errno+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003021c 	.word	0x0003021c

000d558c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d558c:	2200      	movs	r2, #0
   d558e:	4611      	mov	r1, r2
   d5590:	6840      	ldr	r0, [r0, #4]
   d5592:	f7ff bfb3 	b.w	d54fc <network_listening>

000d5596 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5596:	2200      	movs	r2, #0
   d5598:	4611      	mov	r1, r2
   d559a:	6840      	ldr	r0, [r0, #4]
   d559c:	f7ff bfbe 	b.w	d551c <network_get_listen_timeout>

000d55a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55a0:	2200      	movs	r2, #0
   d55a2:	6840      	ldr	r0, [r0, #4]
   d55a4:	f7ff bfb2 	b.w	d550c <network_set_listen_timeout>

000d55a8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55a8:	2200      	movs	r2, #0
   d55aa:	f081 0101 	eor.w	r1, r1, #1
   d55ae:	6840      	ldr	r0, [r0, #4]
   d55b0:	f7ff bf9c 	b.w	d54ec <network_listen>

000d55b4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55b4:	2300      	movs	r3, #0
   d55b6:	461a      	mov	r2, r3
   d55b8:	4619      	mov	r1, r3
   d55ba:	6840      	ldr	r0, [r0, #4]
   d55bc:	f7ff bf8e 	b.w	d54dc <network_off>

000d55c0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55c0:	2300      	movs	r3, #0
   d55c2:	461a      	mov	r2, r3
   d55c4:	4619      	mov	r1, r3
   d55c6:	6840      	ldr	r0, [r0, #4]
   d55c8:	f7ff bf80 	b.w	d54cc <network_on>

000d55cc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55cc:	2200      	movs	r2, #0
   d55ce:	4611      	mov	r1, r2
   d55d0:	6840      	ldr	r0, [r0, #4]
   d55d2:	f7ff bf73 	b.w	d54bc <network_ready>

000d55d6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55d6:	2200      	movs	r2, #0
   d55d8:	4611      	mov	r1, r2
   d55da:	6840      	ldr	r0, [r0, #4]
   d55dc:	f7ff bf5e 	b.w	d549c <network_connecting>

000d55e0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55e0:	2200      	movs	r2, #0
   d55e2:	2102      	movs	r1, #2
   d55e4:	6840      	ldr	r0, [r0, #4]
   d55e6:	f7ff bf61 	b.w	d54ac <network_disconnect>

000d55ea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55ea:	2300      	movs	r3, #0
   d55ec:	461a      	mov	r2, r3
   d55ee:	6840      	ldr	r0, [r0, #4]
   d55f0:	f7ff bf4c 	b.w	d548c <network_connect>

000d55f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d55f4:	4b02      	ldr	r3, [pc, #8]	; (d5600 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d55f6:	2203      	movs	r2, #3
   d55f8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d55fa:	4a02      	ldr	r2, [pc, #8]	; (d5604 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d55fc:	601a      	str	r2, [r3, #0]
   d55fe:	4770      	bx	lr
   d5600:	2003e3cc 	.word	0x2003e3cc
   d5604:	000d7c70 	.word	0x000d7c70

000d5608 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5608:	4770      	bx	lr

000d560a <_ZN8SPIClassD0Ev>:
   d560a:	b510      	push	{r4, lr}
   d560c:	2110      	movs	r1, #16
   d560e:	4604      	mov	r4, r0
   d5610:	f001 f963 	bl	d68da <_ZdlPvj>
   d5614:	4620      	mov	r0, r4
   d5616:	bd10      	pop	{r4, pc}

000d5618 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5618:	b570      	push	{r4, r5, r6, lr}
   d561a:	4b08      	ldr	r3, [pc, #32]	; (d563c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d561c:	6003      	str	r3, [r0, #0]
   d561e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5620:	2500      	movs	r5, #0
   d5622:	460e      	mov	r6, r1
   d5624:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5628:	f7ff fdfc 	bl	d5224 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d562c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d562e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5630:	f7ff fdb8 	bl	d51a4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5634:	60a5      	str	r5, [r4, #8]
}
   d5636:	4620      	mov	r0, r4
   d5638:	bd70      	pop	{r4, r5, r6, pc}
   d563a:	bf00      	nop
   d563c:	000d7ca4 	.word	0x000d7ca4

000d5640 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5640:	7900      	ldrb	r0, [r0, #4]
   d5642:	f7ff bdb7 	b.w	d51b4 <HAL_SPI_Is_Enabled>
	...

000d5648 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5648:	4b04      	ldr	r3, [pc, #16]	; (d565c <_GLOBAL__sub_I_System+0x14>)
   d564a:	2000      	movs	r0, #0
   d564c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5650:	7018      	strb	r0, [r3, #0]
   d5652:	8058      	strh	r0, [r3, #2]
   d5654:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5656:	f7ff bef5 	b.w	d5444 <set_system_mode>
   d565a:	bf00      	nop
   d565c:	2003e3d4 	.word	0x2003e3d4

000d5660 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5660:	4802      	ldr	r0, [pc, #8]	; (d566c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5662:	2300      	movs	r3, #0
   d5664:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5666:	f7ff bde5 	b.w	d5234 <os_mutex_recursive_create>
   d566a:	bf00      	nop
   d566c:	2003e3dc 	.word	0x2003e3dc

000d5670 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5672:	4606      	mov	r6, r0
   d5674:	460d      	mov	r5, r1
   d5676:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5678:	2400      	movs	r4, #0
  while (size--) {
   d567a:	42bd      	cmp	r5, r7
   d567c:	d00c      	beq.n	d5698 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d567e:	6833      	ldr	r3, [r6, #0]
   d5680:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5684:	689b      	ldr	r3, [r3, #8]
   d5686:	4630      	mov	r0, r6
   d5688:	4798      	blx	r3
     if (chunk>=0)
   d568a:	2800      	cmp	r0, #0
   d568c:	db01      	blt.n	d5692 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d568e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5690:	e7f3      	b.n	d567a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5692:	2c00      	cmp	r4, #0
   d5694:	bf08      	it	eq
   d5696:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5698:	4620      	mov	r0, r4
   d569a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d569c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d569c:	b570      	push	{r4, r5, r6, lr}
   d569e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d56a0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d56a2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d56a4:	b149      	cbz	r1, d56ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d56a6:	f001 ff6f 	bl	d7588 <strlen>
   d56aa:	682b      	ldr	r3, [r5, #0]
   d56ac:	4602      	mov	r2, r0
   d56ae:	4621      	mov	r1, r4
   d56b0:	4628      	mov	r0, r5
   d56b2:	68db      	ldr	r3, [r3, #12]
    }
   d56b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d56b8:	4718      	bx	r3
    }
   d56ba:	bd70      	pop	{r4, r5, r6, pc}

000d56bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d56bc:	6803      	ldr	r3, [r0, #0]
   d56be:	689b      	ldr	r3, [r3, #8]
   d56c0:	4718      	bx	r3

000d56c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d56c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d56c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d56c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d56c8:	f7ff fff8 	bl	d56bc <_ZN5Print5printEc>
  n += print('\n');
   d56cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d56ce:	4604      	mov	r4, r0
  n += print('\n');
   d56d0:	4628      	mov	r0, r5
   d56d2:	f7ff fff3 	bl	d56bc <_ZN5Print5printEc>
  return n;
}
   d56d6:	4420      	add	r0, r4
   d56d8:	bd38      	pop	{r3, r4, r5, pc}

000d56da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d56da:	b538      	push	{r3, r4, r5, lr}
   d56dc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d56de:	f7ff ffdd 	bl	d569c <_ZN5Print5writeEPKc>
   d56e2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d56e4:	4628      	mov	r0, r5
   d56e6:	f7ff ffec 	bl	d56c2 <_ZN5Print7printlnEv>
  return n;
}
   d56ea:	4420      	add	r0, r4
   d56ec:	bd38      	pop	{r3, r4, r5, pc}

000d56ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d56ee:	b530      	push	{r4, r5, lr}
   d56f0:	b08b      	sub	sp, #44	; 0x2c
   d56f2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d56f4:	2100      	movs	r1, #0
   d56f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d56fa:	2a01      	cmp	r2, #1
   d56fc:	bf98      	it	ls
   d56fe:	220a      	movls	r2, #10
   d5700:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5704:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5708:	fb05 3312 	mls	r3, r5, r2, r3
   d570c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5710:	2b09      	cmp	r3, #9
   d5712:	bf94      	ite	ls
   d5714:	3330      	addls	r3, #48	; 0x30
   d5716:	3337      	addhi	r3, #55	; 0x37
   d5718:	b2db      	uxtb	r3, r3
   d571a:	4621      	mov	r1, r4
   d571c:	f804 3901 	strb.w	r3, [r4], #-1
   d5720:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5722:	2d00      	cmp	r5, #0
   d5724:	d1ee      	bne.n	d5704 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5726:	f7ff ffb9 	bl	d569c <_ZN5Print5writeEPKc>
}
   d572a:	b00b      	add	sp, #44	; 0x2c
   d572c:	bd30      	pop	{r4, r5, pc}

000d572e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d572e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5730:	b92a      	cbnz	r2, d573e <_ZN5Print5printEmi+0x10>
   d5732:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5734:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5738:	689b      	ldr	r3, [r3, #8]
   d573a:	b2c9      	uxtb	r1, r1
   d573c:	4718      	bx	r3
  else return printNumber(n, base);
   d573e:	b2d2      	uxtb	r2, r2
}
   d5740:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5744:	f7ff bfd3 	b.w	d56ee <_ZN5Print11printNumberEmh>

000d5748 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5748:	f7ff bff1 	b.w	d572e <_ZN5Print5printEmi>

000d574c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5750:	4607      	mov	r7, r0
   d5752:	460e      	mov	r6, r1
  if (base == 0) {
   d5754:	4615      	mov	r5, r2
   d5756:	b92a      	cbnz	r2, d5764 <_ZN5Print5printEli+0x18>
    return write(n);
   d5758:	6803      	ldr	r3, [r0, #0]
   d575a:	b2c9      	uxtb	r1, r1
   d575c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d575e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5762:	4718      	bx	r3
  } else if (base == 10) {
   d5764:	2a0a      	cmp	r2, #10
   d5766:	d102      	bne.n	d576e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5768:	2900      	cmp	r1, #0
   d576a:	da01      	bge.n	d5770 <_ZN5Print5printEli+0x24>
   d576c:	e004      	b.n	d5778 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d576e:	b2d2      	uxtb	r2, r2
  }
}
   d5770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5774:	f7ff bfbb 	b.w	d56ee <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5778:	212d      	movs	r1, #45	; 0x2d
   d577a:	f7ff ff9f 	bl	d56bc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d577e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5780:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5782:	4271      	negs	r1, r6
   d5784:	4638      	mov	r0, r7
   d5786:	f7ff ffb2 	bl	d56ee <_ZN5Print11printNumberEmh>
   d578a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5790 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5794:	ec57 6b10 	vmov	r6, r7, d0
   d5798:	4682      	mov	sl, r0
   d579a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d579c:	ee10 2a10 	vmov	r2, s0
   d57a0:	463b      	mov	r3, r7
   d57a2:	ee10 0a10 	vmov	r0, s0
   d57a6:	4639      	mov	r1, r7
   d57a8:	f001 fe34 	bl	d7414 <__aeabi_dcmpun>
   d57ac:	b108      	cbz	r0, d57b2 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d57ae:	4948      	ldr	r1, [pc, #288]	; (d58d0 <_ZN5Print10printFloatEdh+0x140>)
   d57b0:	e012      	b.n	d57d8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d57b2:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d57b6:	f04f 32ff 	mov.w	r2, #4294967295
   d57ba:	4b46      	ldr	r3, [pc, #280]	; (d58d4 <_ZN5Print10printFloatEdh+0x144>)
   d57bc:	4630      	mov	r0, r6
   d57be:	4649      	mov	r1, r9
   d57c0:	f001 fe28 	bl	d7414 <__aeabi_dcmpun>
   d57c4:	b968      	cbnz	r0, d57e2 <_ZN5Print10printFloatEdh+0x52>
   d57c6:	f04f 32ff 	mov.w	r2, #4294967295
   d57ca:	4b42      	ldr	r3, [pc, #264]	; (d58d4 <_ZN5Print10printFloatEdh+0x144>)
   d57cc:	4630      	mov	r0, r6
   d57ce:	4649      	mov	r1, r9
   d57d0:	f001 fe02 	bl	d73d8 <__aeabi_dcmple>
   d57d4:	b928      	cbnz	r0, d57e2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d57d6:	4940      	ldr	r1, [pc, #256]	; (d58d8 <_ZN5Print10printFloatEdh+0x148>)
   d57d8:	4650      	mov	r0, sl
   d57da:	f7ff ff5f 	bl	d569c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d57de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d57e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d57e6:	4b3d      	ldr	r3, [pc, #244]	; (d58dc <_ZN5Print10printFloatEdh+0x14c>)
   d57e8:	4630      	mov	r0, r6
   d57ea:	4639      	mov	r1, r7
   d57ec:	f001 fe08 	bl	d7400 <__aeabi_dcmpgt>
   d57f0:	b108      	cbz	r0, d57f6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d57f2:	493b      	ldr	r1, [pc, #236]	; (d58e0 <_ZN5Print10printFloatEdh+0x150>)
   d57f4:	e7f0      	b.n	d57d8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d57f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d57fa:	4b3a      	ldr	r3, [pc, #232]	; (d58e4 <_ZN5Print10printFloatEdh+0x154>)
   d57fc:	4630      	mov	r0, r6
   d57fe:	4639      	mov	r1, r7
   d5800:	f001 fde0 	bl	d73c4 <__aeabi_dcmplt>
   d5804:	2800      	cmp	r0, #0
   d5806:	d1f4      	bne.n	d57f2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5808:	2200      	movs	r2, #0
   d580a:	2300      	movs	r3, #0
   d580c:	4630      	mov	r0, r6
   d580e:	4639      	mov	r1, r7
   d5810:	f001 fdd8 	bl	d73c4 <__aeabi_dcmplt>
   d5814:	b140      	cbz	r0, d5828 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5816:	212d      	movs	r1, #45	; 0x2d
   d5818:	4650      	mov	r0, sl
   d581a:	f7ff ff4f 	bl	d56bc <_ZN5Print5printEc>
     number = -number;
   d581e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5822:	4604      	mov	r4, r0
     number = -number;
   d5824:	461f      	mov	r7, r3
   d5826:	e000      	b.n	d582a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5828:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d582a:	492f      	ldr	r1, [pc, #188]	; (d58e8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d582c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5830:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5832:	fa5f f388 	uxtb.w	r3, r8
   d5836:	429d      	cmp	r5, r3
   d5838:	d906      	bls.n	d5848 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d583a:	2200      	movs	r2, #0
   d583c:	4b2b      	ldr	r3, [pc, #172]	; (d58ec <_ZN5Print10printFloatEdh+0x15c>)
   d583e:	f001 fc79 	bl	d7134 <__aeabi_ddiv>
   d5842:	f108 0801 	add.w	r8, r8, #1
   d5846:	e7f4      	b.n	d5832 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5848:	4632      	mov	r2, r6
   d584a:	463b      	mov	r3, r7
   d584c:	f001 f996 	bl	d6b7c <__adddf3>
   d5850:	460f      	mov	r7, r1
   d5852:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5854:	f001 fe1c 	bl	d7490 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5858:	220a      	movs	r2, #10
   d585a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d585c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d585e:	4650      	mov	r0, sl
   d5860:	f7ff ff45 	bl	d56ee <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5864:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5866:	b37d      	cbz	r5, d58c8 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5868:	4640      	mov	r0, r8
   d586a:	f001 fac3 	bl	d6df4 <__aeabi_ui2d>
   d586e:	4602      	mov	r2, r0
   d5870:	460b      	mov	r3, r1
   d5872:	4630      	mov	r0, r6
   d5874:	4639      	mov	r1, r7
   d5876:	f001 f97f 	bl	d6b78 <__aeabi_dsub>
   d587a:	4606      	mov	r6, r0
   d587c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d587e:	4650      	mov	r0, sl
   d5880:	491b      	ldr	r1, [pc, #108]	; (d58f0 <_ZN5Print10printFloatEdh+0x160>)
   d5882:	f7ff ff0b 	bl	d569c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5886:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5888:	4b18      	ldr	r3, [pc, #96]	; (d58ec <_ZN5Print10printFloatEdh+0x15c>)
   d588a:	2200      	movs	r2, #0
   d588c:	4630      	mov	r0, r6
   d588e:	4639      	mov	r1, r7
   d5890:	f001 fb26 	bl	d6ee0 <__aeabi_dmul>
   d5894:	460f      	mov	r7, r1
   d5896:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5898:	f001 fdd2 	bl	d7440 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d589c:	220a      	movs	r2, #10
   d589e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d58a0:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d58a2:	4650      	mov	r0, sl
   d58a4:	f7ff ff52 	bl	d574c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d58a8:	4404      	add	r4, r0
    remainder -= toPrint;
   d58aa:	4640      	mov	r0, r8
   d58ac:	f001 fab2 	bl	d6e14 <__aeabi_i2d>
   d58b0:	4602      	mov	r2, r0
   d58b2:	460b      	mov	r3, r1
   d58b4:	4630      	mov	r0, r6
   d58b6:	4639      	mov	r1, r7
   d58b8:	f001 f95e 	bl	d6b78 <__aeabi_dsub>
   d58bc:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d58be:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d58c2:	4606      	mov	r6, r0
   d58c4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d58c6:	d1df      	bne.n	d5888 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d58c8:	4620      	mov	r0, r4
   d58ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d58ce:	bf00      	nop
   d58d0:	000d7cac 	.word	0x000d7cac
   d58d4:	7fefffff 	.word	0x7fefffff
   d58d8:	000d7cb6 	.word	0x000d7cb6
   d58dc:	41efffff 	.word	0x41efffff
   d58e0:	000d7cb0 	.word	0x000d7cb0
   d58e4:	c1efffff 	.word	0xc1efffff
   d58e8:	3fe00000 	.word	0x3fe00000
   d58ec:	40240000 	.word	0x40240000
   d58f0:	000d7cb4 	.word	0x000d7cb4

000d58f4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d58f4:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d58f6:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d58f8:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d58fa:	f7ff ff49 	bl	d5790 <_ZN5Print10printFloatEdh>
   d58fe:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5900:	4628      	mov	r0, r5
   d5902:	f7ff fede 	bl	d56c2 <_ZN5Print7printlnEv>
  return n;
}
   d5906:	4420      	add	r0, r4
   d5908:	bd38      	pop	{r3, r4, r5, pc}

000d590a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d590a:	b510      	push	{r4, lr}
   d590c:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d590e:	f7ff fc69 	bl	d51e4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d5912:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d5914:	6823      	ldr	r3, [r4, #0]
   d5916:	4620      	mov	r0, r4
   d5918:	695b      	ldr	r3, [r3, #20]
   d591a:	4798      	blx	r3
    if (c >= 0) return c;
   d591c:	2800      	cmp	r0, #0
   d591e:	da08      	bge.n	d5932 <_ZN6Stream9timedReadEv+0x28>
   d5920:	f7ff fc60 	bl	d51e4 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d5924:	68e3      	ldr	r3, [r4, #12]
   d5926:	1ac0      	subs	r0, r0, r3
   d5928:	68a3      	ldr	r3, [r4, #8]
   d592a:	4298      	cmp	r0, r3
   d592c:	d3f2      	bcc.n	d5914 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d592e:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5932:	bd10      	pop	{r4, pc}

000d5934 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d5934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5938:	4680      	mov	r8, r0
   d593a:	460d      	mov	r5, r1
   d593c:	188f      	adds	r7, r1, r2
   d593e:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d5940:	42bc      	cmp	r4, r7
   d5942:	eba4 0605 	sub.w	r6, r4, r5
   d5946:	d007      	beq.n	d5958 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d5948:	4640      	mov	r0, r8
   d594a:	f7ff ffde 	bl	d590a <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d594e:	2800      	cmp	r0, #0
   d5950:	db02      	blt.n	d5958 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d5952:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d5956:	e7f3      	b.n	d5940 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d5958:	4630      	mov	r0, r6
   d595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5960 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5960:	4b01      	ldr	r3, [pc, #4]	; (d5968 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5962:	4a02      	ldr	r2, [pc, #8]	; (d596c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5964:	601a      	str	r2, [r3, #0]
   d5966:	4770      	bx	lr
   d5968:	2003e3e0 	.word	0x2003e3e0
   d596c:	000d7d6a 	.word	0x000d7d6a

000d5970 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5970:	4b02      	ldr	r3, [pc, #8]	; (d597c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5972:	681a      	ldr	r2, [r3, #0]
   d5974:	4b02      	ldr	r3, [pc, #8]	; (d5980 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5976:	601a      	str	r2, [r3, #0]
   d5978:	4770      	bx	lr
   d597a:	bf00      	nop
   d597c:	2003e2ac 	.word	0x2003e2ac
   d5980:	2003e3e4 	.word	0x2003e3e4

000d5984 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5984:	2100      	movs	r1, #0
   d5986:	f7ff bd65 	b.w	d5454 <system_delay_ms>

000d598a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d598a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d598c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d598e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5990:	b113      	cbz	r3, d5998 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5992:	2203      	movs	r2, #3
   d5994:	4601      	mov	r1, r0
   d5996:	4798      	blx	r3
    }
   d5998:	4620      	mov	r0, r4
   d599a:	bd10      	pop	{r4, pc}

000d599c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d599c:	b510      	push	{r4, lr}
   d599e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59a0:	f7ff fff3 	bl	d598a <_ZNSt14_Function_baseD1Ev>
   d59a4:	4620      	mov	r0, r4
   d59a6:	bd10      	pop	{r4, pc}

000d59a8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59a8:	4803      	ldr	r0, [pc, #12]	; (d59b8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d59aa:	4a04      	ldr	r2, [pc, #16]	; (d59bc <_GLOBAL__sub_I_RGB+0x14>)
   d59ac:	4904      	ldr	r1, [pc, #16]	; (d59c0 <_GLOBAL__sub_I_RGB+0x18>)
   d59ae:	2300      	movs	r3, #0
   d59b0:	6083      	str	r3, [r0, #8]
   d59b2:	f000 bf8d 	b.w	d68d0 <__aeabi_atexit>
   d59b6:	bf00      	nop
   d59b8:	2003e3e8 	.word	0x2003e3e8
   d59bc:	2003e318 	.word	0x2003e318
   d59c0:	000d599d 	.word	0x000d599d

000d59c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d59c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d59c6:	4b0c      	ldr	r3, [pc, #48]	; (d59f8 <serialEventRun+0x34>)
   d59c8:	b133      	cbz	r3, d59d8 <serialEventRun+0x14>
   d59ca:	f000 f95d 	bl	d5c88 <_Z16_fetch_usbserialv>
   d59ce:	6803      	ldr	r3, [r0, #0]
   d59d0:	691b      	ldr	r3, [r3, #16]
   d59d2:	4798      	blx	r3
   d59d4:	2800      	cmp	r0, #0
   d59d6:	dc09      	bgt.n	d59ec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d59d8:	4b08      	ldr	r3, [pc, #32]	; (d59fc <serialEventRun+0x38>)
   d59da:	b163      	cbz	r3, d59f6 <serialEventRun+0x32>
   d59dc:	f000 f9d6 	bl	d5d8c <_Z22__fetch_global_Serial1v>
   d59e0:	6803      	ldr	r3, [r0, #0]
   d59e2:	691b      	ldr	r3, [r3, #16]
   d59e4:	4798      	blx	r3
   d59e6:	2800      	cmp	r0, #0
   d59e8:	dc03      	bgt.n	d59f2 <serialEventRun+0x2e>
   d59ea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d59ec:	f3af 8000 	nop.w
   d59f0:	e7f2      	b.n	d59d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d59f2:	f3af 8000 	nop.w
   d59f6:	bd08      	pop	{r3, pc}
	...

000d5a00 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5a00:	b508      	push	{r3, lr}
	serialEventRun();
   d5a02:	f7ff ffdf 	bl	d59c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5a06:	f7ff fbed 	bl	d51e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5a0a:	4b01      	ldr	r3, [pc, #4]	; (d5a10 <_post_loop+0x10>)
   d5a0c:	6018      	str	r0, [r3, #0]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	2003e734 	.word	0x2003e734

000d5a14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5a14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a16:	2300      	movs	r3, #0
   d5a18:	9300      	str	r3, [sp, #0]
   d5a1a:	461a      	mov	r2, r3
   d5a1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a20:	f7ff fd2a 	bl	d5478 <system_ctrl_set_result>
}
   d5a24:	b003      	add	sp, #12
   d5a26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a2c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5a2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5a2e:	8843      	ldrh	r3, [r0, #2]
   d5a30:	2b0a      	cmp	r3, #10
   d5a32:	d008      	beq.n	d5a46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5a34:	2b50      	cmp	r3, #80	; 0x50
   d5a36:	d109      	bne.n	d5a4c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5a38:	4b09      	ldr	r3, [pc, #36]	; (d5a60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5a3a:	681b      	ldr	r3, [r3, #0]
   d5a3c:	b13b      	cbz	r3, d5a4e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5a3e:	b003      	add	sp, #12
   d5a40:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5a44:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5a46:	f7ff ffe5 	bl	d5a14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5a4a:	e006      	b.n	d5a5a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a4c:	2300      	movs	r3, #0
   d5a4e:	9300      	str	r3, [sp, #0]
   d5a50:	461a      	mov	r2, r3
   d5a52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a56:	f7ff fd0f 	bl	d5478 <system_ctrl_set_result>
        break;
    }
}
   d5a5a:	b003      	add	sp, #12
   d5a5c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5a60:	2003e3f8 	.word	0x2003e3f8

000d5a64 <module_user_init_hook>:

void module_user_init_hook()
{
   d5a64:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5a66:	f7ff fbb5 	bl	d51d4 <HAL_RNG_GetRandomNumber>
   d5a6a:	4604      	mov	r4, r0
    srand(seed);
   d5a6c:	f001 fd5a 	bl	d7524 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5a70:	4b07      	ldr	r3, [pc, #28]	; (d5a90 <module_user_init_hook+0x2c>)
   d5a72:	b113      	cbz	r3, d5a7a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5a74:	4620      	mov	r0, r4
   d5a76:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5a7a:	2100      	movs	r1, #0
   d5a7c:	4804      	ldr	r0, [pc, #16]	; (d5a90 <module_user_init_hook+0x2c>)
   d5a7e:	f7ff fd5d 	bl	d553c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a82:	2100      	movs	r1, #0
   d5a84:	4803      	ldr	r0, [pc, #12]	; (d5a94 <module_user_init_hook+0x30>)
}
   d5a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a8a:	f7ff bceb 	b.w	d5464 <system_ctrl_set_app_request_handler>
   d5a8e:	bf00      	nop
   d5a90:	00000000 	.word	0x00000000
   d5a94:	000d5a2d 	.word	0x000d5a2d

000d5a98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5a98:	4770      	bx	lr

000d5a9a <_ZN9IPAddressD0Ev>:
   d5a9a:	b510      	push	{r4, lr}
   d5a9c:	2118      	movs	r1, #24
   d5a9e:	4604      	mov	r4, r0
   d5aa0:	f000 ff1b 	bl	d68da <_ZdlPvj>
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	bd10      	pop	{r4, pc}

000d5aa8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5aaa:	7d03      	ldrb	r3, [r0, #20]
   d5aac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5aae:	b08d      	sub	sp, #52	; 0x34
   d5ab0:	460e      	mov	r6, r1
   d5ab2:	f100 0704 	add.w	r7, r0, #4
   d5ab6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5aba:	d002      	beq.n	d5ac2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5abc:	f100 0508 	add.w	r5, r0, #8
   d5ac0:	e018      	b.n	d5af4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ac2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ac4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ac6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5aca:	232f      	movs	r3, #47	; 0x2f
   d5acc:	462a      	mov	r2, r5
   d5ace:	200a      	movs	r0, #10
   d5ad0:	f7ff fbb8 	bl	d5244 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ad4:	4628      	mov	r0, r5
   d5ad6:	f001 fd57 	bl	d7588 <strlen>
   d5ada:	6833      	ldr	r3, [r6, #0]
   d5adc:	4602      	mov	r2, r0
   d5ade:	68db      	ldr	r3, [r3, #12]
   d5ae0:	4629      	mov	r1, r5
   d5ae2:	4630      	mov	r0, r6
   d5ae4:	4798      	blx	r3
   d5ae6:	e00f      	b.n	d5b08 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5ae8:	b124      	cbz	r4, d5af4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5aea:	212e      	movs	r1, #46	; 0x2e
   d5aec:	4630      	mov	r0, r6
   d5aee:	f7ff fde5 	bl	d56bc <_ZN5Print5printEc>
   d5af2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5af4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5af8:	220a      	movs	r2, #10
   d5afa:	4630      	mov	r0, r6
   d5afc:	f7ff fe24 	bl	d5748 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b00:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b02:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b04:	d1f0      	bne.n	d5ae8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b06:	4620      	mov	r0, r4
    }
    return n;
}
   d5b08:	b00d      	add	sp, #52	; 0x34
   d5b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b0c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5b0c:	b510      	push	{r4, lr}
   d5b0e:	4b05      	ldr	r3, [pc, #20]	; (d5b24 <_ZN9IPAddressC1Ev+0x18>)
   d5b10:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b12:	2211      	movs	r2, #17
   d5b14:	f840 3b04 	str.w	r3, [r0], #4
   d5b18:	2100      	movs	r1, #0
   d5b1a:	f001 fcfa 	bl	d7512 <memset>
{
    clear();
}
   d5b1e:	4620      	mov	r0, r4
   d5b20:	bd10      	pop	{r4, pc}
   d5b22:	bf00      	nop
   d5b24:	000d7dc4 	.word	0x000d7dc4

000d5b28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b28:	4603      	mov	r3, r0
   d5b2a:	4a07      	ldr	r2, [pc, #28]	; (d5b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5b2c:	b510      	push	{r4, lr}
   d5b2e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5b32:	f101 0210 	add.w	r2, r1, #16
   d5b36:	f851 4b04 	ldr.w	r4, [r1], #4
   d5b3a:	f843 4b04 	str.w	r4, [r3], #4
   d5b3e:	4291      	cmp	r1, r2
   d5b40:	d1f9      	bne.n	d5b36 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5b42:	780a      	ldrb	r2, [r1, #0]
   d5b44:	701a      	strb	r2, [r3, #0]
}
   d5b46:	bd10      	pop	{r4, pc}
   d5b48:	000d7dc4 	.word	0x000d7dc4

000d5b4c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5b4c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5b4e:	2b04      	cmp	r3, #4
   d5b50:	d101      	bne.n	d5b56 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5b52:	6840      	ldr	r0, [r0, #4]
   d5b54:	e008      	b.n	d5b68 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5b56:	2b06      	cmp	r3, #6
   d5b58:	d10a      	bne.n	d5b70 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5b5a:	6843      	ldr	r3, [r0, #4]
   d5b5c:	b153      	cbz	r3, d5b74 <_ZNK9IPAddresscvbEv+0x28>
   d5b5e:	6883      	ldr	r3, [r0, #8]
   d5b60:	b143      	cbz	r3, d5b74 <_ZNK9IPAddresscvbEv+0x28>
   d5b62:	68c3      	ldr	r3, [r0, #12]
   d5b64:	b133      	cbz	r3, d5b74 <_ZNK9IPAddresscvbEv+0x28>
   d5b66:	6900      	ldr	r0, [r0, #16]
   d5b68:	3000      	adds	r0, #0
   d5b6a:	bf18      	it	ne
   d5b6c:	2001      	movne	r0, #1
   d5b6e:	4770      	bx	lr
   d5b70:	2000      	movs	r0, #0
   d5b72:	4770      	bx	lr
   d5b74:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5b76:	4770      	bx	lr

000d5b78 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5b78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5b7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5b7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5b82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5b86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5b8a:	2304      	movs	r3, #4
   d5b8c:	6041      	str	r1, [r0, #4]
   d5b8e:	7503      	strb	r3, [r0, #20]
   d5b90:	bd10      	pop	{r4, pc}
	...

000d5b94 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d5b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b96:	4d04      	ldr	r5, [pc, #16]	; (d5ba8 <_ZN9IPAddressC1Ehhhh+0x14>)
   d5b98:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d5b9a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d5b9e:	9500      	str	r5, [sp, #0]
   d5ba0:	f7ff ffea 	bl	d5b78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5ba4:	b003      	add	sp, #12
   d5ba6:	bd30      	pop	{r4, r5, pc}
   d5ba8:	000d7dc4 	.word	0x000d7dc4

000d5bac <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5bae:	780d      	ldrb	r5, [r1, #0]
   d5bb0:	788b      	ldrb	r3, [r1, #2]
   d5bb2:	784a      	ldrb	r2, [r1, #1]
   d5bb4:	78c9      	ldrb	r1, [r1, #3]
   d5bb6:	9100      	str	r1, [sp, #0]
   d5bb8:	4629      	mov	r1, r5
   d5bba:	f7ff ffdd 	bl	d5b78 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5bbe:	b003      	add	sp, #12
   d5bc0:	bd30      	pop	{r4, r5, pc}

000d5bc2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5bc2:	7441      	strb	r1, [r0, #17]
   d5bc4:	4770      	bx	lr

000d5bc6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5bc6:	4770      	bx	lr

000d5bc8 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5bc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5bca:	2100      	movs	r1, #0
   d5bcc:	7c00      	ldrb	r0, [r0, #16]
   d5bce:	f7ff fc19 	bl	d5404 <HAL_USB_USART_Receive_Data>
}
   d5bd2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bd6:	bf28      	it	cs
   d5bd8:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bdc:	bd08      	pop	{r3, pc}

000d5bde <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5bde:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5be0:	2101      	movs	r1, #1
   d5be2:	7c00      	ldrb	r0, [r0, #16]
   d5be4:	f7ff fc0e 	bl	d5404 <HAL_USB_USART_Receive_Data>
}
   d5be8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bec:	bf28      	it	cs
   d5bee:	f04f 30ff 	movcs.w	r0, #4294967295
   d5bf2:	bd08      	pop	{r3, pc}

000d5bf4 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5bf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5bf6:	7c00      	ldrb	r0, [r0, #16]
   d5bf8:	f7ff fbfc 	bl	d53f4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5bfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c00:	bd08      	pop	{r3, pc}

000d5c02 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5c02:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5c04:	7c00      	ldrb	r0, [r0, #16]
   d5c06:	f7ff fbed 	bl	d53e4 <HAL_USB_USART_Available_Data>
}
   d5c0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c0e:	bd08      	pop	{r3, pc}

000d5c10 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5c10:	7c00      	ldrb	r0, [r0, #16]
   d5c12:	f7ff bc07 	b.w	d5424 <HAL_USB_USART_Flush_Data>

000d5c16 <_ZN9USBSerialD0Ev>:
   d5c16:	b510      	push	{r4, lr}
   d5c18:	2114      	movs	r1, #20
   d5c1a:	4604      	mov	r4, r0
   d5c1c:	f000 fe5d 	bl	d68da <_ZdlPvj>
   d5c20:	4620      	mov	r0, r4
   d5c22:	bd10      	pop	{r4, pc}

000d5c24 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c24:	b538      	push	{r3, r4, r5, lr}
   d5c26:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c28:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c2a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c2c:	f7ff fbe2 	bl	d53f4 <HAL_USB_USART_Available_Data_For_Write>
   d5c30:	2800      	cmp	r0, #0
   d5c32:	dc01      	bgt.n	d5c38 <_ZN9USBSerial5writeEh+0x14>
   d5c34:	7c60      	ldrb	r0, [r4, #17]
   d5c36:	b128      	cbz	r0, d5c44 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c38:	4629      	mov	r1, r5
   d5c3a:	7c20      	ldrb	r0, [r4, #16]
   d5c3c:	f7ff fbea 	bl	d5414 <HAL_USB_USART_Send_Data>
   d5c40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5c44:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c48:	b510      	push	{r4, lr}
   d5c4a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c4c:	2300      	movs	r3, #0
   d5c4e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c54:	60a3      	str	r3, [r4, #8]
   d5c56:	4b05      	ldr	r3, [pc, #20]	; (d5c6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c58:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c5a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c5c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c62:	4611      	mov	r1, r2
   d5c64:	f7ff fbae 	bl	d53c4 <HAL_USB_USART_Init>
}
   d5c68:	4620      	mov	r0, r4
   d5c6a:	bd10      	pop	{r4, pc}
   d5c6c:	000d7dd8 	.word	0x000d7dd8

000d5c70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c70:	2200      	movs	r2, #0
   d5c72:	7c00      	ldrb	r0, [r0, #16]
   d5c74:	f7ff bbae 	b.w	d53d4 <HAL_USB_USART_Begin>

000d5c78 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c7a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c7c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c7e:	2100      	movs	r1, #0
   d5c80:	f001 fc47 	bl	d7512 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c84:	4620      	mov	r0, r4
   d5c86:	bd10      	pop	{r4, pc}

000d5c88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c8a:	4d0e      	ldr	r5, [pc, #56]	; (d5cc4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c8e:	a801      	add	r0, sp, #4
   d5c90:	f7ff fff2 	bl	d5c78 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c94:	6829      	ldr	r1, [r5, #0]
   d5c96:	f011 0401 	ands.w	r4, r1, #1
   d5c9a:	d110      	bne.n	d5cbe <_Z16_fetch_usbserialv+0x36>
   d5c9c:	4628      	mov	r0, r5
   d5c9e:	f7fe fa00 	bl	d40a2 <__cxa_guard_acquire>
   d5ca2:	b160      	cbz	r0, d5cbe <_Z16_fetch_usbserialv+0x36>
   d5ca4:	aa01      	add	r2, sp, #4
   d5ca6:	4621      	mov	r1, r4
   d5ca8:	4807      	ldr	r0, [pc, #28]	; (d5cc8 <_Z16_fetch_usbserialv+0x40>)
   d5caa:	f7ff ffcd 	bl	d5c48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5cae:	4628      	mov	r0, r5
   d5cb0:	f7fe f9fc 	bl	d40ac <__cxa_guard_release>
   d5cb4:	4a05      	ldr	r2, [pc, #20]	; (d5ccc <_Z16_fetch_usbserialv+0x44>)
   d5cb6:	4906      	ldr	r1, [pc, #24]	; (d5cd0 <_Z16_fetch_usbserialv+0x48>)
   d5cb8:	4803      	ldr	r0, [pc, #12]	; (d5cc8 <_Z16_fetch_usbserialv+0x40>)
   d5cba:	f000 fe09 	bl	d68d0 <__aeabi_atexit>
	return _usbserial;
}
   d5cbe:	4802      	ldr	r0, [pc, #8]	; (d5cc8 <_Z16_fetch_usbserialv+0x40>)
   d5cc0:	b007      	add	sp, #28
   d5cc2:	bd30      	pop	{r4, r5, pc}
   d5cc4:	2003e3fc 	.word	0x2003e3fc
   d5cc8:	2003e400 	.word	0x2003e400
   d5ccc:	2003e318 	.word	0x2003e318
   d5cd0:	000d5bc7 	.word	0x000d5bc7

000d5cd4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cd4:	4770      	bx	lr

000d5cd6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cd6:	7441      	strb	r1, [r0, #17]
   d5cd8:	4770      	bx	lr

000d5cda <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5cda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5cdc:	7c00      	ldrb	r0, [r0, #16]
   d5cde:	f7ff fb01 	bl	d52e4 <HAL_USART_Available_Data_For_Write>
}
   d5ce2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ce6:	bd08      	pop	{r3, pc}

000d5ce8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5ce8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5cea:	7c00      	ldrb	r0, [r0, #16]
   d5cec:	f7ff fad2 	bl	d5294 <HAL_USART_Available_Data>
}
   d5cf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cf4:	bd08      	pop	{r3, pc}

000d5cf6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5cf6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5cf8:	7c00      	ldrb	r0, [r0, #16]
   d5cfa:	f7ff fadb 	bl	d52b4 <HAL_USART_Peek_Data>
}
   d5cfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d02:	bf28      	it	cs
   d5d04:	f04f 30ff 	movcs.w	r0, #4294967295
   d5d08:	bd08      	pop	{r3, pc}

000d5d0a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5d0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5d0c:	7c00      	ldrb	r0, [r0, #16]
   d5d0e:	f7ff fac9 	bl	d52a4 <HAL_USART_Read_Data>
}
   d5d12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d16:	bf28      	it	cs
   d5d18:	f04f 30ff 	movcs.w	r0, #4294967295
   d5d1c:	bd08      	pop	{r3, pc}

000d5d1e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5d1e:	7c00      	ldrb	r0, [r0, #16]
   d5d20:	f7ff bad0 	b.w	d52c4 <HAL_USART_Flush_Data>

000d5d24 <_ZN11USARTSerialD0Ev>:
   d5d24:	b510      	push	{r4, lr}
   d5d26:	2114      	movs	r1, #20
   d5d28:	4604      	mov	r4, r0
   d5d2a:	f000 fdd6 	bl	d68da <_ZdlPvj>
   d5d2e:	4620      	mov	r0, r4
   d5d30:	bd10      	pop	{r4, pc}

000d5d32 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d32:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d34:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d36:	4604      	mov	r4, r0
   d5d38:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d3a:	b925      	cbnz	r5, d5d46 <_ZN11USARTSerial5writeEh+0x14>
   d5d3c:	7c00      	ldrb	r0, [r0, #16]
   d5d3e:	f7ff fad1 	bl	d52e4 <HAL_USART_Available_Data_For_Write>
   d5d42:	2800      	cmp	r0, #0
   d5d44:	dd05      	ble.n	d5d52 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d46:	4631      	mov	r1, r6
   d5d48:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d4e:	f7ff ba99 	b.w	d5284 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d52:	4628      	mov	r0, r5
   d5d54:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d58:	b510      	push	{r4, lr}
   d5d5a:	4604      	mov	r4, r0
   d5d5c:	4608      	mov	r0, r1
   d5d5e:	4611      	mov	r1, r2
   d5d60:	2200      	movs	r2, #0
   d5d62:	6062      	str	r2, [r4, #4]
   d5d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d68:	60a2      	str	r2, [r4, #8]
   d5d6a:	4a05      	ldr	r2, [pc, #20]	; (d5d80 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d6c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d6e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d70:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d72:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d74:	461a      	mov	r2, r3
   d5d76:	f7ff fa7d 	bl	d5274 <HAL_USART_Init>
}
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	bd10      	pop	{r4, pc}
   d5d7e:	bf00      	nop
   d5d80:	000d7e08 	.word	0x000d7e08

000d5d84 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d84:	7c00      	ldrb	r0, [r0, #16]
   d5d86:	f7ff baa5 	b.w	d52d4 <HAL_USART_Is_Enabled>
	...

000d5d8c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d8c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d8e:	4d0c      	ldr	r5, [pc, #48]	; (d5dc0 <_Z22__fetch_global_Serial1v+0x34>)
   d5d90:	6829      	ldr	r1, [r5, #0]
   d5d92:	f011 0401 	ands.w	r4, r1, #1
   d5d96:	d111      	bne.n	d5dbc <_Z22__fetch_global_Serial1v+0x30>
   d5d98:	4628      	mov	r0, r5
   d5d9a:	f7fe f982 	bl	d40a2 <__cxa_guard_acquire>
   d5d9e:	b168      	cbz	r0, d5dbc <_Z22__fetch_global_Serial1v+0x30>
   d5da0:	4a08      	ldr	r2, [pc, #32]	; (d5dc4 <_Z22__fetch_global_Serial1v+0x38>)
   d5da2:	4b09      	ldr	r3, [pc, #36]	; (d5dc8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5da4:	4809      	ldr	r0, [pc, #36]	; (d5dcc <_Z22__fetch_global_Serial1v+0x40>)
   d5da6:	4621      	mov	r1, r4
   d5da8:	f7ff ffd6 	bl	d5d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5dac:	4628      	mov	r0, r5
   d5dae:	f7fe f97d 	bl	d40ac <__cxa_guard_release>
   d5db2:	4a07      	ldr	r2, [pc, #28]	; (d5dd0 <_Z22__fetch_global_Serial1v+0x44>)
   d5db4:	4907      	ldr	r1, [pc, #28]	; (d5dd4 <_Z22__fetch_global_Serial1v+0x48>)
   d5db6:	4805      	ldr	r0, [pc, #20]	; (d5dcc <_Z22__fetch_global_Serial1v+0x40>)
   d5db8:	f000 fd8a 	bl	d68d0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5dbc:	4803      	ldr	r0, [pc, #12]	; (d5dcc <_Z22__fetch_global_Serial1v+0x40>)
   d5dbe:	bd38      	pop	{r3, r4, r5, pc}
   d5dc0:	2003e4ac 	.word	0x2003e4ac
   d5dc4:	2003e4b0 	.word	0x2003e4b0
   d5dc8:	2003e428 	.word	0x2003e428
   d5dcc:	2003e414 	.word	0x2003e414
   d5dd0:	2003e318 	.word	0x2003e318
   d5dd4:	000d5cd5 	.word	0x000d5cd5

000d5dd8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5dd8:	4770      	bx	lr

000d5dda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ddc:	4606      	mov	r6, r0
   d5dde:	4615      	mov	r5, r2
   d5de0:	460c      	mov	r4, r1
   d5de2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5de4:	42bc      	cmp	r4, r7
   d5de6:	d006      	beq.n	d5df6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5de8:	6833      	ldr	r3, [r6, #0]
   d5dea:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5dee:	689b      	ldr	r3, [r3, #8]
   d5df0:	4630      	mov	r0, r6
   d5df2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5df4:	e7f6      	b.n	d5de4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5df6:	4628      	mov	r0, r5
   d5df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dfa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	7c00      	ldrb	r0, [r0, #16]
   d5dfe:	f7ff ba79 	b.w	d52f4 <HAL_I2C_Write_Data>

000d5e02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5e02:	2100      	movs	r1, #0
   d5e04:	7c00      	ldrb	r0, [r0, #16]
   d5e06:	f7ff ba7d 	b.w	d5304 <HAL_I2C_Available_Data>

000d5e0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5e0a:	2100      	movs	r1, #0
   d5e0c:	7c00      	ldrb	r0, [r0, #16]
   d5e0e:	f7ff ba81 	b.w	d5314 <HAL_I2C_Read_Data>

000d5e12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5e12:	2100      	movs	r1, #0
   d5e14:	7c00      	ldrb	r0, [r0, #16]
   d5e16:	f7ff ba85 	b.w	d5324 <HAL_I2C_Peek_Data>

000d5e1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5e1a:	2100      	movs	r1, #0
   d5e1c:	7c00      	ldrb	r0, [r0, #16]
   d5e1e:	f7ff ba89 	b.w	d5334 <HAL_I2C_Flush_Data>

000d5e22 <_ZN7TwoWireD0Ev>:
   d5e22:	b510      	push	{r4, lr}
   d5e24:	2114      	movs	r1, #20
   d5e26:	4604      	mov	r4, r0
   d5e28:	f000 fd57 	bl	d68da <_ZdlPvj>
   d5e2c:	4620      	mov	r0, r4
   d5e2e:	bd10      	pop	{r4, pc}

000d5e30 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5e30:	b510      	push	{r4, lr}
   d5e32:	4604      	mov	r4, r0
   d5e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e38:	4608      	mov	r0, r1
   d5e3a:	60a3      	str	r3, [r4, #8]
   d5e3c:	2100      	movs	r1, #0
   d5e3e:	4b04      	ldr	r3, [pc, #16]	; (d5e50 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5e40:	7420      	strb	r0, [r4, #16]
   d5e42:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5e44:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5e46:	f7ff fa85 	bl	d5354 <HAL_I2C_Init>

}
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	bd10      	pop	{r4, pc}
   d5e4e:	bf00      	nop
   d5e50:	000d7e38 	.word	0x000d7e38

000d5e54 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5e54:	2100      	movs	r1, #0
   d5e56:	7c00      	ldrb	r0, [r0, #16]
   d5e58:	f7ff ba74 	b.w	d5344 <HAL_I2C_Is_Enabled>

000d5e5c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e5c:	2200      	movs	r2, #0
   d5e5e:	4611      	mov	r1, r2
   d5e60:	6840      	ldr	r0, [r0, #4]
   d5e62:	f7ff bb4b 	b.w	d54fc <network_listening>

000d5e66 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e66:	2200      	movs	r2, #0
   d5e68:	4611      	mov	r1, r2
   d5e6a:	6840      	ldr	r0, [r0, #4]
   d5e6c:	f7ff bb56 	b.w	d551c <network_get_listen_timeout>

000d5e70 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e70:	2200      	movs	r2, #0
   d5e72:	6840      	ldr	r0, [r0, #4]
   d5e74:	f7ff bb4a 	b.w	d550c <network_set_listen_timeout>

000d5e78 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e78:	2200      	movs	r2, #0
   d5e7a:	f081 0101 	eor.w	r1, r1, #1
   d5e7e:	6840      	ldr	r0, [r0, #4]
   d5e80:	f7ff bb34 	b.w	d54ec <network_listen>

000d5e84 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5e84:	2300      	movs	r3, #0
   d5e86:	461a      	mov	r2, r3
   d5e88:	4619      	mov	r1, r3
   d5e8a:	6840      	ldr	r0, [r0, #4]
   d5e8c:	f7ff bb26 	b.w	d54dc <network_off>

000d5e90 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e90:	2300      	movs	r3, #0
   d5e92:	461a      	mov	r2, r3
   d5e94:	4619      	mov	r1, r3
   d5e96:	6840      	ldr	r0, [r0, #4]
   d5e98:	f7ff bb18 	b.w	d54cc <network_on>

000d5e9c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e9c:	2200      	movs	r2, #0
   d5e9e:	4611      	mov	r1, r2
   d5ea0:	6840      	ldr	r0, [r0, #4]
   d5ea2:	f7ff bb0b 	b.w	d54bc <network_ready>

000d5ea6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ea6:	2200      	movs	r2, #0
   d5ea8:	4611      	mov	r1, r2
   d5eaa:	6840      	ldr	r0, [r0, #4]
   d5eac:	f7ff baf6 	b.w	d549c <network_connecting>

000d5eb0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5eb0:	2200      	movs	r2, #0
   d5eb2:	2102      	movs	r1, #2
   d5eb4:	6840      	ldr	r0, [r0, #4]
   d5eb6:	f7ff baf9 	b.w	d54ac <network_disconnect>

000d5eba <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5eba:	2300      	movs	r3, #0
   d5ebc:	461a      	mov	r2, r3
   d5ebe:	6840      	ldr	r0, [r0, #4]
   d5ec0:	f7ff bae4 	b.w	d548c <network_connect>

000d5ec4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5ec4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ec6:	4605      	mov	r5, r0
   d5ec8:	b188      	cbz	r0, d5eee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5eca:	6804      	ldr	r4, [r0, #0]
   d5ecc:	b14c      	cbz	r4, d5ee2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5ece:	68a3      	ldr	r3, [r4, #8]
   d5ed0:	b11b      	cbz	r3, d5eda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ed2:	2203      	movs	r2, #3
   d5ed4:	4621      	mov	r1, r4
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5eda:	2110      	movs	r1, #16
   d5edc:	4620      	mov	r0, r4
   d5ede:	f000 fcfc 	bl	d68da <_ZdlPvj>
   d5ee2:	4628      	mov	r0, r5
   d5ee4:	2114      	movs	r1, #20
      }
   d5ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5eea:	f000 bcf6 	b.w	d68da <_ZdlPvj>
   d5eee:	bd38      	pop	{r3, r4, r5, pc}

000d5ef0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5ef0:	b110      	cbz	r0, d5ef8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5ef2:	6803      	ldr	r3, [r0, #0]
   d5ef4:	685b      	ldr	r3, [r3, #4]
   d5ef6:	4718      	bx	r3
   d5ef8:	4770      	bx	lr

000d5efa <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5efa:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5efc:	6803      	ldr	r3, [r0, #0]
   d5efe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5f00:	b1bb      	cbz	r3, d5f32 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5f02:	6858      	ldr	r0, [r3, #4]
   d5f04:	f7ff f976 	bl	d51f4 <os_thread_is_current>
   d5f08:	b978      	cbnz	r0, d5f2a <_ZN6ThreadD1Ev+0x30>
   d5f0a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5f0c:	7c5a      	ldrb	r2, [r3, #17]
   d5f0e:	b912      	cbnz	r2, d5f16 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5f10:	6858      	ldr	r0, [r3, #4]
   d5f12:	f7ff f977 	bl	d5204 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5f16:	6823      	ldr	r3, [r4, #0]
   d5f18:	6858      	ldr	r0, [r3, #4]
   d5f1a:	f7ff f97b 	bl	d5214 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f1e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f20:	2300      	movs	r3, #0
   d5f22:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5f24:	b128      	cbz	r0, d5f32 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5f26:	f7ff ffcd 	bl	d5ec4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f2a:	6820      	ldr	r0, [r4, #0]
   d5f2c:	b108      	cbz	r0, d5f32 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5f2e:	f7ff ffc9 	bl	d5ec4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5f32:	4620      	mov	r0, r4
   d5f34:	bd10      	pop	{r4, pc}
	...

000d5f38 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5f38:	b538      	push	{r3, r4, r5, lr}
   d5f3a:	4b0c      	ldr	r3, [pc, #48]	; (d5f6c <_ZN5spark9MeshClassD1Ev+0x34>)
   d5f3c:	6003      	str	r3, [r0, #0]
   d5f3e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f40:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5f44:	b108      	cbz	r0, d5f4a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5f46:	f7fe f8aa 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f4a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5f4e:	b135      	cbz	r5, d5f5e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f50:	4628      	mov	r0, r5
   d5f52:	f7ff ffd2 	bl	d5efa <_ZN6ThreadD1Ev>
   d5f56:	2104      	movs	r1, #4
   d5f58:	4628      	mov	r0, r5
   d5f5a:	f000 fcbe 	bl	d68da <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f5e:	68a0      	ldr	r0, [r4, #8]
   d5f60:	b108      	cbz	r0, d5f66 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5f62:	f7ff ffc5 	bl	d5ef0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5f66:	4620      	mov	r0, r4
   d5f68:	bd38      	pop	{r3, r4, r5, pc}
   d5f6a:	bf00      	nop
   d5f6c:	000d7e60 	.word	0x000d7e60

000d5f70 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5f70:	b538      	push	{r3, r4, r5, lr}
   d5f72:	4c0d      	ldr	r4, [pc, #52]	; (d5fa8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5f74:	4b0d      	ldr	r3, [pc, #52]	; (d5fac <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5f76:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5f78:	2500      	movs	r5, #0
   d5f7a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5f7c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5f80:	6063      	str	r3, [r4, #4]
   d5f82:	60a5      	str	r5, [r4, #8]
   d5f84:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5f88:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5f8c:	f7ff f952 	bl	d5234 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5f90:	4b07      	ldr	r3, [pc, #28]	; (d5fb0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5f92:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5f96:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5f98:	4620      	mov	r0, r4
   d5f9a:	4a06      	ldr	r2, [pc, #24]	; (d5fb4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5f9c:	4906      	ldr	r1, [pc, #24]	; (d5fb8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5fa2:	f000 bc95 	b.w	d68d0 <__aeabi_atexit>
   d5fa6:	bf00      	nop
   d5fa8:	2003e534 	.word	0x2003e534
   d5fac:	000d7f48 	.word	0x000d7f48
   d5fb0:	000d7e60 	.word	0x000d7e60
   d5fb4:	2003e318 	.word	0x2003e318
   d5fb8:	000d5f39 	.word	0x000d5f39

000d5fbc <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fbe:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fc0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5fc2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5fc6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5fc8:	2201      	movs	r2, #1
   d5fca:	f04f 33ff 	mov.w	r3, #4294967295
   d5fce:	4621      	mov	r1, r4
   d5fd0:	47a8      	blx	r5
}
   d5fd2:	b003      	add	sp, #12
   d5fd4:	bd30      	pop	{r4, r5, pc}

000d5fd6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5fd6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5fd8:	6803      	ldr	r3, [r0, #0]
   d5fda:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5fdc:	f04f 33ff 	mov.w	r3, #4294967295
   d5fe0:	46a4      	mov	ip, r4
}
   d5fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5fe6:	4760      	bx	ip

000d5fe8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5fea:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5fec:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5fee:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5ff2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5ff4:	4621      	mov	r1, r4
   d5ff6:	4613      	mov	r3, r2
   d5ff8:	2201      	movs	r2, #1
   d5ffa:	47a8      	blx	r5
}
   d5ffc:	b003      	add	sp, #12
   d5ffe:	bd30      	pop	{r4, r5, pc}

000d6000 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6000:	4770      	bx	lr

000d6002 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6002:	b538      	push	{r3, r4, r5, lr}
   d6004:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d600a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d600c:	da05      	bge.n	d601a <_ZN9TCPClient9connectedEv+0x18>
   d600e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6012:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6016:	429a      	cmp	r2, r3
   d6018:	d001      	beq.n	d601e <_ZN9TCPClient9connectedEv+0x1c>
   d601a:	2501      	movs	r5, #1
   d601c:	e00b      	b.n	d6036 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d601e:	6803      	ldr	r3, [r0, #0]
   d6020:	691b      	ldr	r3, [r3, #16]
   d6022:	4798      	blx	r3
   d6024:	2800      	cmp	r0, #0
   d6026:	bf14      	ite	ne
   d6028:	2501      	movne	r5, #1
   d602a:	2500      	moveq	r5, #0
        if (!rv) {
   d602c:	d103      	bne.n	d6036 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d602e:	6823      	ldr	r3, [r4, #0]
   d6030:	4620      	mov	r0, r4
   d6032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6034:	4798      	blx	r3
        }
    }
    return rv;
}
   d6036:	4628      	mov	r0, r5
   d6038:	bd38      	pop	{r3, r4, r5, pc}

000d603a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d603a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d603c:	6818      	ldr	r0, [r3, #0]
}
   d603e:	43c0      	mvns	r0, r0
   d6040:	0fc0      	lsrs	r0, r0, #31
   d6042:	4770      	bx	lr

000d6044 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6044:	4770      	bx	lr

000d6046 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6046:	2000      	movs	r0, #0
   d6048:	4770      	bx	lr

000d604a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d604a:	b510      	push	{r4, lr}
   d604c:	2114      	movs	r1, #20
   d604e:	4604      	mov	r4, r0
   d6050:	f000 fc43 	bl	d68da <_ZdlPvj>
   d6054:	4620      	mov	r0, r4
   d6056:	bd10      	pop	{r4, pc}

000d6058 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6058:	f7fe b81f 	b.w	d409a <_ZdlPv>

000d605c <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6060:	4698      	mov	r8, r3
    stop();
   d6062:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6064:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6068:	460c      	mov	r4, r1
   d606a:	4606      	mov	r6, r0
   d606c:	4617      	mov	r7, r2
    stop();
   d606e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6070:	ab12      	add	r3, sp, #72	; 0x48
   d6072:	2500      	movs	r5, #0
   d6074:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6078:	462a      	mov	r2, r5
   d607a:	4629      	mov	r1, r5
   d607c:	4620      	mov	r0, r4
   d607e:	f7ff f841 	bl	d5104 <netdb_getaddrinfo>
   d6082:	2800      	cmp	r0, #0
   d6084:	db3a      	blt.n	d60fc <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6086:	9b00      	ldr	r3, [sp, #0]
   d6088:	2b00      	cmp	r3, #0
   d608a:	d039      	beq.n	d6100 <_ZN9TCPClient7connectEPKctm+0xa4>
   d608c:	695b      	ldr	r3, [r3, #20]
   d608e:	2b00      	cmp	r3, #0
   d6090:	d036      	beq.n	d6100 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d6092:	a806      	add	r0, sp, #24
   d6094:	f7ff fd3a 	bl	d5b0c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6098:	9b00      	ldr	r3, [sp, #0]
   d609a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d609c:	7863      	ldrb	r3, [r4, #1]
   d609e:	2b02      	cmp	r3, #2
   d60a0:	d101      	bne.n	d60a6 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d60a2:	1d21      	adds	r1, r4, #4
   d60a4:	e013      	b.n	d60ce <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d60a6:	2b0a      	cmp	r3, #10
   d60a8:	d114      	bne.n	d60d4 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d60aa:	2211      	movs	r2, #17
   d60ac:	4629      	mov	r1, r5
   d60ae:	a801      	add	r0, sp, #4
   d60b0:	f001 fa2f 	bl	d7512 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d60b4:	68a3      	ldr	r3, [r4, #8]
   d60b6:	bb33      	cbnz	r3, d6106 <_ZN9TCPClient7connectEPKctm+0xaa>
   d60b8:	68e3      	ldr	r3, [r4, #12]
   d60ba:	bb23      	cbnz	r3, d6106 <_ZN9TCPClient7connectEPKctm+0xaa>
   d60bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d60c0:	6925      	ldr	r5, [r4, #16]
   d60c2:	f7ff f8c7 	bl	d5254 <inet_htonl>
   d60c6:	4285      	cmp	r5, r0
   d60c8:	d11d      	bne.n	d6106 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d60ca:	f104 0114 	add.w	r1, r4, #20
   d60ce:	a806      	add	r0, sp, #24
   d60d0:	f7ff fd6c 	bl	d5bac <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d60d4:	a806      	add	r0, sp, #24
   d60d6:	f7ff fd39 	bl	d5b4c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d60da:	b188      	cbz	r0, d6100 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d60dc:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d60de:	ad07      	add	r5, sp, #28
   d60e0:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d60e4:	4b18      	ldr	r3, [pc, #96]	; (d6148 <_ZN9TCPClient7connectEPKctm+0xec>)
   d60e6:	930c      	str	r3, [sp, #48]	; 0x30
   d60e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60ea:	ac0d      	add	r4, sp, #52	; 0x34
   d60ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60ee:	682b      	ldr	r3, [r5, #0]
   d60f0:	7023      	strb	r3, [r4, #0]
   d60f2:	463a      	mov	r2, r7
   d60f4:	4643      	mov	r3, r8
   d60f6:	a90c      	add	r1, sp, #48	; 0x30
   d60f8:	4630      	mov	r0, r6
   d60fa:	47c8      	blx	r9
   d60fc:	4604      	mov	r4, r0
   d60fe:	e01c      	b.n	d613a <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d6100:	f04f 34ff 	mov.w	r4, #4294967295
   d6104:	e019      	b.n	d613a <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6106:	f104 0308 	add.w	r3, r4, #8
   d610a:	ad01      	add	r5, sp, #4
   d610c:	3418      	adds	r4, #24
   d610e:	6818      	ldr	r0, [r3, #0]
   d6110:	6859      	ldr	r1, [r3, #4]
   d6112:	462a      	mov	r2, r5
   d6114:	c203      	stmia	r2!, {r0, r1}
   d6116:	3308      	adds	r3, #8
   d6118:	42a3      	cmp	r3, r4
   d611a:	4615      	mov	r5, r2
   d611c:	d1f7      	bne.n	d610e <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d611e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6120:	a901      	add	r1, sp, #4
   d6122:	a80c      	add	r0, sp, #48	; 0x30
   d6124:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6126:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d612a:	f7ff fcfd 	bl	d5b28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d612e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6130:	ac07      	add	r4, sp, #28
   d6132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6134:	682b      	ldr	r3, [r5, #0]
   d6136:	7023      	strb	r3, [r4, #0]
   d6138:	e7cc      	b.n	d60d4 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d613a:	9800      	ldr	r0, [sp, #0]
   d613c:	f7fe ffda 	bl	d50f4 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d6140:	4620      	mov	r0, r4
   d6142:	b013      	add	sp, #76	; 0x4c
   d6144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6148:	000d7dc4 	.word	0x000d7dc4

000d614c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d614c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d614e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6150:	2200      	movs	r2, #0
   d6152:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6154:	9202      	str	r2, [sp, #8]
   d6156:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6158:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d615a:	4604      	mov	r4, r0
   d615c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d615e:	d008      	beq.n	d6172 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6164:	fbb3 f1f2 	udiv	r1, r3, r2
   d6168:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d616a:	fb02 3111 	mls	r1, r2, r1, r3
   d616e:	434a      	muls	r2, r1
   d6170:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6172:	6960      	ldr	r0, [r4, #20]
   d6174:	2308      	movs	r3, #8
   d6176:	9300      	str	r3, [sp, #0]
   d6178:	f241 0205 	movw	r2, #4101	; 0x1005
   d617c:	446b      	add	r3, sp
   d617e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6182:	6800      	ldr	r0, [r0, #0]
   d6184:	f7ff f8ee 	bl	d5364 <sock_setsockopt>
    if (ret < 0) {
   d6188:	2800      	cmp	r0, #0
   d618a:	db08      	blt.n	d619e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d618c:	6960      	ldr	r0, [r4, #20]
   d618e:	2300      	movs	r3, #0
   d6190:	4632      	mov	r2, r6
   d6192:	4629      	mov	r1, r5
   d6194:	6800      	ldr	r0, [r0, #0]
   d6196:	f7ff f905 	bl	d53a4 <sock_send>
    if (ret < 0) {
   d619a:	2800      	cmp	r0, #0
   d619c:	da04      	bge.n	d61a8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d619e:	f7ff f9ed 	bl	d557c <__errno>
   d61a2:	6803      	ldr	r3, [r0, #0]
   d61a4:	6063      	str	r3, [r4, #4]
   d61a6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d61a8:	b004      	add	sp, #16
   d61aa:	bd70      	pop	{r4, r5, r6, pc}

000d61ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d61ac:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d61ae:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d61b0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d61b2:	689b      	ldr	r3, [r3, #8]
   d61b4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d61b6:	68a3      	ldr	r3, [r4, #8]
   d61b8:	3b01      	subs	r3, #1
   d61ba:	60a3      	str	r3, [r4, #8]
   d61bc:	b92b      	cbnz	r3, d61ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d61be:	6823      	ldr	r3, [r4, #0]
   d61c0:	4620      	mov	r0, r4
   d61c2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d61c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d61c8:	4718      	bx	r3
   d61ca:	bd10      	pop	{r4, pc}

000d61cc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d61cc:	b570      	push	{r4, r5, r6, lr}
   d61ce:	4604      	mov	r4, r0
   d61d0:	694d      	ldr	r5, [r1, #20]
   d61d2:	4b05      	ldr	r3, [pc, #20]	; (d61e8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d61d4:	f844 3b04 	str.w	r3, [r4], #4
   d61d8:	358c      	adds	r5, #140	; 0x8c
   d61da:	4606      	mov	r6, r0
   d61dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61e0:	682b      	ldr	r3, [r5, #0]
   d61e2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d61e4:	4630      	mov	r0, r6
   d61e6:	bd70      	pop	{r4, r5, r6, pc}
   d61e8:	000d7dc4 	.word	0x000d7dc4

000d61ec <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d61ec:	b510      	push	{r4, lr}
   d61ee:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d61f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d61f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d61f8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d61fa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d61fc:	d005      	beq.n	d620a <_ZN9TCPClient4peekEv+0x1e>
   d61fe:	6962      	ldr	r2, [r4, #20]
   d6200:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6204:	4413      	add	r3, r2
   d6206:	7918      	ldrb	r0, [r3, #4]
   d6208:	bd10      	pop	{r4, pc}
   d620a:	6803      	ldr	r3, [r0, #0]
   d620c:	691b      	ldr	r3, [r3, #16]
   d620e:	4798      	blx	r3
   d6210:	2800      	cmp	r0, #0
   d6212:	d1f4      	bne.n	d61fe <_ZN9TCPClient4peekEv+0x12>
   d6214:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6218:	bd10      	pop	{r4, pc}

000d621a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d621a:	b510      	push	{r4, lr}
   d621c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d621e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6222:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6226:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6228:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d622a:	d008      	beq.n	d623e <_ZN9TCPClient4readEv+0x24>
   d622c:	6962      	ldr	r2, [r4, #20]
   d622e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6232:	1c59      	adds	r1, r3, #1
   d6234:	4413      	add	r3, r2
   d6236:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d623a:	7918      	ldrb	r0, [r3, #4]
   d623c:	bd10      	pop	{r4, pc}
   d623e:	6803      	ldr	r3, [r0, #0]
   d6240:	691b      	ldr	r3, [r3, #16]
   d6242:	4798      	blx	r3
   d6244:	2800      	cmp	r0, #0
   d6246:	d1f1      	bne.n	d622c <_ZN9TCPClient4readEv+0x12>
   d6248:	f04f 30ff 	mov.w	r0, #4294967295
}
   d624c:	bd10      	pop	{r4, pc}

000d624e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d624e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6250:	6943      	ldr	r3, [r0, #20]
   d6252:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6254:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6258:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d625c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d625e:	4605      	mov	r5, r0
   d6260:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6262:	d106      	bne.n	d6272 <_ZN9TCPClient4readEPhj+0x24>
   d6264:	6803      	ldr	r3, [r0, #0]
   d6266:	691b      	ldr	r3, [r3, #16]
   d6268:	4798      	blx	r3
   d626a:	b910      	cbnz	r0, d6272 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d626c:	f04f 34ff 	mov.w	r4, #4294967295
   d6270:	e014      	b.n	d629c <_ZN9TCPClient4readEPhj+0x4e>
   d6272:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6274:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6278:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d627c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d627e:	42bc      	cmp	r4, r7
   d6280:	bf28      	it	cs
   d6282:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6284:	4419      	add	r1, r3
   d6286:	4622      	mov	r2, r4
   d6288:	3104      	adds	r1, #4
   d628a:	4630      	mov	r0, r6
   d628c:	f001 f936 	bl	d74fc <memcpy>
   d6290:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6292:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6296:	4423      	add	r3, r4
   d6298:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d629c:	4620      	mov	r0, r4
   d629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62a0 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d62a0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d62a2:	2300      	movs	r3, #0
   d62a4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d62a8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d62aa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d62ae:	4770      	bx	lr

000d62b0 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62b4:	4698      	mov	r8, r3
    stop();
   d62b6:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62b8:	460d      	mov	r5, r1
   d62ba:	b08a      	sub	sp, #40	; 0x28
    stop();
   d62bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d62be:	4606      	mov	r6, r0
   d62c0:	4617      	mov	r7, r2
    stop();
   d62c2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d62c4:	7d2b      	ldrb	r3, [r5, #20]
   d62c6:	6974      	ldr	r4, [r6, #20]
   d62c8:	2b04      	cmp	r3, #4
   d62ca:	bf0c      	ite	eq
   d62cc:	2002      	moveq	r0, #2
   d62ce:	200a      	movne	r0, #10
   d62d0:	2206      	movs	r2, #6
   d62d2:	2101      	movs	r1, #1
   d62d4:	f7ff f86e 	bl	d53b4 <sock_socket>
   d62d8:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d62da:	6973      	ldr	r3, [r6, #20]
   d62dc:	681c      	ldr	r4, [r3, #0]
   d62de:	2c00      	cmp	r4, #0
   d62e0:	db5b      	blt.n	d639a <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d62e2:	4630      	mov	r0, r6
   d62e4:	f7ff ffdc 	bl	d62a0 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d62e8:	f1b8 0f00 	cmp.w	r8, #0
   d62ec:	d017      	beq.n	d631e <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d62ee:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d62f0:	a903      	add	r1, sp, #12
   d62f2:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d62f6:	9303      	str	r3, [sp, #12]
   d62f8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d62fc:	f7fe ff62 	bl	d51c4 <if_index_to_name>
   d6300:	2800      	cmp	r0, #0
   d6302:	db49      	blt.n	d6398 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d6304:	6970      	ldr	r0, [r6, #20]
   d6306:	2306      	movs	r3, #6
   d6308:	9300      	str	r3, [sp, #0]
   d630a:	f241 020b 	movw	r2, #4107	; 0x100b
   d630e:	ab03      	add	r3, sp, #12
   d6310:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6314:	6800      	ldr	r0, [r0, #0]
   d6316:	f7ff f825 	bl	d5364 <sock_setsockopt>
   d631a:	2800      	cmp	r0, #0
   d631c:	db3c      	blt.n	d6398 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d631e:	241c      	movs	r4, #28
   d6320:	4622      	mov	r2, r4
   d6322:	2100      	movs	r1, #0
   d6324:	a803      	add	r0, sp, #12
   d6326:	f001 f8f4 	bl	d7512 <memset>
    if (ip.version() == 4) {
   d632a:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d632c:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6330:	2b04      	cmp	r3, #4
   d6332:	d10c      	bne.n	d634e <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6334:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6336:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6338:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d633c:	f7fe ff92 	bl	d5264 <inet_htons>
   d6340:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6344:	6868      	ldr	r0, [r5, #4]
   d6346:	f7fe ff85 	bl	d5254 <inet_htonl>
   d634a:	9004      	str	r0, [sp, #16]
   d634c:	e013      	b.n	d6376 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d634e:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6350:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6352:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6356:	f7fe ff85 	bl	d5264 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d635a:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d635c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6360:	1d2b      	adds	r3, r5, #4
   d6362:	f105 0714 	add.w	r7, r5, #20
   d6366:	6818      	ldr	r0, [r3, #0]
   d6368:	6859      	ldr	r1, [r3, #4]
   d636a:	4622      	mov	r2, r4
   d636c:	c203      	stmia	r2!, {r0, r1}
   d636e:	3308      	adds	r3, #8
   d6370:	42bb      	cmp	r3, r7
   d6372:	4614      	mov	r4, r2
   d6374:	d1f7      	bne.n	d6366 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d6376:	6973      	ldr	r3, [r6, #20]
   d6378:	221c      	movs	r2, #28
   d637a:	a903      	add	r1, sp, #12
   d637c:	6818      	ldr	r0, [r3, #0]
   d637e:	f7ff f801 	bl	d5384 <sock_connect>
   d6382:	2800      	cmp	r0, #0
   d6384:	db08      	blt.n	d6398 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d6386:	1d2c      	adds	r4, r5, #4
   d6388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d638a:	6976      	ldr	r6, [r6, #20]
   d638c:	368c      	adds	r6, #140	; 0x8c
   d638e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6390:	6823      	ldr	r3, [r4, #0]
   d6392:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d6394:	2401      	movs	r4, #1
   d6396:	e004      	b.n	d63a2 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d6398:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d639a:	6833      	ldr	r3, [r6, #0]
   d639c:	4630      	mov	r0, r6
   d639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63a0:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d63a2:	4620      	mov	r0, r4
   d63a4:	b00a      	add	sp, #40	; 0x28
   d63a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d63aa <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d63aa:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d63ac:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d63ae:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d63b0:	6818      	ldr	r0, [r3, #0]
   d63b2:	2800      	cmp	r0, #0
   d63b4:	db01      	blt.n	d63ba <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d63b6:	f7fe ffdd 	bl	d5374 <sock_close>
   d63ba:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d63bc:	f04f 32ff 	mov.w	r2, #4294967295
   d63c0:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d63c2:	6960      	ldr	r0, [r4, #20]
   d63c4:	2211      	movs	r2, #17
   d63c6:	2100      	movs	r1, #0
   d63c8:	308c      	adds	r0, #140	; 0x8c
   d63ca:	f001 f8a2 	bl	d7512 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d63ce:	4620      	mov	r0, r4
}
   d63d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d63d4:	f7ff bf64 	b.w	d62a0 <_ZN9TCPClient12flush_bufferEv>

000d63d8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d63d8:	b530      	push	{r4, r5, lr}
   d63da:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d63dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d63e0:	b08b      	sub	sp, #44	; 0x2c
   d63e2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d63e4:	b11b      	cbz	r3, d63ee <_ZN9TCPClient9availableEv+0x16>
   d63e6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d63ea:	429a      	cmp	r2, r3
   d63ec:	d040      	beq.n	d6470 <_ZN9TCPClient9availableEv+0x98>
   d63ee:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d63f0:	6818      	ldr	r0, [r3, #0]
   d63f2:	2800      	cmp	r0, #0
   d63f4:	db3f      	blt.n	d6476 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d63f6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d63fa:	2d7f      	cmp	r5, #127	; 0x7f
   d63fc:	d83b      	bhi.n	d6476 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d63fe:	1d19      	adds	r1, r3, #4
   d6400:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6404:	2308      	movs	r3, #8
   d6406:	4429      	add	r1, r5
   d6408:	f7fe ffc4 	bl	d5394 <sock_recv>
            if (ret > 0) {
   d640c:	2800      	cmp	r0, #0
   d640e:	dd0c      	ble.n	d642a <_ZN9TCPClient9availableEv+0x52>
   d6410:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6412:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6416:	b90a      	cbnz	r2, d641c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6418:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d641c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d641e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6422:	4418      	add	r0, r3
   d6424:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6428:	e025      	b.n	d6476 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d642a:	f7ff f8a7 	bl	d557c <__errno>
   d642e:	6803      	ldr	r3, [r0, #0]
   d6430:	2b0b      	cmp	r3, #11
   d6432:	d020      	beq.n	d6476 <_ZN9TCPClient9availableEv+0x9e>
   d6434:	f7ff f8a2 	bl	d557c <__errno>
   d6438:	6803      	ldr	r3, [r0, #0]
   d643a:	2b0b      	cmp	r3, #11
   d643c:	d01b      	beq.n	d6476 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d643e:	2320      	movs	r3, #32
   d6440:	2500      	movs	r5, #0
   d6442:	9302      	str	r3, [sp, #8]
   d6444:	9503      	str	r5, [sp, #12]
   d6446:	f7ff f899 	bl	d557c <__errno>
   d644a:	6803      	ldr	r3, [r0, #0]
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	4b0e      	ldr	r3, [pc, #56]	; (d6488 <_ZN9TCPClient9availableEv+0xb0>)
   d6450:	9300      	str	r3, [sp, #0]
   d6452:	aa02      	add	r2, sp, #8
   d6454:	462b      	mov	r3, r5
   d6456:	490d      	ldr	r1, [pc, #52]	; (d648c <_ZN9TCPClient9availableEv+0xb4>)
   d6458:	2032      	movs	r0, #50	; 0x32
   d645a:	f7fe ffeb 	bl	d5434 <log_message>
                    sock_close(d_->sock);
   d645e:	6963      	ldr	r3, [r4, #20]
   d6460:	6818      	ldr	r0, [r3, #0]
   d6462:	f7fe ff87 	bl	d5374 <sock_close>
   d6466:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6468:	f04f 32ff 	mov.w	r2, #4294967295
   d646c:	601a      	str	r2, [r3, #0]
   d646e:	e002      	b.n	d6476 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6470:	f7ff ff16 	bl	d62a0 <_ZN9TCPClient12flush_bufferEv>
   d6474:	e7bb      	b.n	d63ee <_ZN9TCPClient9availableEv+0x16>
   d6476:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6478:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d647c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6480:	1a18      	subs	r0, r3, r0
}
   d6482:	b00b      	add	sp, #44	; 0x2c
   d6484:	bd30      	pop	{r4, r5, pc}
   d6486:	bf00      	nop
   d6488:	000d7efb 	.word	0x000d7efb
   d648c:	000d7ef4 	.word	0x000d7ef4

000d6490 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6490:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6492:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6494:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6496:	6001      	str	r1, [r0, #0]
   d6498:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d649c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d64a0:	3088      	adds	r0, #136	; 0x88
   d64a2:	f7ff fb33 	bl	d5b0c <_ZN9IPAddressC1Ev>
}
   d64a6:	4620      	mov	r0, r4
   d64a8:	bd10      	pop	{r4, pc}
	...

000d64ac <_ZN9TCPClientC1Ei>:
   d64ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d64b0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d64b2:	2300      	movs	r3, #0
   d64b4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d64b6:	4a14      	ldr	r2, [pc, #80]	; (d6508 <_ZN9TCPClientC1Ei+0x5c>)
   d64b8:	6043      	str	r3, [r0, #4]
   d64ba:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d64bc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d64be:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d64c0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64c2:	20a0      	movs	r0, #160	; 0xa0
   d64c4:	460e      	mov	r6, r1
   d64c6:	f7fd fde6 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d64ca:	4605      	mov	r5, r0
   d64cc:	b110      	cbz	r0, d64d4 <_ZN9TCPClientC1Ei+0x28>
   d64ce:	4631      	mov	r1, r6
   d64d0:	f7ff ffde 	bl	d6490 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d64d4:	2014      	movs	r0, #20
   d64d6:	f7fd fdde 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d64da:	4603      	mov	r3, r0
   d64dc:	b128      	cbz	r0, d64ea <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d64de:	2201      	movs	r2, #1
   d64e0:	6042      	str	r2, [r0, #4]
   d64e2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d64e4:	4a09      	ldr	r2, [pc, #36]	; (d650c <_ZN9TCPClientC1Ei+0x60>)
   d64e6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d64e8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d64ea:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d64ec:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64ee:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d64f0:	b128      	cbz	r0, d64fe <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d64f2:	6843      	ldr	r3, [r0, #4]
   d64f4:	3b01      	subs	r3, #1
   d64f6:	6043      	str	r3, [r0, #4]
   d64f8:	b90b      	cbnz	r3, d64fe <_ZN9TCPClientC1Ei+0x52>
   d64fa:	f7ff fe57 	bl	d61ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d64fe:	4620      	mov	r0, r4
   d6500:	f7ff fece 	bl	d62a0 <_ZN9TCPClient12flush_bufferEv>
}
   d6504:	4620      	mov	r0, r4
   d6506:	bd70      	pop	{r4, r5, r6, pc}
   d6508:	000d7eb0 	.word	0x000d7eb0
   d650c:	000d7e94 	.word	0x000d7e94

000d6510 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6510:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6512:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6516:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6518:	f7ff ffc8 	bl	d64ac <_ZN9TCPClientC1Ei>
}
   d651c:	4620      	mov	r0, r4
   d651e:	bd10      	pop	{r4, pc}

000d6520 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6520:	b510      	push	{r4, lr}
   d6522:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6524:	6800      	ldr	r0, [r0, #0]
   d6526:	2800      	cmp	r0, #0
   d6528:	db01      	blt.n	d652e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d652a:	f7fe ff23 	bl	d5374 <sock_close>
    }
}
   d652e:	4620      	mov	r0, r4
   d6530:	bd10      	pop	{r4, pc}

000d6532 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6532:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6534:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6536:	4620      	mov	r0, r4
   d6538:	f7ff fff2 	bl	d6520 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d653c:	b124      	cbz	r4, d6548 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d653e:	4620      	mov	r0, r4
   d6540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6544:	f7fd bda9 	b.w	d409a <_ZdlPv>
   d6548:	bd10      	pop	{r4, pc}

000d654a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d654a:	2200      	movs	r2, #0
   d654c:	4611      	mov	r1, r2
   d654e:	6840      	ldr	r0, [r0, #4]
   d6550:	f7fe bfb4 	b.w	d54bc <network_ready>

000d6554 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6554:	2200      	movs	r2, #0
   d6556:	4611      	mov	r1, r2
   d6558:	6840      	ldr	r0, [r0, #4]
   d655a:	f7fe bfcf 	b.w	d54fc <network_listening>

000d655e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d655e:	2200      	movs	r2, #0
   d6560:	4611      	mov	r1, r2
   d6562:	6840      	ldr	r0, [r0, #4]
   d6564:	f7fe bfda 	b.w	d551c <network_get_listen_timeout>

000d6568 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6568:	2200      	movs	r2, #0
   d656a:	6840      	ldr	r0, [r0, #4]
   d656c:	f7fe bfce 	b.w	d550c <network_set_listen_timeout>

000d6570 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6570:	2200      	movs	r2, #0
   d6572:	f081 0101 	eor.w	r1, r1, #1
   d6576:	6840      	ldr	r0, [r0, #4]
   d6578:	f7fe bfb8 	b.w	d54ec <network_listen>

000d657c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d657c:	2300      	movs	r3, #0
   d657e:	461a      	mov	r2, r3
   d6580:	4619      	mov	r1, r3
   d6582:	6840      	ldr	r0, [r0, #4]
   d6584:	f7fe bfaa 	b.w	d54dc <network_off>

000d6588 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6588:	2300      	movs	r3, #0
   d658a:	461a      	mov	r2, r3
   d658c:	4619      	mov	r1, r3
   d658e:	6840      	ldr	r0, [r0, #4]
   d6590:	f7fe bf9c 	b.w	d54cc <network_on>

000d6594 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6594:	2200      	movs	r2, #0
   d6596:	4611      	mov	r1, r2
   d6598:	6840      	ldr	r0, [r0, #4]
   d659a:	f7fe bf7f 	b.w	d549c <network_connecting>

000d659e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d659e:	2200      	movs	r2, #0
   d65a0:	2102      	movs	r1, #2
   d65a2:	6840      	ldr	r0, [r0, #4]
   d65a4:	f7fe bf82 	b.w	d54ac <network_disconnect>

000d65a8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d65a8:	2300      	movs	r3, #0
   d65aa:	461a      	mov	r2, r3
   d65ac:	6840      	ldr	r0, [r0, #4]
   d65ae:	f7fe bf6d 	b.w	d548c <network_connect>
	...

000d65b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d65b4:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d65b6:	2204      	movs	r2, #4
   d65b8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d65ba:	4a02      	ldr	r2, [pc, #8]	; (d65c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d65bc:	601a      	str	r2, [r3, #0]
   d65be:	4770      	bx	lr
   d65c0:	2003e704 	.word	0x2003e704
   d65c4:	000d7f14 	.word	0x000d7f14

000d65c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d65c8:	2300      	movs	r3, #0
   d65ca:	461a      	mov	r2, r3
   d65cc:	6840      	ldr	r0, [r0, #4]
   d65ce:	f7fe bf5d 	b.w	d548c <network_connect>

000d65d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d65d2:	2200      	movs	r2, #0
   d65d4:	2102      	movs	r1, #2
   d65d6:	6840      	ldr	r0, [r0, #4]
   d65d8:	f7fe bf68 	b.w	d54ac <network_disconnect>

000d65dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d65dc:	2200      	movs	r2, #0
   d65de:	4611      	mov	r1, r2
   d65e0:	6840      	ldr	r0, [r0, #4]
   d65e2:	f7fe bf5b 	b.w	d549c <network_connecting>

000d65e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d65e6:	2200      	movs	r2, #0
   d65e8:	4611      	mov	r1, r2
   d65ea:	6840      	ldr	r0, [r0, #4]
   d65ec:	f7fe bf66 	b.w	d54bc <network_ready>

000d65f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d65f0:	2300      	movs	r3, #0
   d65f2:	461a      	mov	r2, r3
   d65f4:	4619      	mov	r1, r3
   d65f6:	6840      	ldr	r0, [r0, #4]
   d65f8:	f7fe bf68 	b.w	d54cc <network_on>

000d65fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d65fc:	2300      	movs	r3, #0
   d65fe:	461a      	mov	r2, r3
   d6600:	4619      	mov	r1, r3
   d6602:	6840      	ldr	r0, [r0, #4]
   d6604:	f7fe bf6a 	b.w	d54dc <network_off>

000d6608 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6608:	2200      	movs	r2, #0
   d660a:	f081 0101 	eor.w	r1, r1, #1
   d660e:	6840      	ldr	r0, [r0, #4]
   d6610:	f7fe bf6c 	b.w	d54ec <network_listen>

000d6614 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6614:	2200      	movs	r2, #0
   d6616:	6840      	ldr	r0, [r0, #4]
   d6618:	f7fe bf78 	b.w	d550c <network_set_listen_timeout>

000d661c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d661c:	2200      	movs	r2, #0
   d661e:	4611      	mov	r1, r2
   d6620:	6840      	ldr	r0, [r0, #4]
   d6622:	f7fe bf7b 	b.w	d551c <network_get_listen_timeout>

000d6626 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6626:	2200      	movs	r2, #0
   d6628:	4611      	mov	r1, r2
   d662a:	6840      	ldr	r0, [r0, #4]
   d662c:	f7fe bf66 	b.w	d54fc <network_listening>

000d6630 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6634:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6636:	b095      	sub	sp, #84	; 0x54
   d6638:	4616      	mov	r6, r2
   d663a:	460d      	mov	r5, r1
   d663c:	4607      	mov	r7, r0
    IPAddress addr;
   d663e:	f7ff fa65 	bl	d5b0c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6642:	4621      	mov	r1, r4
   d6644:	2220      	movs	r2, #32
   d6646:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6648:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d664a:	f000 ff62 	bl	d7512 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d664e:	2340      	movs	r3, #64	; 0x40
   d6650:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6652:	4621      	mov	r1, r4
   d6654:	466b      	mov	r3, sp
   d6656:	aa0c      	add	r2, sp, #48	; 0x30
   d6658:	4630      	mov	r0, r6
   d665a:	f7fe fd53 	bl	d5104 <netdb_getaddrinfo>
    if (!r) {
   d665e:	4604      	mov	r4, r0
   d6660:	2800      	cmp	r0, #0
   d6662:	d144      	bne.n	d66ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6664:	4602      	mov	r2, r0
   d6666:	2101      	movs	r1, #1
   d6668:	6868      	ldr	r0, [r5, #4]
   d666a:	f7fe ff27 	bl	d54bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d666e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6670:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6672:	4622      	mov	r2, r4
   d6674:	6868      	ldr	r0, [r5, #4]
   d6676:	f7fe ff21 	bl	d54bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d667a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d667c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d667e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6680:	2e00      	cmp	r6, #0
   d6682:	d034      	beq.n	d66ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6684:	2900      	cmp	r1, #0
   d6686:	d132      	bne.n	d66ee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6688:	6873      	ldr	r3, [r6, #4]
   d668a:	2b02      	cmp	r3, #2
   d668c:	d002      	beq.n	d6694 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d668e:	2b0a      	cmp	r3, #10
   d6690:	d009      	beq.n	d66a6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6692:	e02a      	b.n	d66ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6694:	f1b8 0f00 	cmp.w	r8, #0
   d6698:	d027      	beq.n	d66ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d669a:	6971      	ldr	r1, [r6, #20]
   d669c:	4638      	mov	r0, r7
   d669e:	3104      	adds	r1, #4
   d66a0:	f7ff fa84 	bl	d5bac <_ZN9IPAddressaSEPKh>
   d66a4:	e020      	b.n	d66e8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d66a6:	f1b9 0f00 	cmp.w	r9, #0
   d66aa:	d01e      	beq.n	d66ea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d66ac:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d66ae:	2211      	movs	r2, #17
   d66b0:	a801      	add	r0, sp, #4
   d66b2:	f000 ff2e 	bl	d7512 <memset>
                    a.v = 6;
   d66b6:	2306      	movs	r3, #6
   d66b8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d66bc:	ad01      	add	r5, sp, #4
   d66be:	f104 0308 	add.w	r3, r4, #8
   d66c2:	3418      	adds	r4, #24
   d66c4:	6818      	ldr	r0, [r3, #0]
   d66c6:	6859      	ldr	r1, [r3, #4]
   d66c8:	462a      	mov	r2, r5
   d66ca:	c203      	stmia	r2!, {r0, r1}
   d66cc:	3308      	adds	r3, #8
   d66ce:	42a3      	cmp	r3, r4
   d66d0:	4615      	mov	r5, r2
   d66d2:	d1f7      	bne.n	d66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d66d4:	a901      	add	r1, sp, #4
   d66d6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d66d8:	ad07      	add	r5, sp, #28
   d66da:	f7ff fa25 	bl	d5b28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d66de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66e0:	1d3c      	adds	r4, r7, #4
   d66e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66e4:	682b      	ldr	r3, [r5, #0]
   d66e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d66e8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d66ea:	69f6      	ldr	r6, [r6, #28]
   d66ec:	e7c8      	b.n	d6680 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d66ee:	9800      	ldr	r0, [sp, #0]
   d66f0:	f7fe fd00 	bl	d50f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d66f4:	4638      	mov	r0, r7
   d66f6:	b015      	add	sp, #84	; 0x54
   d66f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d66fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d66fc:	4b02      	ldr	r3, [pc, #8]	; (d6708 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d66fe:	4a03      	ldr	r2, [pc, #12]	; (d670c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6700:	601a      	str	r2, [r3, #0]
   d6702:	2200      	movs	r2, #0
   d6704:	605a      	str	r2, [r3, #4]
   d6706:	4770      	bx	lr
   d6708:	2003e70c 	.word	0x2003e70c
   d670c:	000d7f48 	.word	0x000d7f48

000d6710 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6710:	b510      	push	{r4, lr}
   d6712:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6714:	480f      	ldr	r0, [pc, #60]	; (d6754 <pinAvailable+0x44>)
   d6716:	f7fe ff93 	bl	d5640 <_ZN8SPIClass9isEnabledEv>
   d671a:	b128      	cbz	r0, d6728 <pinAvailable+0x18>
   d671c:	f1a4 030b 	sub.w	r3, r4, #11
   d6720:	2b02      	cmp	r3, #2
   d6722:	d801      	bhi.n	d6728 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6724:	2000      	movs	r0, #0
   d6726:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6728:	f000 f8b2 	bl	d6890 <_Z19__fetch_global_Wirev>
   d672c:	f7ff fb92 	bl	d5e54 <_ZN7TwoWire9isEnabledEv>
   d6730:	b108      	cbz	r0, d6736 <pinAvailable+0x26>
   d6732:	2c01      	cmp	r4, #1
   d6734:	d9f6      	bls.n	d6724 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6736:	f7ff fb29 	bl	d5d8c <_Z22__fetch_global_Serial1v>
   d673a:	f7ff fb23 	bl	d5d84 <_ZN11USARTSerial9isEnabledEv>
   d673e:	b118      	cbz	r0, d6748 <pinAvailable+0x38>
   d6740:	f1a4 0309 	sub.w	r3, r4, #9
   d6744:	2b01      	cmp	r3, #1
   d6746:	d9ed      	bls.n	d6724 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6748:	2c23      	cmp	r4, #35	; 0x23
   d674a:	bf8c      	ite	hi
   d674c:	2000      	movhi	r0, #0
   d674e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6750:	bd10      	pop	{r4, pc}
   d6752:	bf00      	nop
   d6754:	2003e714 	.word	0x2003e714

000d6758 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6758:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d675a:	b538      	push	{r3, r4, r5, lr}
   d675c:	4604      	mov	r4, r0
   d675e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6760:	d80a      	bhi.n	d6778 <pinMode+0x20>
   d6762:	29ff      	cmp	r1, #255	; 0xff
   d6764:	d008      	beq.n	d6778 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6766:	f7ff ffd3 	bl	d6710 <pinAvailable>
   d676a:	b128      	cbz	r0, d6778 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d676c:	4629      	mov	r1, r5
   d676e:	4620      	mov	r0, r4
}
   d6770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6774:	f7fe bcde 	b.w	d5134 <HAL_Pin_Mode>
   d6778:	bd38      	pop	{r3, r4, r5, pc}

000d677a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d677a:	b538      	push	{r3, r4, r5, lr}
   d677c:	4604      	mov	r4, r0
   d677e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6780:	f7fe fce0 	bl	d5144 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6784:	28ff      	cmp	r0, #255	; 0xff
   d6786:	d010      	beq.n	d67aa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6788:	2806      	cmp	r0, #6
   d678a:	d804      	bhi.n	d6796 <digitalWrite+0x1c>
   d678c:	234d      	movs	r3, #77	; 0x4d
   d678e:	fa23 f000 	lsr.w	r0, r3, r0
   d6792:	07c3      	lsls	r3, r0, #31
   d6794:	d409      	bmi.n	d67aa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6796:	4620      	mov	r0, r4
   d6798:	f7ff ffba 	bl	d6710 <pinAvailable>
   d679c:	b128      	cbz	r0, d67aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d679e:	4629      	mov	r1, r5
   d67a0:	4620      	mov	r0, r4
}
   d67a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d67a6:	f7fe bcd5 	b.w	d5154 <HAL_GPIO_Write>
   d67aa:	bd38      	pop	{r3, r4, r5, pc}

000d67ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d67ac:	b510      	push	{r4, lr}
   d67ae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d67b0:	f7fe fcc8 	bl	d5144 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d67b4:	3804      	subs	r0, #4
   d67b6:	b2c0      	uxtb	r0, r0
   d67b8:	2801      	cmp	r0, #1
   d67ba:	d908      	bls.n	d67ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d67bc:	4620      	mov	r0, r4
   d67be:	f7ff ffa7 	bl	d6710 <pinAvailable>
   d67c2:	b120      	cbz	r0, d67ce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d67c4:	4620      	mov	r0, r4
}
   d67c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d67ca:	f7fe bccb 	b.w	d5164 <HAL_GPIO_Read>
}
   d67ce:	2000      	movs	r0, #0
   d67d0:	bd10      	pop	{r4, pc}

000d67d2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d67d2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d67d4:	b510      	push	{r4, lr}
   d67d6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d67d8:	bf9c      	itt	ls
   d67da:	340e      	addls	r4, #14
   d67dc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d67de:	4620      	mov	r0, r4
   d67e0:	f7ff ff96 	bl	d6710 <pinAvailable>
   d67e4:	b150      	cbz	r0, d67fc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d67e6:	2103      	movs	r1, #3
   d67e8:	4620      	mov	r0, r4
   d67ea:	f7fe fc9b 	bl	d5124 <HAL_Validate_Pin_Function>
   d67ee:	2803      	cmp	r0, #3
   d67f0:	d104      	bne.n	d67fc <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d67f2:	4620      	mov	r0, r4
}
   d67f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d67f8:	f7fe bcc4 	b.w	d5184 <HAL_ADC_Read>
}
   d67fc:	2000      	movs	r0, #0
   d67fe:	bd10      	pop	{r4, pc}

000d6800 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6800:	b538      	push	{r3, r4, r5, lr}
   d6802:	4604      	mov	r4, r0
   d6804:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6806:	f7ff ff83 	bl	d6710 <pinAvailable>
   d680a:	b1f0      	cbz	r0, d684a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d680c:	2104      	movs	r1, #4
   d680e:	4620      	mov	r0, r4
   d6810:	f7fe fc88 	bl	d5124 <HAL_Validate_Pin_Function>
   d6814:	2804      	cmp	r0, #4
   d6816:	d105      	bne.n	d6824 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6818:	b2a9      	uxth	r1, r5
   d681a:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d681c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d6820:	f7fe bca8 	b.w	d5174 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6824:	2102      	movs	r1, #2
   d6826:	4620      	mov	r0, r4
   d6828:	f7fe fc7c 	bl	d5124 <HAL_Validate_Pin_Function>
   d682c:	2802      	cmp	r0, #2
   d682e:	d10c      	bne.n	d684a <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6830:	4620      	mov	r0, r4
   d6832:	f7fe fc87 	bl	d5144 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6836:	2801      	cmp	r0, #1
   d6838:	d001      	beq.n	d683e <_Z11analogWritetm+0x3e>
   d683a:	2804      	cmp	r0, #4
   d683c:	d105      	bne.n	d684a <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d683e:	4629      	mov	r1, r5
   d6840:	4620      	mov	r0, r4
    }
}
   d6842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6846:	f7fe bca5 	b.w	d5194 <HAL_PWM_Write_Ext>
   d684a:	bd38      	pop	{r3, r4, r5, pc}

000d684c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d684c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d684e:	4c0c      	ldr	r4, [pc, #48]	; (d6880 <_GLOBAL__sub_I_SPI+0x34>)
   d6850:	4e0c      	ldr	r6, [pc, #48]	; (d6884 <_GLOBAL__sub_I_SPI+0x38>)
   d6852:	4d0d      	ldr	r5, [pc, #52]	; (d6888 <_GLOBAL__sub_I_SPI+0x3c>)
   d6854:	2100      	movs	r1, #0
   d6856:	4620      	mov	r0, r4
   d6858:	f7fe fede 	bl	d5618 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d685c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d685e:	4c0b      	ldr	r4, [pc, #44]	; (d688c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6860:	4632      	mov	r2, r6
   d6862:	4629      	mov	r1, r5
   d6864:	f000 f834 	bl	d68d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6868:	2101      	movs	r1, #1
   d686a:	4620      	mov	r0, r4
   d686c:	f7fe fed4 	bl	d5618 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6870:	4632      	mov	r2, r6
   d6872:	4629      	mov	r1, r5
   d6874:	4620      	mov	r0, r4
   d6876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d687a:	f000 b829 	b.w	d68d0 <__aeabi_atexit>
   d687e:	bf00      	nop
   d6880:	2003e714 	.word	0x2003e714
   d6884:	2003e318 	.word	0x2003e318
   d6888:	000d5609 	.word	0x000d5609
   d688c:	2003e724 	.word	0x2003e724

000d6890 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6890:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6892:	4d0b      	ldr	r5, [pc, #44]	; (d68c0 <_Z19__fetch_global_Wirev+0x30>)
   d6894:	6829      	ldr	r1, [r5, #0]
   d6896:	f011 0401 	ands.w	r4, r1, #1
   d689a:	d10f      	bne.n	d68bc <_Z19__fetch_global_Wirev+0x2c>
   d689c:	4628      	mov	r0, r5
   d689e:	f7fd fc00 	bl	d40a2 <__cxa_guard_acquire>
   d68a2:	b158      	cbz	r0, d68bc <_Z19__fetch_global_Wirev+0x2c>
   d68a4:	4621      	mov	r1, r4
   d68a6:	4807      	ldr	r0, [pc, #28]	; (d68c4 <_Z19__fetch_global_Wirev+0x34>)
   d68a8:	f7ff fac2 	bl	d5e30 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d68ac:	4628      	mov	r0, r5
   d68ae:	f7fd fbfd 	bl	d40ac <__cxa_guard_release>
   d68b2:	4a05      	ldr	r2, [pc, #20]	; (d68c8 <_Z19__fetch_global_Wirev+0x38>)
   d68b4:	4905      	ldr	r1, [pc, #20]	; (d68cc <_Z19__fetch_global_Wirev+0x3c>)
   d68b6:	4803      	ldr	r0, [pc, #12]	; (d68c4 <_Z19__fetch_global_Wirev+0x34>)
   d68b8:	f000 f80a 	bl	d68d0 <__aeabi_atexit>
	return wire;
}
   d68bc:	4801      	ldr	r0, [pc, #4]	; (d68c4 <_Z19__fetch_global_Wirev+0x34>)
   d68be:	bd38      	pop	{r3, r4, r5, pc}
   d68c0:	2003e738 	.word	0x2003e738
   d68c4:	2003e73c 	.word	0x2003e73c
   d68c8:	2003e318 	.word	0x2003e318
   d68cc:	000d5dd9 	.word	0x000d5dd9

000d68d0 <__aeabi_atexit>:
   d68d0:	460b      	mov	r3, r1
   d68d2:	4601      	mov	r1, r0
   d68d4:	4618      	mov	r0, r3
   d68d6:	f000 be03 	b.w	d74e0 <__cxa_atexit>

000d68da <_ZdlPvj>:
   d68da:	f7fd bbde 	b.w	d409a <_ZdlPv>
	...

000d68e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d68e0:	4b18      	ldr	r3, [pc, #96]	; (d6944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d68e2:	681a      	ldr	r2, [r3, #0]
   d68e4:	07d1      	lsls	r1, r2, #31
   d68e6:	bf5c      	itt	pl
   d68e8:	2201      	movpl	r2, #1
   d68ea:	601a      	strpl	r2, [r3, #0]
   d68ec:	4b16      	ldr	r3, [pc, #88]	; (d6948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d68ee:	681a      	ldr	r2, [r3, #0]
   d68f0:	07d2      	lsls	r2, r2, #31
   d68f2:	bf5c      	itt	pl
   d68f4:	2201      	movpl	r2, #1
   d68f6:	601a      	strpl	r2, [r3, #0]
   d68f8:	4b14      	ldr	r3, [pc, #80]	; (d694c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d68fa:	681a      	ldr	r2, [r3, #0]
   d68fc:	07d0      	lsls	r0, r2, #31
   d68fe:	bf5c      	itt	pl
   d6900:	2201      	movpl	r2, #1
   d6902:	601a      	strpl	r2, [r3, #0]
   d6904:	4b12      	ldr	r3, [pc, #72]	; (d6950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6906:	681a      	ldr	r2, [r3, #0]
   d6908:	07d1      	lsls	r1, r2, #31
   d690a:	bf5c      	itt	pl
   d690c:	2201      	movpl	r2, #1
   d690e:	601a      	strpl	r2, [r3, #0]
   d6910:	4b10      	ldr	r3, [pc, #64]	; (d6954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6912:	681a      	ldr	r2, [r3, #0]
   d6914:	07d2      	lsls	r2, r2, #31
   d6916:	bf5c      	itt	pl
   d6918:	2201      	movpl	r2, #1
   d691a:	601a      	strpl	r2, [r3, #0]
   d691c:	4b0e      	ldr	r3, [pc, #56]	; (d6958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d691e:	681a      	ldr	r2, [r3, #0]
   d6920:	07d0      	lsls	r0, r2, #31
   d6922:	bf5c      	itt	pl
   d6924:	2201      	movpl	r2, #1
   d6926:	601a      	strpl	r2, [r3, #0]
   d6928:	4b0c      	ldr	r3, [pc, #48]	; (d695c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d692a:	681a      	ldr	r2, [r3, #0]
   d692c:	07d1      	lsls	r1, r2, #31
   d692e:	bf5c      	itt	pl
   d6930:	2201      	movpl	r2, #1
   d6932:	601a      	strpl	r2, [r3, #0]
   d6934:	4b0a      	ldr	r3, [pc, #40]	; (d6960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6936:	681a      	ldr	r2, [r3, #0]
   d6938:	07d2      	lsls	r2, r2, #31
   d693a:	bf5c      	itt	pl
   d693c:	2201      	movpl	r2, #1
   d693e:	601a      	strpl	r2, [r3, #0]
   d6940:	4770      	bx	lr
   d6942:	bf00      	nop
   d6944:	2003e76c 	.word	0x2003e76c
   d6948:	2003e768 	.word	0x2003e768
   d694c:	2003e764 	.word	0x2003e764
   d6950:	2003e760 	.word	0x2003e760
   d6954:	2003e75c 	.word	0x2003e75c
   d6958:	2003e758 	.word	0x2003e758
   d695c:	2003e754 	.word	0x2003e754
   d6960:	2003e750 	.word	0x2003e750

000d6964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6964:	4b24      	ldr	r3, [pc, #144]	; (d69f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6966:	681a      	ldr	r2, [r3, #0]
   d6968:	07d0      	lsls	r0, r2, #31
   d696a:	bf5c      	itt	pl
   d696c:	2201      	movpl	r2, #1
   d696e:	601a      	strpl	r2, [r3, #0]
   d6970:	4b22      	ldr	r3, [pc, #136]	; (d69fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6972:	681a      	ldr	r2, [r3, #0]
   d6974:	07d1      	lsls	r1, r2, #31
   d6976:	bf5c      	itt	pl
   d6978:	2201      	movpl	r2, #1
   d697a:	601a      	strpl	r2, [r3, #0]
   d697c:	4b20      	ldr	r3, [pc, #128]	; (d6a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d697e:	681a      	ldr	r2, [r3, #0]
   d6980:	07d2      	lsls	r2, r2, #31
   d6982:	bf5c      	itt	pl
   d6984:	2201      	movpl	r2, #1
   d6986:	601a      	strpl	r2, [r3, #0]
   d6988:	4b1e      	ldr	r3, [pc, #120]	; (d6a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d698a:	681a      	ldr	r2, [r3, #0]
   d698c:	07d0      	lsls	r0, r2, #31
   d698e:	bf5c      	itt	pl
   d6990:	2201      	movpl	r2, #1
   d6992:	601a      	strpl	r2, [r3, #0]
   d6994:	4b1c      	ldr	r3, [pc, #112]	; (d6a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6996:	681a      	ldr	r2, [r3, #0]
   d6998:	07d1      	lsls	r1, r2, #31
   d699a:	bf5c      	itt	pl
   d699c:	2201      	movpl	r2, #1
   d699e:	601a      	strpl	r2, [r3, #0]
   d69a0:	4b1a      	ldr	r3, [pc, #104]	; (d6a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d69a2:	681a      	ldr	r2, [r3, #0]
   d69a4:	07d2      	lsls	r2, r2, #31
   d69a6:	bf5c      	itt	pl
   d69a8:	2201      	movpl	r2, #1
   d69aa:	601a      	strpl	r2, [r3, #0]
   d69ac:	4b18      	ldr	r3, [pc, #96]	; (d6a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d69ae:	681a      	ldr	r2, [r3, #0]
   d69b0:	07d0      	lsls	r0, r2, #31
   d69b2:	bf5c      	itt	pl
   d69b4:	2201      	movpl	r2, #1
   d69b6:	601a      	strpl	r2, [r3, #0]
   d69b8:	4b16      	ldr	r3, [pc, #88]	; (d6a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d69ba:	681a      	ldr	r2, [r3, #0]
   d69bc:	07d1      	lsls	r1, r2, #31
   d69be:	bf5c      	itt	pl
   d69c0:	2201      	movpl	r2, #1
   d69c2:	601a      	strpl	r2, [r3, #0]
   d69c4:	4b14      	ldr	r3, [pc, #80]	; (d6a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d69c6:	681a      	ldr	r2, [r3, #0]
   d69c8:	07d2      	lsls	r2, r2, #31
   d69ca:	bf5c      	itt	pl
   d69cc:	2201      	movpl	r2, #1
   d69ce:	601a      	strpl	r2, [r3, #0]
   d69d0:	4b12      	ldr	r3, [pc, #72]	; (d6a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d69d2:	681a      	ldr	r2, [r3, #0]
   d69d4:	07d0      	lsls	r0, r2, #31
   d69d6:	bf5c      	itt	pl
   d69d8:	2201      	movpl	r2, #1
   d69da:	601a      	strpl	r2, [r3, #0]
   d69dc:	4b10      	ldr	r3, [pc, #64]	; (d6a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d69de:	681a      	ldr	r2, [r3, #0]
   d69e0:	07d1      	lsls	r1, r2, #31
   d69e2:	bf5c      	itt	pl
   d69e4:	2201      	movpl	r2, #1
   d69e6:	601a      	strpl	r2, [r3, #0]
   d69e8:	4b0e      	ldr	r3, [pc, #56]	; (d6a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d69ea:	681a      	ldr	r2, [r3, #0]
   d69ec:	07d2      	lsls	r2, r2, #31
   d69ee:	bf5c      	itt	pl
   d69f0:	2201      	movpl	r2, #1
   d69f2:	601a      	strpl	r2, [r3, #0]
   d69f4:	4770      	bx	lr
   d69f6:	bf00      	nop
   d69f8:	2003e79c 	.word	0x2003e79c
   d69fc:	2003e798 	.word	0x2003e798
   d6a00:	2003e794 	.word	0x2003e794
   d6a04:	2003e790 	.word	0x2003e790
   d6a08:	2003e78c 	.word	0x2003e78c
   d6a0c:	2003e788 	.word	0x2003e788
   d6a10:	2003e784 	.word	0x2003e784
   d6a14:	2003e780 	.word	0x2003e780
   d6a18:	2003e77c 	.word	0x2003e77c
   d6a1c:	2003e778 	.word	0x2003e778
   d6a20:	2003e774 	.word	0x2003e774
   d6a24:	2003e770 	.word	0x2003e770

000d6a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6a28:	4b24      	ldr	r3, [pc, #144]	; (d6abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6a2a:	681a      	ldr	r2, [r3, #0]
   d6a2c:	07d0      	lsls	r0, r2, #31
   d6a2e:	bf5c      	itt	pl
   d6a30:	2201      	movpl	r2, #1
   d6a32:	601a      	strpl	r2, [r3, #0]
   d6a34:	4b22      	ldr	r3, [pc, #136]	; (d6ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6a36:	681a      	ldr	r2, [r3, #0]
   d6a38:	07d1      	lsls	r1, r2, #31
   d6a3a:	bf5c      	itt	pl
   d6a3c:	2201      	movpl	r2, #1
   d6a3e:	601a      	strpl	r2, [r3, #0]
   d6a40:	4b20      	ldr	r3, [pc, #128]	; (d6ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6a42:	681a      	ldr	r2, [r3, #0]
   d6a44:	07d2      	lsls	r2, r2, #31
   d6a46:	bf5c      	itt	pl
   d6a48:	2201      	movpl	r2, #1
   d6a4a:	601a      	strpl	r2, [r3, #0]
   d6a4c:	4b1e      	ldr	r3, [pc, #120]	; (d6ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6a4e:	681a      	ldr	r2, [r3, #0]
   d6a50:	07d0      	lsls	r0, r2, #31
   d6a52:	bf5c      	itt	pl
   d6a54:	2201      	movpl	r2, #1
   d6a56:	601a      	strpl	r2, [r3, #0]
   d6a58:	4b1c      	ldr	r3, [pc, #112]	; (d6acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6a5a:	681a      	ldr	r2, [r3, #0]
   d6a5c:	07d1      	lsls	r1, r2, #31
   d6a5e:	bf5c      	itt	pl
   d6a60:	2201      	movpl	r2, #1
   d6a62:	601a      	strpl	r2, [r3, #0]
   d6a64:	4b1a      	ldr	r3, [pc, #104]	; (d6ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6a66:	681a      	ldr	r2, [r3, #0]
   d6a68:	07d2      	lsls	r2, r2, #31
   d6a6a:	bf5c      	itt	pl
   d6a6c:	2201      	movpl	r2, #1
   d6a6e:	601a      	strpl	r2, [r3, #0]
   d6a70:	4b18      	ldr	r3, [pc, #96]	; (d6ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	07d0      	lsls	r0, r2, #31
   d6a76:	bf5c      	itt	pl
   d6a78:	2201      	movpl	r2, #1
   d6a7a:	601a      	strpl	r2, [r3, #0]
   d6a7c:	4b16      	ldr	r3, [pc, #88]	; (d6ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6a7e:	681a      	ldr	r2, [r3, #0]
   d6a80:	07d1      	lsls	r1, r2, #31
   d6a82:	bf5c      	itt	pl
   d6a84:	2201      	movpl	r2, #1
   d6a86:	601a      	strpl	r2, [r3, #0]
   d6a88:	4b14      	ldr	r3, [pc, #80]	; (d6adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d2      	lsls	r2, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b12      	ldr	r3, [pc, #72]	; (d6ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d0      	lsls	r0, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b10      	ldr	r3, [pc, #64]	; (d6ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d1      	lsls	r1, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b0e      	ldr	r3, [pc, #56]	; (d6ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d2      	lsls	r2, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4770      	bx	lr
   d6aba:	bf00      	nop
   d6abc:	2003e7cc 	.word	0x2003e7cc
   d6ac0:	2003e7c8 	.word	0x2003e7c8
   d6ac4:	2003e7c4 	.word	0x2003e7c4
   d6ac8:	2003e7c0 	.word	0x2003e7c0
   d6acc:	2003e7bc 	.word	0x2003e7bc
   d6ad0:	2003e7b8 	.word	0x2003e7b8
   d6ad4:	2003e7b4 	.word	0x2003e7b4
   d6ad8:	2003e7b0 	.word	0x2003e7b0
   d6adc:	2003e7ac 	.word	0x2003e7ac
   d6ae0:	2003e7a8 	.word	0x2003e7a8
   d6ae4:	2003e7a4 	.word	0x2003e7a4
   d6ae8:	2003e7a0 	.word	0x2003e7a0

000d6aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6aec:	4b18      	ldr	r3, [pc, #96]	; (d6b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6aee:	681a      	ldr	r2, [r3, #0]
   d6af0:	07d1      	lsls	r1, r2, #31
   d6af2:	bf5c      	itt	pl
   d6af4:	2201      	movpl	r2, #1
   d6af6:	601a      	strpl	r2, [r3, #0]
   d6af8:	4b16      	ldr	r3, [pc, #88]	; (d6b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6afa:	681a      	ldr	r2, [r3, #0]
   d6afc:	07d2      	lsls	r2, r2, #31
   d6afe:	bf5c      	itt	pl
   d6b00:	2201      	movpl	r2, #1
   d6b02:	601a      	strpl	r2, [r3, #0]
   d6b04:	4b14      	ldr	r3, [pc, #80]	; (d6b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b06:	681a      	ldr	r2, [r3, #0]
   d6b08:	07d0      	lsls	r0, r2, #31
   d6b0a:	bf5c      	itt	pl
   d6b0c:	2201      	movpl	r2, #1
   d6b0e:	601a      	strpl	r2, [r3, #0]
   d6b10:	4b12      	ldr	r3, [pc, #72]	; (d6b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b12:	681a      	ldr	r2, [r3, #0]
   d6b14:	07d1      	lsls	r1, r2, #31
   d6b16:	bf5c      	itt	pl
   d6b18:	2201      	movpl	r2, #1
   d6b1a:	601a      	strpl	r2, [r3, #0]
   d6b1c:	4b10      	ldr	r3, [pc, #64]	; (d6b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6b1e:	681a      	ldr	r2, [r3, #0]
   d6b20:	07d2      	lsls	r2, r2, #31
   d6b22:	bf5c      	itt	pl
   d6b24:	2201      	movpl	r2, #1
   d6b26:	601a      	strpl	r2, [r3, #0]
   d6b28:	4b0e      	ldr	r3, [pc, #56]	; (d6b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6b2a:	681a      	ldr	r2, [r3, #0]
   d6b2c:	07d0      	lsls	r0, r2, #31
   d6b2e:	bf5c      	itt	pl
   d6b30:	2201      	movpl	r2, #1
   d6b32:	601a      	strpl	r2, [r3, #0]
   d6b34:	4b0c      	ldr	r3, [pc, #48]	; (d6b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6b36:	681a      	ldr	r2, [r3, #0]
   d6b38:	07d1      	lsls	r1, r2, #31
   d6b3a:	bf5c      	itt	pl
   d6b3c:	2201      	movpl	r2, #1
   d6b3e:	601a      	strpl	r2, [r3, #0]
   d6b40:	4b0a      	ldr	r3, [pc, #40]	; (d6b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6b42:	681a      	ldr	r2, [r3, #0]
   d6b44:	07d2      	lsls	r2, r2, #31
   d6b46:	bf5c      	itt	pl
   d6b48:	2201      	movpl	r2, #1
   d6b4a:	601a      	strpl	r2, [r3, #0]
   d6b4c:	4770      	bx	lr
   d6b4e:	bf00      	nop
   d6b50:	2003e7ec 	.word	0x2003e7ec
   d6b54:	2003e7e8 	.word	0x2003e7e8
   d6b58:	2003e7e4 	.word	0x2003e7e4
   d6b5c:	2003e7e0 	.word	0x2003e7e0
   d6b60:	2003e7dc 	.word	0x2003e7dc
   d6b64:	2003e7d8 	.word	0x2003e7d8
   d6b68:	2003e7d4 	.word	0x2003e7d4
   d6b6c:	2003e7d0 	.word	0x2003e7d0

000d6b70 <__aeabi_drsub>:
   d6b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6b74:	e002      	b.n	d6b7c <__adddf3>
   d6b76:	bf00      	nop

000d6b78 <__aeabi_dsub>:
   d6b78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6b7c <__adddf3>:
   d6b7c:	b530      	push	{r4, r5, lr}
   d6b7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6b82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6b86:	ea94 0f05 	teq	r4, r5
   d6b8a:	bf08      	it	eq
   d6b8c:	ea90 0f02 	teqeq	r0, r2
   d6b90:	bf1f      	itttt	ne
   d6b92:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6b96:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6b9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6b9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ba2:	f000 80e2 	beq.w	d6d6a <__adddf3+0x1ee>
   d6ba6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6baa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6bae:	bfb8      	it	lt
   d6bb0:	426d      	neglt	r5, r5
   d6bb2:	dd0c      	ble.n	d6bce <__adddf3+0x52>
   d6bb4:	442c      	add	r4, r5
   d6bb6:	ea80 0202 	eor.w	r2, r0, r2
   d6bba:	ea81 0303 	eor.w	r3, r1, r3
   d6bbe:	ea82 0000 	eor.w	r0, r2, r0
   d6bc2:	ea83 0101 	eor.w	r1, r3, r1
   d6bc6:	ea80 0202 	eor.w	r2, r0, r2
   d6bca:	ea81 0303 	eor.w	r3, r1, r3
   d6bce:	2d36      	cmp	r5, #54	; 0x36
   d6bd0:	bf88      	it	hi
   d6bd2:	bd30      	pophi	{r4, r5, pc}
   d6bd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6bd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6bdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6be0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6be4:	d002      	beq.n	d6bec <__adddf3+0x70>
   d6be6:	4240      	negs	r0, r0
   d6be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6bec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6bf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6bf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6bf8:	d002      	beq.n	d6c00 <__adddf3+0x84>
   d6bfa:	4252      	negs	r2, r2
   d6bfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c00:	ea94 0f05 	teq	r4, r5
   d6c04:	f000 80a7 	beq.w	d6d56 <__adddf3+0x1da>
   d6c08:	f1a4 0401 	sub.w	r4, r4, #1
   d6c0c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c10:	db0d      	blt.n	d6c2e <__adddf3+0xb2>
   d6c12:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c16:	fa22 f205 	lsr.w	r2, r2, r5
   d6c1a:	1880      	adds	r0, r0, r2
   d6c1c:	f141 0100 	adc.w	r1, r1, #0
   d6c20:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c24:	1880      	adds	r0, r0, r2
   d6c26:	fa43 f305 	asr.w	r3, r3, r5
   d6c2a:	4159      	adcs	r1, r3
   d6c2c:	e00e      	b.n	d6c4c <__adddf3+0xd0>
   d6c2e:	f1a5 0520 	sub.w	r5, r5, #32
   d6c32:	f10e 0e20 	add.w	lr, lr, #32
   d6c36:	2a01      	cmp	r2, #1
   d6c38:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c3c:	bf28      	it	cs
   d6c3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c42:	fa43 f305 	asr.w	r3, r3, r5
   d6c46:	18c0      	adds	r0, r0, r3
   d6c48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6c4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c50:	d507      	bpl.n	d6c62 <__adddf3+0xe6>
   d6c52:	f04f 0e00 	mov.w	lr, #0
   d6c56:	f1dc 0c00 	rsbs	ip, ip, #0
   d6c5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6c5e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6c62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6c66:	d31b      	bcc.n	d6ca0 <__adddf3+0x124>
   d6c68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6c6c:	d30c      	bcc.n	d6c88 <__adddf3+0x10c>
   d6c6e:	0849      	lsrs	r1, r1, #1
   d6c70:	ea5f 0030 	movs.w	r0, r0, rrx
   d6c74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6c78:	f104 0401 	add.w	r4, r4, #1
   d6c7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6c80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6c84:	f080 809a 	bcs.w	d6dbc <__adddf3+0x240>
   d6c88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6c8c:	bf08      	it	eq
   d6c8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c92:	f150 0000 	adcs.w	r0, r0, #0
   d6c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c9a:	ea41 0105 	orr.w	r1, r1, r5
   d6c9e:	bd30      	pop	{r4, r5, pc}
   d6ca0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6ca4:	4140      	adcs	r0, r0
   d6ca6:	eb41 0101 	adc.w	r1, r1, r1
   d6caa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6cae:	f1a4 0401 	sub.w	r4, r4, #1
   d6cb2:	d1e9      	bne.n	d6c88 <__adddf3+0x10c>
   d6cb4:	f091 0f00 	teq	r1, #0
   d6cb8:	bf04      	itt	eq
   d6cba:	4601      	moveq	r1, r0
   d6cbc:	2000      	moveq	r0, #0
   d6cbe:	fab1 f381 	clz	r3, r1
   d6cc2:	bf08      	it	eq
   d6cc4:	3320      	addeq	r3, #32
   d6cc6:	f1a3 030b 	sub.w	r3, r3, #11
   d6cca:	f1b3 0220 	subs.w	r2, r3, #32
   d6cce:	da0c      	bge.n	d6cea <__adddf3+0x16e>
   d6cd0:	320c      	adds	r2, #12
   d6cd2:	dd08      	ble.n	d6ce6 <__adddf3+0x16a>
   d6cd4:	f102 0c14 	add.w	ip, r2, #20
   d6cd8:	f1c2 020c 	rsb	r2, r2, #12
   d6cdc:	fa01 f00c 	lsl.w	r0, r1, ip
   d6ce0:	fa21 f102 	lsr.w	r1, r1, r2
   d6ce4:	e00c      	b.n	d6d00 <__adddf3+0x184>
   d6ce6:	f102 0214 	add.w	r2, r2, #20
   d6cea:	bfd8      	it	le
   d6cec:	f1c2 0c20 	rsble	ip, r2, #32
   d6cf0:	fa01 f102 	lsl.w	r1, r1, r2
   d6cf4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6cf8:	bfdc      	itt	le
   d6cfa:	ea41 010c 	orrle.w	r1, r1, ip
   d6cfe:	4090      	lslle	r0, r2
   d6d00:	1ae4      	subs	r4, r4, r3
   d6d02:	bfa2      	ittt	ge
   d6d04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d08:	4329      	orrge	r1, r5
   d6d0a:	bd30      	popge	{r4, r5, pc}
   d6d0c:	ea6f 0404 	mvn.w	r4, r4
   d6d10:	3c1f      	subs	r4, #31
   d6d12:	da1c      	bge.n	d6d4e <__adddf3+0x1d2>
   d6d14:	340c      	adds	r4, #12
   d6d16:	dc0e      	bgt.n	d6d36 <__adddf3+0x1ba>
   d6d18:	f104 0414 	add.w	r4, r4, #20
   d6d1c:	f1c4 0220 	rsb	r2, r4, #32
   d6d20:	fa20 f004 	lsr.w	r0, r0, r4
   d6d24:	fa01 f302 	lsl.w	r3, r1, r2
   d6d28:	ea40 0003 	orr.w	r0, r0, r3
   d6d2c:	fa21 f304 	lsr.w	r3, r1, r4
   d6d30:	ea45 0103 	orr.w	r1, r5, r3
   d6d34:	bd30      	pop	{r4, r5, pc}
   d6d36:	f1c4 040c 	rsb	r4, r4, #12
   d6d3a:	f1c4 0220 	rsb	r2, r4, #32
   d6d3e:	fa20 f002 	lsr.w	r0, r0, r2
   d6d42:	fa01 f304 	lsl.w	r3, r1, r4
   d6d46:	ea40 0003 	orr.w	r0, r0, r3
   d6d4a:	4629      	mov	r1, r5
   d6d4c:	bd30      	pop	{r4, r5, pc}
   d6d4e:	fa21 f004 	lsr.w	r0, r1, r4
   d6d52:	4629      	mov	r1, r5
   d6d54:	bd30      	pop	{r4, r5, pc}
   d6d56:	f094 0f00 	teq	r4, #0
   d6d5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6d5e:	bf06      	itte	eq
   d6d60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6d64:	3401      	addeq	r4, #1
   d6d66:	3d01      	subne	r5, #1
   d6d68:	e74e      	b.n	d6c08 <__adddf3+0x8c>
   d6d6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6d6e:	bf18      	it	ne
   d6d70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6d74:	d029      	beq.n	d6dca <__adddf3+0x24e>
   d6d76:	ea94 0f05 	teq	r4, r5
   d6d7a:	bf08      	it	eq
   d6d7c:	ea90 0f02 	teqeq	r0, r2
   d6d80:	d005      	beq.n	d6d8e <__adddf3+0x212>
   d6d82:	ea54 0c00 	orrs.w	ip, r4, r0
   d6d86:	bf04      	itt	eq
   d6d88:	4619      	moveq	r1, r3
   d6d8a:	4610      	moveq	r0, r2
   d6d8c:	bd30      	pop	{r4, r5, pc}
   d6d8e:	ea91 0f03 	teq	r1, r3
   d6d92:	bf1e      	ittt	ne
   d6d94:	2100      	movne	r1, #0
   d6d96:	2000      	movne	r0, #0
   d6d98:	bd30      	popne	{r4, r5, pc}
   d6d9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6d9e:	d105      	bne.n	d6dac <__adddf3+0x230>
   d6da0:	0040      	lsls	r0, r0, #1
   d6da2:	4149      	adcs	r1, r1
   d6da4:	bf28      	it	cs
   d6da6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6daa:	bd30      	pop	{r4, r5, pc}
   d6dac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6db0:	bf3c      	itt	cc
   d6db2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6db6:	bd30      	popcc	{r4, r5, pc}
   d6db8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6dbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6dc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6dc4:	f04f 0000 	mov.w	r0, #0
   d6dc8:	bd30      	pop	{r4, r5, pc}
   d6dca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dce:	bf1a      	itte	ne
   d6dd0:	4619      	movne	r1, r3
   d6dd2:	4610      	movne	r0, r2
   d6dd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6dd8:	bf1c      	itt	ne
   d6dda:	460b      	movne	r3, r1
   d6ddc:	4602      	movne	r2, r0
   d6dde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6de2:	bf06      	itte	eq
   d6de4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6de8:	ea91 0f03 	teqeq	r1, r3
   d6dec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6df0:	bd30      	pop	{r4, r5, pc}
   d6df2:	bf00      	nop

000d6df4 <__aeabi_ui2d>:
   d6df4:	f090 0f00 	teq	r0, #0
   d6df8:	bf04      	itt	eq
   d6dfa:	2100      	moveq	r1, #0
   d6dfc:	4770      	bxeq	lr
   d6dfe:	b530      	push	{r4, r5, lr}
   d6e00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e08:	f04f 0500 	mov.w	r5, #0
   d6e0c:	f04f 0100 	mov.w	r1, #0
   d6e10:	e750      	b.n	d6cb4 <__adddf3+0x138>
   d6e12:	bf00      	nop

000d6e14 <__aeabi_i2d>:
   d6e14:	f090 0f00 	teq	r0, #0
   d6e18:	bf04      	itt	eq
   d6e1a:	2100      	moveq	r1, #0
   d6e1c:	4770      	bxeq	lr
   d6e1e:	b530      	push	{r4, r5, lr}
   d6e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e2c:	bf48      	it	mi
   d6e2e:	4240      	negmi	r0, r0
   d6e30:	f04f 0100 	mov.w	r1, #0
   d6e34:	e73e      	b.n	d6cb4 <__adddf3+0x138>
   d6e36:	bf00      	nop

000d6e38 <__aeabi_f2d>:
   d6e38:	0042      	lsls	r2, r0, #1
   d6e3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e3e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e46:	bf1f      	itttt	ne
   d6e48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6e4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6e54:	4770      	bxne	lr
   d6e56:	f092 0f00 	teq	r2, #0
   d6e5a:	bf14      	ite	ne
   d6e5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e60:	4770      	bxeq	lr
   d6e62:	b530      	push	{r4, r5, lr}
   d6e64:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6e68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e70:	e720      	b.n	d6cb4 <__adddf3+0x138>
   d6e72:	bf00      	nop

000d6e74 <__aeabi_ul2d>:
   d6e74:	ea50 0201 	orrs.w	r2, r0, r1
   d6e78:	bf08      	it	eq
   d6e7a:	4770      	bxeq	lr
   d6e7c:	b530      	push	{r4, r5, lr}
   d6e7e:	f04f 0500 	mov.w	r5, #0
   d6e82:	e00a      	b.n	d6e9a <__aeabi_l2d+0x16>

000d6e84 <__aeabi_l2d>:
   d6e84:	ea50 0201 	orrs.w	r2, r0, r1
   d6e88:	bf08      	it	eq
   d6e8a:	4770      	bxeq	lr
   d6e8c:	b530      	push	{r4, r5, lr}
   d6e8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6e92:	d502      	bpl.n	d6e9a <__aeabi_l2d+0x16>
   d6e94:	4240      	negs	r0, r0
   d6e96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6e9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ea2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6ea6:	f43f aedc 	beq.w	d6c62 <__adddf3+0xe6>
   d6eaa:	f04f 0203 	mov.w	r2, #3
   d6eae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6eb2:	bf18      	it	ne
   d6eb4:	3203      	addne	r2, #3
   d6eb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6eba:	bf18      	it	ne
   d6ebc:	3203      	addne	r2, #3
   d6ebe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6ec2:	f1c2 0320 	rsb	r3, r2, #32
   d6ec6:	fa00 fc03 	lsl.w	ip, r0, r3
   d6eca:	fa20 f002 	lsr.w	r0, r0, r2
   d6ece:	fa01 fe03 	lsl.w	lr, r1, r3
   d6ed2:	ea40 000e 	orr.w	r0, r0, lr
   d6ed6:	fa21 f102 	lsr.w	r1, r1, r2
   d6eda:	4414      	add	r4, r2
   d6edc:	e6c1      	b.n	d6c62 <__adddf3+0xe6>
   d6ede:	bf00      	nop

000d6ee0 <__aeabi_dmul>:
   d6ee0:	b570      	push	{r4, r5, r6, lr}
   d6ee2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ee6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6eea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6eee:	bf1d      	ittte	ne
   d6ef0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ef4:	ea94 0f0c 	teqne	r4, ip
   d6ef8:	ea95 0f0c 	teqne	r5, ip
   d6efc:	f000 f8de 	bleq	d70bc <__aeabi_dmul+0x1dc>
   d6f00:	442c      	add	r4, r5
   d6f02:	ea81 0603 	eor.w	r6, r1, r3
   d6f06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f12:	bf18      	it	ne
   d6f14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f20:	d038      	beq.n	d6f94 <__aeabi_dmul+0xb4>
   d6f22:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f26:	f04f 0500 	mov.w	r5, #0
   d6f2a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f32:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f36:	f04f 0600 	mov.w	r6, #0
   d6f3a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f3e:	f09c 0f00 	teq	ip, #0
   d6f42:	bf18      	it	ne
   d6f44:	f04e 0e01 	orrne.w	lr, lr, #1
   d6f48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6f4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6f50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6f54:	d204      	bcs.n	d6f60 <__aeabi_dmul+0x80>
   d6f56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6f5a:	416d      	adcs	r5, r5
   d6f5c:	eb46 0606 	adc.w	r6, r6, r6
   d6f60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6f64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6f68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6f6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6f70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6f74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6f78:	bf88      	it	hi
   d6f7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6f7e:	d81e      	bhi.n	d6fbe <__aeabi_dmul+0xde>
   d6f80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6f84:	bf08      	it	eq
   d6f86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6f8a:	f150 0000 	adcs.w	r0, r0, #0
   d6f8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f92:	bd70      	pop	{r4, r5, r6, pc}
   d6f94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6f98:	ea46 0101 	orr.w	r1, r6, r1
   d6f9c:	ea40 0002 	orr.w	r0, r0, r2
   d6fa0:	ea81 0103 	eor.w	r1, r1, r3
   d6fa4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6fa8:	bfc2      	ittt	gt
   d6faa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6fae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6fb2:	bd70      	popgt	{r4, r5, r6, pc}
   d6fb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fb8:	f04f 0e00 	mov.w	lr, #0
   d6fbc:	3c01      	subs	r4, #1
   d6fbe:	f300 80ab 	bgt.w	d7118 <__aeabi_dmul+0x238>
   d6fc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6fc6:	bfde      	ittt	le
   d6fc8:	2000      	movle	r0, #0
   d6fca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6fce:	bd70      	pople	{r4, r5, r6, pc}
   d6fd0:	f1c4 0400 	rsb	r4, r4, #0
   d6fd4:	3c20      	subs	r4, #32
   d6fd6:	da35      	bge.n	d7044 <__aeabi_dmul+0x164>
   d6fd8:	340c      	adds	r4, #12
   d6fda:	dc1b      	bgt.n	d7014 <__aeabi_dmul+0x134>
   d6fdc:	f104 0414 	add.w	r4, r4, #20
   d6fe0:	f1c4 0520 	rsb	r5, r4, #32
   d6fe4:	fa00 f305 	lsl.w	r3, r0, r5
   d6fe8:	fa20 f004 	lsr.w	r0, r0, r4
   d6fec:	fa01 f205 	lsl.w	r2, r1, r5
   d6ff0:	ea40 0002 	orr.w	r0, r0, r2
   d6ff4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6ff8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ffc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7000:	fa21 f604 	lsr.w	r6, r1, r4
   d7004:	eb42 0106 	adc.w	r1, r2, r6
   d7008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d700c:	bf08      	it	eq
   d700e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7012:	bd70      	pop	{r4, r5, r6, pc}
   d7014:	f1c4 040c 	rsb	r4, r4, #12
   d7018:	f1c4 0520 	rsb	r5, r4, #32
   d701c:	fa00 f304 	lsl.w	r3, r0, r4
   d7020:	fa20 f005 	lsr.w	r0, r0, r5
   d7024:	fa01 f204 	lsl.w	r2, r1, r4
   d7028:	ea40 0002 	orr.w	r0, r0, r2
   d702c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7030:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7034:	f141 0100 	adc.w	r1, r1, #0
   d7038:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d703c:	bf08      	it	eq
   d703e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7042:	bd70      	pop	{r4, r5, r6, pc}
   d7044:	f1c4 0520 	rsb	r5, r4, #32
   d7048:	fa00 f205 	lsl.w	r2, r0, r5
   d704c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7050:	fa20 f304 	lsr.w	r3, r0, r4
   d7054:	fa01 f205 	lsl.w	r2, r1, r5
   d7058:	ea43 0302 	orr.w	r3, r3, r2
   d705c:	fa21 f004 	lsr.w	r0, r1, r4
   d7060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7064:	fa21 f204 	lsr.w	r2, r1, r4
   d7068:	ea20 0002 	bic.w	r0, r0, r2
   d706c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7070:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7074:	bf08      	it	eq
   d7076:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d707a:	bd70      	pop	{r4, r5, r6, pc}
   d707c:	f094 0f00 	teq	r4, #0
   d7080:	d10f      	bne.n	d70a2 <__aeabi_dmul+0x1c2>
   d7082:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7086:	0040      	lsls	r0, r0, #1
   d7088:	eb41 0101 	adc.w	r1, r1, r1
   d708c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7090:	bf08      	it	eq
   d7092:	3c01      	subeq	r4, #1
   d7094:	d0f7      	beq.n	d7086 <__aeabi_dmul+0x1a6>
   d7096:	ea41 0106 	orr.w	r1, r1, r6
   d709a:	f095 0f00 	teq	r5, #0
   d709e:	bf18      	it	ne
   d70a0:	4770      	bxne	lr
   d70a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d70a6:	0052      	lsls	r2, r2, #1
   d70a8:	eb43 0303 	adc.w	r3, r3, r3
   d70ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d70b0:	bf08      	it	eq
   d70b2:	3d01      	subeq	r5, #1
   d70b4:	d0f7      	beq.n	d70a6 <__aeabi_dmul+0x1c6>
   d70b6:	ea43 0306 	orr.w	r3, r3, r6
   d70ba:	4770      	bx	lr
   d70bc:	ea94 0f0c 	teq	r4, ip
   d70c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d70c4:	bf18      	it	ne
   d70c6:	ea95 0f0c 	teqne	r5, ip
   d70ca:	d00c      	beq.n	d70e6 <__aeabi_dmul+0x206>
   d70cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70d0:	bf18      	it	ne
   d70d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70d6:	d1d1      	bne.n	d707c <__aeabi_dmul+0x19c>
   d70d8:	ea81 0103 	eor.w	r1, r1, r3
   d70dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70e0:	f04f 0000 	mov.w	r0, #0
   d70e4:	bd70      	pop	{r4, r5, r6, pc}
   d70e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70ea:	bf06      	itte	eq
   d70ec:	4610      	moveq	r0, r2
   d70ee:	4619      	moveq	r1, r3
   d70f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70f4:	d019      	beq.n	d712a <__aeabi_dmul+0x24a>
   d70f6:	ea94 0f0c 	teq	r4, ip
   d70fa:	d102      	bne.n	d7102 <__aeabi_dmul+0x222>
   d70fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7100:	d113      	bne.n	d712a <__aeabi_dmul+0x24a>
   d7102:	ea95 0f0c 	teq	r5, ip
   d7106:	d105      	bne.n	d7114 <__aeabi_dmul+0x234>
   d7108:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d710c:	bf1c      	itt	ne
   d710e:	4610      	movne	r0, r2
   d7110:	4619      	movne	r1, r3
   d7112:	d10a      	bne.n	d712a <__aeabi_dmul+0x24a>
   d7114:	ea81 0103 	eor.w	r1, r1, r3
   d7118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d711c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7120:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7124:	f04f 0000 	mov.w	r0, #0
   d7128:	bd70      	pop	{r4, r5, r6, pc}
   d712a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d712e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7132:	bd70      	pop	{r4, r5, r6, pc}

000d7134 <__aeabi_ddiv>:
   d7134:	b570      	push	{r4, r5, r6, lr}
   d7136:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d713a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d713e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7142:	bf1d      	ittte	ne
   d7144:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7148:	ea94 0f0c 	teqne	r4, ip
   d714c:	ea95 0f0c 	teqne	r5, ip
   d7150:	f000 f8a7 	bleq	d72a2 <__aeabi_ddiv+0x16e>
   d7154:	eba4 0405 	sub.w	r4, r4, r5
   d7158:	ea81 0e03 	eor.w	lr, r1, r3
   d715c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7160:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7164:	f000 8088 	beq.w	d7278 <__aeabi_ddiv+0x144>
   d7168:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d716c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7170:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7174:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7178:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d717c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7180:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7184:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7188:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d718c:	429d      	cmp	r5, r3
   d718e:	bf08      	it	eq
   d7190:	4296      	cmpeq	r6, r2
   d7192:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7196:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d719a:	d202      	bcs.n	d71a2 <__aeabi_ddiv+0x6e>
   d719c:	085b      	lsrs	r3, r3, #1
   d719e:	ea4f 0232 	mov.w	r2, r2, rrx
   d71a2:	1ab6      	subs	r6, r6, r2
   d71a4:	eb65 0503 	sbc.w	r5, r5, r3
   d71a8:	085b      	lsrs	r3, r3, #1
   d71aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d71ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d71b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d71b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d71ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71be:	bf22      	ittt	cs
   d71c0:	1ab6      	subcs	r6, r6, r2
   d71c2:	4675      	movcs	r5, lr
   d71c4:	ea40 000c 	orrcs.w	r0, r0, ip
   d71c8:	085b      	lsrs	r3, r3, #1
   d71ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d71ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d71d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71d6:	bf22      	ittt	cs
   d71d8:	1ab6      	subcs	r6, r6, r2
   d71da:	4675      	movcs	r5, lr
   d71dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d71e0:	085b      	lsrs	r3, r3, #1
   d71e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d71e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d71ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71ee:	bf22      	ittt	cs
   d71f0:	1ab6      	subcs	r6, r6, r2
   d71f2:	4675      	movcs	r5, lr
   d71f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d71f8:	085b      	lsrs	r3, r3, #1
   d71fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d71fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d7202:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7206:	bf22      	ittt	cs
   d7208:	1ab6      	subcs	r6, r6, r2
   d720a:	4675      	movcs	r5, lr
   d720c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7210:	ea55 0e06 	orrs.w	lr, r5, r6
   d7214:	d018      	beq.n	d7248 <__aeabi_ddiv+0x114>
   d7216:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d721a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d721e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7222:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7226:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d722a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d722e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7232:	d1c0      	bne.n	d71b6 <__aeabi_ddiv+0x82>
   d7234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7238:	d10b      	bne.n	d7252 <__aeabi_ddiv+0x11e>
   d723a:	ea41 0100 	orr.w	r1, r1, r0
   d723e:	f04f 0000 	mov.w	r0, #0
   d7242:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7246:	e7b6      	b.n	d71b6 <__aeabi_ddiv+0x82>
   d7248:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d724c:	bf04      	itt	eq
   d724e:	4301      	orreq	r1, r0
   d7250:	2000      	moveq	r0, #0
   d7252:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7256:	bf88      	it	hi
   d7258:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d725c:	f63f aeaf 	bhi.w	d6fbe <__aeabi_dmul+0xde>
   d7260:	ebb5 0c03 	subs.w	ip, r5, r3
   d7264:	bf04      	itt	eq
   d7266:	ebb6 0c02 	subseq.w	ip, r6, r2
   d726a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d726e:	f150 0000 	adcs.w	r0, r0, #0
   d7272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7276:	bd70      	pop	{r4, r5, r6, pc}
   d7278:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d727c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7280:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7284:	bfc2      	ittt	gt
   d7286:	ebd4 050c 	rsbsgt	r5, r4, ip
   d728a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d728e:	bd70      	popgt	{r4, r5, r6, pc}
   d7290:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7294:	f04f 0e00 	mov.w	lr, #0
   d7298:	3c01      	subs	r4, #1
   d729a:	e690      	b.n	d6fbe <__aeabi_dmul+0xde>
   d729c:	ea45 0e06 	orr.w	lr, r5, r6
   d72a0:	e68d      	b.n	d6fbe <__aeabi_dmul+0xde>
   d72a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d72a6:	ea94 0f0c 	teq	r4, ip
   d72aa:	bf08      	it	eq
   d72ac:	ea95 0f0c 	teqeq	r5, ip
   d72b0:	f43f af3b 	beq.w	d712a <__aeabi_dmul+0x24a>
   d72b4:	ea94 0f0c 	teq	r4, ip
   d72b8:	d10a      	bne.n	d72d0 <__aeabi_ddiv+0x19c>
   d72ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d72be:	f47f af34 	bne.w	d712a <__aeabi_dmul+0x24a>
   d72c2:	ea95 0f0c 	teq	r5, ip
   d72c6:	f47f af25 	bne.w	d7114 <__aeabi_dmul+0x234>
   d72ca:	4610      	mov	r0, r2
   d72cc:	4619      	mov	r1, r3
   d72ce:	e72c      	b.n	d712a <__aeabi_dmul+0x24a>
   d72d0:	ea95 0f0c 	teq	r5, ip
   d72d4:	d106      	bne.n	d72e4 <__aeabi_ddiv+0x1b0>
   d72d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d72da:	f43f aefd 	beq.w	d70d8 <__aeabi_dmul+0x1f8>
   d72de:	4610      	mov	r0, r2
   d72e0:	4619      	mov	r1, r3
   d72e2:	e722      	b.n	d712a <__aeabi_dmul+0x24a>
   d72e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d72e8:	bf18      	it	ne
   d72ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d72ee:	f47f aec5 	bne.w	d707c <__aeabi_dmul+0x19c>
   d72f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d72f6:	f47f af0d 	bne.w	d7114 <__aeabi_dmul+0x234>
   d72fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d72fe:	f47f aeeb 	bne.w	d70d8 <__aeabi_dmul+0x1f8>
   d7302:	e712      	b.n	d712a <__aeabi_dmul+0x24a>

000d7304 <__gedf2>:
   d7304:	f04f 3cff 	mov.w	ip, #4294967295
   d7308:	e006      	b.n	d7318 <__cmpdf2+0x4>
   d730a:	bf00      	nop

000d730c <__ledf2>:
   d730c:	f04f 0c01 	mov.w	ip, #1
   d7310:	e002      	b.n	d7318 <__cmpdf2+0x4>
   d7312:	bf00      	nop

000d7314 <__cmpdf2>:
   d7314:	f04f 0c01 	mov.w	ip, #1
   d7318:	f84d cd04 	str.w	ip, [sp, #-4]!
   d731c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7324:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7328:	bf18      	it	ne
   d732a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d732e:	d01b      	beq.n	d7368 <__cmpdf2+0x54>
   d7330:	b001      	add	sp, #4
   d7332:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7336:	bf0c      	ite	eq
   d7338:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d733c:	ea91 0f03 	teqne	r1, r3
   d7340:	bf02      	ittt	eq
   d7342:	ea90 0f02 	teqeq	r0, r2
   d7346:	2000      	moveq	r0, #0
   d7348:	4770      	bxeq	lr
   d734a:	f110 0f00 	cmn.w	r0, #0
   d734e:	ea91 0f03 	teq	r1, r3
   d7352:	bf58      	it	pl
   d7354:	4299      	cmppl	r1, r3
   d7356:	bf08      	it	eq
   d7358:	4290      	cmpeq	r0, r2
   d735a:	bf2c      	ite	cs
   d735c:	17d8      	asrcs	r0, r3, #31
   d735e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7362:	f040 0001 	orr.w	r0, r0, #1
   d7366:	4770      	bx	lr
   d7368:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d736c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7370:	d102      	bne.n	d7378 <__cmpdf2+0x64>
   d7372:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7376:	d107      	bne.n	d7388 <__cmpdf2+0x74>
   d7378:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d737c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7380:	d1d6      	bne.n	d7330 <__cmpdf2+0x1c>
   d7382:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7386:	d0d3      	beq.n	d7330 <__cmpdf2+0x1c>
   d7388:	f85d 0b04 	ldr.w	r0, [sp], #4
   d738c:	4770      	bx	lr
   d738e:	bf00      	nop

000d7390 <__aeabi_cdrcmple>:
   d7390:	4684      	mov	ip, r0
   d7392:	4610      	mov	r0, r2
   d7394:	4662      	mov	r2, ip
   d7396:	468c      	mov	ip, r1
   d7398:	4619      	mov	r1, r3
   d739a:	4663      	mov	r3, ip
   d739c:	e000      	b.n	d73a0 <__aeabi_cdcmpeq>
   d739e:	bf00      	nop

000d73a0 <__aeabi_cdcmpeq>:
   d73a0:	b501      	push	{r0, lr}
   d73a2:	f7ff ffb7 	bl	d7314 <__cmpdf2>
   d73a6:	2800      	cmp	r0, #0
   d73a8:	bf48      	it	mi
   d73aa:	f110 0f00 	cmnmi.w	r0, #0
   d73ae:	bd01      	pop	{r0, pc}

000d73b0 <__aeabi_dcmpeq>:
   d73b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73b4:	f7ff fff4 	bl	d73a0 <__aeabi_cdcmpeq>
   d73b8:	bf0c      	ite	eq
   d73ba:	2001      	moveq	r0, #1
   d73bc:	2000      	movne	r0, #0
   d73be:	f85d fb08 	ldr.w	pc, [sp], #8
   d73c2:	bf00      	nop

000d73c4 <__aeabi_dcmplt>:
   d73c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73c8:	f7ff ffea 	bl	d73a0 <__aeabi_cdcmpeq>
   d73cc:	bf34      	ite	cc
   d73ce:	2001      	movcc	r0, #1
   d73d0:	2000      	movcs	r0, #0
   d73d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d73d6:	bf00      	nop

000d73d8 <__aeabi_dcmple>:
   d73d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73dc:	f7ff ffe0 	bl	d73a0 <__aeabi_cdcmpeq>
   d73e0:	bf94      	ite	ls
   d73e2:	2001      	movls	r0, #1
   d73e4:	2000      	movhi	r0, #0
   d73e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d73ea:	bf00      	nop

000d73ec <__aeabi_dcmpge>:
   d73ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73f0:	f7ff ffce 	bl	d7390 <__aeabi_cdrcmple>
   d73f4:	bf94      	ite	ls
   d73f6:	2001      	movls	r0, #1
   d73f8:	2000      	movhi	r0, #0
   d73fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d73fe:	bf00      	nop

000d7400 <__aeabi_dcmpgt>:
   d7400:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7404:	f7ff ffc4 	bl	d7390 <__aeabi_cdrcmple>
   d7408:	bf34      	ite	cc
   d740a:	2001      	movcc	r0, #1
   d740c:	2000      	movcs	r0, #0
   d740e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7412:	bf00      	nop

000d7414 <__aeabi_dcmpun>:
   d7414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d741c:	d102      	bne.n	d7424 <__aeabi_dcmpun+0x10>
   d741e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7422:	d10a      	bne.n	d743a <__aeabi_dcmpun+0x26>
   d7424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d742c:	d102      	bne.n	d7434 <__aeabi_dcmpun+0x20>
   d742e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7432:	d102      	bne.n	d743a <__aeabi_dcmpun+0x26>
   d7434:	f04f 0000 	mov.w	r0, #0
   d7438:	4770      	bx	lr
   d743a:	f04f 0001 	mov.w	r0, #1
   d743e:	4770      	bx	lr

000d7440 <__aeabi_d2iz>:
   d7440:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7444:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7448:	d215      	bcs.n	d7476 <__aeabi_d2iz+0x36>
   d744a:	d511      	bpl.n	d7470 <__aeabi_d2iz+0x30>
   d744c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7450:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7454:	d912      	bls.n	d747c <__aeabi_d2iz+0x3c>
   d7456:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d745a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d745e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7462:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7466:	fa23 f002 	lsr.w	r0, r3, r2
   d746a:	bf18      	it	ne
   d746c:	4240      	negne	r0, r0
   d746e:	4770      	bx	lr
   d7470:	f04f 0000 	mov.w	r0, #0
   d7474:	4770      	bx	lr
   d7476:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d747a:	d105      	bne.n	d7488 <__aeabi_d2iz+0x48>
   d747c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7480:	bf08      	it	eq
   d7482:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7486:	4770      	bx	lr
   d7488:	f04f 0000 	mov.w	r0, #0
   d748c:	4770      	bx	lr
   d748e:	bf00      	nop

000d7490 <__aeabi_d2uiz>:
   d7490:	004a      	lsls	r2, r1, #1
   d7492:	d211      	bcs.n	d74b8 <__aeabi_d2uiz+0x28>
   d7494:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7498:	d211      	bcs.n	d74be <__aeabi_d2uiz+0x2e>
   d749a:	d50d      	bpl.n	d74b8 <__aeabi_d2uiz+0x28>
   d749c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74a4:	d40e      	bmi.n	d74c4 <__aeabi_d2uiz+0x34>
   d74a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74b2:	fa23 f002 	lsr.w	r0, r3, r2
   d74b6:	4770      	bx	lr
   d74b8:	f04f 0000 	mov.w	r0, #0
   d74bc:	4770      	bx	lr
   d74be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d74c2:	d102      	bne.n	d74ca <__aeabi_d2uiz+0x3a>
   d74c4:	f04f 30ff 	mov.w	r0, #4294967295
   d74c8:	4770      	bx	lr
   d74ca:	f04f 0000 	mov.w	r0, #0
   d74ce:	4770      	bx	lr

000d74d0 <atoi>:
   d74d0:	220a      	movs	r2, #10
   d74d2:	2100      	movs	r1, #0
   d74d4:	f000 b8fa 	b.w	d76cc <strtol>

000d74d8 <atol>:
   d74d8:	220a      	movs	r2, #10
   d74da:	2100      	movs	r1, #0
   d74dc:	f000 b8f6 	b.w	d76cc <strtol>

000d74e0 <__cxa_atexit>:
   d74e0:	b510      	push	{r4, lr}
   d74e2:	4c05      	ldr	r4, [pc, #20]	; (d74f8 <__cxa_atexit+0x18>)
   d74e4:	4613      	mov	r3, r2
   d74e6:	b12c      	cbz	r4, d74f4 <__cxa_atexit+0x14>
   d74e8:	460a      	mov	r2, r1
   d74ea:	4601      	mov	r1, r0
   d74ec:	2002      	movs	r0, #2
   d74ee:	f3af 8000 	nop.w
   d74f2:	bd10      	pop	{r4, pc}
   d74f4:	4620      	mov	r0, r4
   d74f6:	bd10      	pop	{r4, pc}
   d74f8:	00000000 	.word	0x00000000

000d74fc <memcpy>:
   d74fc:	b510      	push	{r4, lr}
   d74fe:	1e43      	subs	r3, r0, #1
   d7500:	440a      	add	r2, r1
   d7502:	4291      	cmp	r1, r2
   d7504:	d004      	beq.n	d7510 <memcpy+0x14>
   d7506:	f811 4b01 	ldrb.w	r4, [r1], #1
   d750a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d750e:	e7f8      	b.n	d7502 <memcpy+0x6>
   d7510:	bd10      	pop	{r4, pc}

000d7512 <memset>:
   d7512:	4402      	add	r2, r0
   d7514:	4603      	mov	r3, r0
   d7516:	4293      	cmp	r3, r2
   d7518:	d002      	beq.n	d7520 <memset+0xe>
   d751a:	f803 1b01 	strb.w	r1, [r3], #1
   d751e:	e7fa      	b.n	d7516 <memset+0x4>
   d7520:	4770      	bx	lr
	...

000d7524 <srand>:
   d7524:	b538      	push	{r3, r4, r5, lr}
   d7526:	4b12      	ldr	r3, [pc, #72]	; (d7570 <srand+0x4c>)
   d7528:	681c      	ldr	r4, [r3, #0]
   d752a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d752c:	4605      	mov	r5, r0
   d752e:	b9d3      	cbnz	r3, d7566 <srand+0x42>
   d7530:	2018      	movs	r0, #24
   d7532:	f7fe f80b 	bl	d554c <malloc>
   d7536:	f243 330e 	movw	r3, #13070	; 0x330e
   d753a:	63a0      	str	r0, [r4, #56]	; 0x38
   d753c:	8003      	strh	r3, [r0, #0]
   d753e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7542:	8043      	strh	r3, [r0, #2]
   d7544:	f241 2334 	movw	r3, #4660	; 0x1234
   d7548:	8083      	strh	r3, [r0, #4]
   d754a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d754e:	80c3      	strh	r3, [r0, #6]
   d7550:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7554:	8103      	strh	r3, [r0, #8]
   d7556:	2305      	movs	r3, #5
   d7558:	8143      	strh	r3, [r0, #10]
   d755a:	230b      	movs	r3, #11
   d755c:	8183      	strh	r3, [r0, #12]
   d755e:	2201      	movs	r2, #1
   d7560:	2300      	movs	r3, #0
   d7562:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7568:	2200      	movs	r2, #0
   d756a:	611d      	str	r5, [r3, #16]
   d756c:	615a      	str	r2, [r3, #20]
   d756e:	bd38      	pop	{r3, r4, r5, pc}
   d7570:	2003e314 	.word	0x2003e314

000d7574 <strcmp>:
   d7574:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7578:	f811 3b01 	ldrb.w	r3, [r1], #1
   d757c:	2a01      	cmp	r2, #1
   d757e:	bf28      	it	cs
   d7580:	429a      	cmpcs	r2, r3
   d7582:	d0f7      	beq.n	d7574 <strcmp>
   d7584:	1ad0      	subs	r0, r2, r3
   d7586:	4770      	bx	lr

000d7588 <strlen>:
   d7588:	4603      	mov	r3, r0
   d758a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d758e:	2a00      	cmp	r2, #0
   d7590:	d1fb      	bne.n	d758a <strlen+0x2>
   d7592:	1a18      	subs	r0, r3, r0
   d7594:	3801      	subs	r0, #1
   d7596:	4770      	bx	lr

000d7598 <strncpy>:
   d7598:	b510      	push	{r4, lr}
   d759a:	4603      	mov	r3, r0
   d759c:	b142      	cbz	r2, d75b0 <strncpy+0x18>
   d759e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d75a2:	f803 4b01 	strb.w	r4, [r3], #1
   d75a6:	3a01      	subs	r2, #1
   d75a8:	2c00      	cmp	r4, #0
   d75aa:	d1f7      	bne.n	d759c <strncpy+0x4>
   d75ac:	441a      	add	r2, r3
   d75ae:	e000      	b.n	d75b2 <strncpy+0x1a>
   d75b0:	bd10      	pop	{r4, pc}
   d75b2:	4293      	cmp	r3, r2
   d75b4:	d002      	beq.n	d75bc <strncpy+0x24>
   d75b6:	f803 4b01 	strb.w	r4, [r3], #1
   d75ba:	e7fa      	b.n	d75b2 <strncpy+0x1a>
   d75bc:	bd10      	pop	{r4, pc}
	...

000d75c0 <_strtol_r>:
   d75c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d75c4:	4680      	mov	r8, r0
   d75c6:	4840      	ldr	r0, [pc, #256]	; (d76c8 <_strtol_r+0x108>)
   d75c8:	f8d0 9000 	ldr.w	r9, [r0]
   d75cc:	460f      	mov	r7, r1
   d75ce:	463d      	mov	r5, r7
   d75d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d75d4:	eb09 0004 	add.w	r0, r9, r4
   d75d8:	7840      	ldrb	r0, [r0, #1]
   d75da:	f000 0008 	and.w	r0, r0, #8
   d75de:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d75e2:	b108      	cbz	r0, d75e8 <_strtol_r+0x28>
   d75e4:	462f      	mov	r7, r5
   d75e6:	e7f2      	b.n	d75ce <_strtol_r+0xe>
   d75e8:	2c2d      	cmp	r4, #45	; 0x2d
   d75ea:	d103      	bne.n	d75f4 <_strtol_r+0x34>
   d75ec:	1cbd      	adds	r5, r7, #2
   d75ee:	787c      	ldrb	r4, [r7, #1]
   d75f0:	2601      	movs	r6, #1
   d75f2:	e003      	b.n	d75fc <_strtol_r+0x3c>
   d75f4:	2c2b      	cmp	r4, #43	; 0x2b
   d75f6:	bf04      	itt	eq
   d75f8:	787c      	ldrbeq	r4, [r7, #1]
   d75fa:	1cbd      	addeq	r5, r7, #2
   d75fc:	b113      	cbz	r3, d7604 <_strtol_r+0x44>
   d75fe:	2b10      	cmp	r3, #16
   d7600:	d10a      	bne.n	d7618 <_strtol_r+0x58>
   d7602:	e05b      	b.n	d76bc <_strtol_r+0xfc>
   d7604:	2c30      	cmp	r4, #48	; 0x30
   d7606:	d157      	bne.n	d76b8 <_strtol_r+0xf8>
   d7608:	7828      	ldrb	r0, [r5, #0]
   d760a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d760e:	2858      	cmp	r0, #88	; 0x58
   d7610:	d14d      	bne.n	d76ae <_strtol_r+0xee>
   d7612:	786c      	ldrb	r4, [r5, #1]
   d7614:	2310      	movs	r3, #16
   d7616:	3502      	adds	r5, #2
   d7618:	2e00      	cmp	r6, #0
   d761a:	bf14      	ite	ne
   d761c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7620:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7624:	2700      	movs	r7, #0
   d7626:	fbbc faf3 	udiv	sl, ip, r3
   d762a:	4638      	mov	r0, r7
   d762c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7630:	eb09 0e04 	add.w	lr, r9, r4
   d7634:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7638:	f01e 0f04 	tst.w	lr, #4
   d763c:	d001      	beq.n	d7642 <_strtol_r+0x82>
   d763e:	3c30      	subs	r4, #48	; 0x30
   d7640:	e00b      	b.n	d765a <_strtol_r+0x9a>
   d7642:	f01e 0e03 	ands.w	lr, lr, #3
   d7646:	d01b      	beq.n	d7680 <_strtol_r+0xc0>
   d7648:	f1be 0f01 	cmp.w	lr, #1
   d764c:	bf0c      	ite	eq
   d764e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7652:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7656:	ebce 0404 	rsb	r4, lr, r4
   d765a:	42a3      	cmp	r3, r4
   d765c:	dd10      	ble.n	d7680 <_strtol_r+0xc0>
   d765e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7662:	d00a      	beq.n	d767a <_strtol_r+0xba>
   d7664:	4550      	cmp	r0, sl
   d7666:	d806      	bhi.n	d7676 <_strtol_r+0xb6>
   d7668:	d101      	bne.n	d766e <_strtol_r+0xae>
   d766a:	4564      	cmp	r4, ip
   d766c:	dc03      	bgt.n	d7676 <_strtol_r+0xb6>
   d766e:	fb03 4000 	mla	r0, r3, r0, r4
   d7672:	2701      	movs	r7, #1
   d7674:	e001      	b.n	d767a <_strtol_r+0xba>
   d7676:	f04f 37ff 	mov.w	r7, #4294967295
   d767a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d767e:	e7d7      	b.n	d7630 <_strtol_r+0x70>
   d7680:	1c7b      	adds	r3, r7, #1
   d7682:	d10c      	bne.n	d769e <_strtol_r+0xde>
   d7684:	2e00      	cmp	r6, #0
   d7686:	f04f 0322 	mov.w	r3, #34	; 0x22
   d768a:	bf14      	ite	ne
   d768c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7690:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7694:	f8c8 3000 	str.w	r3, [r8]
   d7698:	b92a      	cbnz	r2, d76a6 <_strtol_r+0xe6>
   d769a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d769e:	b106      	cbz	r6, d76a2 <_strtol_r+0xe2>
   d76a0:	4240      	negs	r0, r0
   d76a2:	b172      	cbz	r2, d76c2 <_strtol_r+0x102>
   d76a4:	b107      	cbz	r7, d76a8 <_strtol_r+0xe8>
   d76a6:	1e69      	subs	r1, r5, #1
   d76a8:	6011      	str	r1, [r2, #0]
   d76aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d76ae:	2430      	movs	r4, #48	; 0x30
   d76b0:	2b00      	cmp	r3, #0
   d76b2:	d1b1      	bne.n	d7618 <_strtol_r+0x58>
   d76b4:	2308      	movs	r3, #8
   d76b6:	e7af      	b.n	d7618 <_strtol_r+0x58>
   d76b8:	230a      	movs	r3, #10
   d76ba:	e7ad      	b.n	d7618 <_strtol_r+0x58>
   d76bc:	2c30      	cmp	r4, #48	; 0x30
   d76be:	d0a3      	beq.n	d7608 <_strtol_r+0x48>
   d76c0:	e7aa      	b.n	d7618 <_strtol_r+0x58>
   d76c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d76c6:	bf00      	nop
   d76c8:	2003e2b0 	.word	0x2003e2b0

000d76cc <strtol>:
   d76cc:	4613      	mov	r3, r2
   d76ce:	460a      	mov	r2, r1
   d76d0:	4601      	mov	r1, r0
   d76d2:	4802      	ldr	r0, [pc, #8]	; (d76dc <strtol+0x10>)
   d76d4:	6800      	ldr	r0, [r0, #0]
   d76d6:	f7ff bf73 	b.w	d75c0 <_strtol_r>
   d76da:	bf00      	nop
   d76dc:	2003e314 	.word	0x2003e314

000d76e0 <dynalib_user>:
   d76e0:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d76f0:	00000000                                ....

000d76f4 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d76f4:	6b6e6c62 00666e69 00726576 2e352e30     blnkinf.ver.0.5.
   d7704:	2d680034 74616562 00303100 66667562     4.h-beat.10.buff
   d7714:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d7724:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d7734:	32203820 20393130 323a3731 35323a35      8 2019 17:25:25
   d7744:	25000000 6c250069 6e690069 74756f00     ...%i.%li.in.out
   d7754:	6d777000 00776400 37007761 39386234     .pwm.dw.aw.74b89
   d7764:	37393238 34636139 62326438 31633934     82979ac48d2b49c1
   d7774:	61323365 37666364 00336539 25007776     e32adcf79e3.vw.%
   d7784:	66332e32 32003000 35003400 37003600     2.3f.0.2.4.5.6.7
   d7794:	39003800 64644100 6c655320 65746365     .8.9.Add Selecte
   d77a4:	75530064 61727462 53207463 63656c65     d.Subtract Selec
   d77b4:	00646574 746c754d 796c7069 6c655320     ted.Multiply Sel
   d77c4:	65746365 69440064 65646976 6c655320     ected.Divide Sel
   d77d4:	65746365 71450064 736c6175 6c655320     ected.Equals Sel
   d77e4:	65746365 64410064 69746964 69206e6f     ected.Addition i
   d77f4:	7250206e 6572676f 53007373 72746275     n Progress.Subtr
   d7804:	69746361 69206e6f 7250206e 6572676f     action in Progre
   d7814:	4d007373 69746c75 63696c70 6f697461     ss.Multiplicatio
   d7824:	6e69206e 6f725020 73657267 69440073     n in Progress.Di
   d7834:	69736976 69206e6f 7250206e 6572676f     vision in Progre
   d7844:	45007373 6c617571 65722073 746c7573     ss.Equals result
   d7854:	69206465 7566206e 63206c6c 7261656c     ed in full clear
   d7864:	00000000                                ....

000d7868 <_ZL23BlynkWriteHandlerVector>:
   d7868:	000d41bd 000d41d9 000d41ed 000d4201     .A...A...A...B..
   d7878:	000d4215 000d4229 000d423d 000d4251     .B..)B..=B..QB..
   d7888:	000d4265 000d4279 000d428d 000d42a1     eB..yB...B...B..
   d7898:	000d42b5 000d42c9 000d42dd 000d42f1     .B...B...B...B..
   d78a8:	000d4305 000d4319 000d50c3 000d50c3     .C...C...P...P..
   d78b8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d78c8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d78d8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d78e8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d78f8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7908:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7918:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7928:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7938:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7948:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7958:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7968:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7978:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7988:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7998:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d79a8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d79b8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d79c8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d79d8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d79e8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d79f8:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7a08:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7a18:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7a28:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7a38:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7a48:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..
   d7a58:	000d50c3 000d50c3 000d50c3 000d50c3     .P...P...P...P..

000d7a68 <_ZL22BlynkReadHandlerVector>:
   d7a68:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7a78:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7a88:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7a98:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7aa8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7ab8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7ac8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7ad8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7ae8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7af8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b08:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b18:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b28:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b38:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b48:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b58:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b68:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b78:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b88:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7b98:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7ba8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7bb8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7bc8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7bd8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7be8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7bf8:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7c08:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7c18:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7c28:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7c38:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7c48:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..
   d7c58:	000d50c1 000d50c1 000d50c1 000d50c1     .P...P...P...P..

000d7c68 <_ZTVN5spark13EthernetClassE>:
	...
   d7c70:	000d55eb 000d55e1 000d55d7 000d55cd     .U...U...U...U..
   d7c80:	000d55c1 000d55b5 000d55a9 000d55a1     .U...U...U...U..
   d7c90:	000d5597 000d558d 000d6631              .U...U..1f..

000d7c9c <_ZTV8SPIClass>:
	...
   d7ca4:	000d5609 000d560b 006e616e 0066766f     .V...V..nan.ovf.
   d7cb4:	6e69002e 6e6c0066 006e6600 65646f63     ..inf.ln.fn.code
   d7cc4:	74656400 006c6961 25000a0d 75303130     .detail....%010u
   d7cd4:	205d0020 00202c00 203a2928 005b2000      .] ., .(): . [.
   d7ce4:	65646f63 00203d20 61746564 20736c69     code = .details 
   d7cf4:	6200203d 00647561 69726553 53006c61     = .baud.Serial.S
   d7d04:	61697265 7400316c 00657079 61726170     erial1.type.para
   d7d14:	6d63006d 64690064 646e6800 72747300     m.cmd.id.hnd.str
   d7d24:	6966006d 6c00746c 61006c76 61486464     m.filt.lvl.addHa
   d7d34:	656c646e 65720072 65766f6d 646e6148     ndler.removeHand
   d7d44:	0072656c 6d756e65 646e6148 7372656c     ler.enumHandlers
   d7d54:	4f534a00 7274534e 4c6d6165 6148676f     .JSONStreamLogHa
   d7d64:	656c646e 70610072 6f6e0070 7400656e     ndler.app.none.t
   d7d74:	65636172 666e6900 6177006f 65006e72     race.info.warn.e
   d7d84:	726f7272 6e617000 61006369 5a006c6c     rror.panic.all.Z
   d7d94:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
   d7da4:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   d7db4:	74637361 00656d69                       asctime.

000d7dbc <_ZTV9IPAddress>:
	...
   d7dc4:	000d5aa9 000d5a99 000d5a9b              .Z...Z...Z..

000d7dd0 <_ZTV9USBSerial>:
	...
   d7dd8:	000d5bc7 000d5c17 000d5c25 000d5671     .[...\..%\..qV..
   d7de8:	000d5c03 000d5bc9 000d5bdf 000d5c11     .\...[...[...\..
   d7df8:	000d5bf5 000d5bc3                       .[...[..

000d7e00 <_ZTV11USARTSerial>:
	...
   d7e08:	000d5cd5 000d5d25 000d5d33 000d5671     .\..%]..3]..qV..
   d7e18:	000d5ce9 000d5d0b 000d5cf7 000d5d1f     .\...]...\...]..
   d7e28:	000d5cd7 000d5cdb                       .\...\..

000d7e30 <_ZTV7TwoWire>:
	...
   d7e38:	000d5dd9 000d5e23 000d5dfb 000d5ddb     .]..#^...]...]..
   d7e48:	000d5e03 000d5e0b 000d5e13 000d5e1b     .^...^...^...^..

000d7e58 <_ZTVN5spark9MeshClassE>:
	...
   d7e60:	000d5ebb 000d5eb1 000d5ea7 000d5e9d     .^...^...^...^..
   d7e70:	000d5e91 000d5e85 000d5e79 000d5e71     .^...^..y^..q^..
   d7e80:	000d5e67 000d5e5d 000d6631              g^..]^..1f..

000d7e8c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7e94:	000d6045 000d604b 000d6533 000d6059     E`..K`..3e..Y`..
   d7ea4:	000d6047                                G`..

000d7ea8 <_ZTV9TCPClient>:
	...
   d7eb0:	000d40cd 000d410d 000d5fbd 000d5fd7     .@...A..._..._..
   d7ec0:	000d63d9 000d621b 000d61ed 000d6001     .c...b...a...`..
   d7ed0:	000d62b1 000d605d 000d624f 000d63ab     .b..]`..Ob...c..
   d7ee0:	000d6003 000d603b 000d5fe9 000d614d     .`..;`..._..Ma..
   d7ef0:	000d61cd 69726977 7200676e 20766365     .a..wiring.recv 
   d7f00:	6f727265 203d2072 00006425              error = %d..

000d7f0c <_ZTVN5spark9WiFiClassE>:
	...
   d7f14:	000d65a9 000d659f 000d6595 000d654b     .e...e...e..Ke..
   d7f24:	000d6589 000d657d 000d6571 000d6569     .e..}e..qe..ie..
   d7f34:	000d655f 000d6555 000d6631              _e..Ue..1f..

000d7f40 <_ZTVN5spark12NetworkClassE>:
	...
   d7f48:	000d65c9 000d65d3 000d65dd 000d65e7     .e...e...e...e..
   d7f58:	000d65f1 000d65fd 000d6609 000d6615     .e...e...f...f..
   d7f68:	000d661d 000d6627 000d6631              .f..'f..1f..

000d7f74 <_ctype_>:
   d7f74:	20202000 20202020 28282020 20282828     .         ((((( 
   d7f84:	20202020 20202020 20202020 20202020                     
   d7f94:	10108820 10101010 10101010 10101010      ...............
   d7fa4:	04040410 04040404 10040404 10101010     ................
   d7fb4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7fc4:	01010101 01010101 01010101 10101010     ................
   d7fd4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7fe4:	02020202 02020202 02020202 10101010     ................
   d7ff4:	00000020 00000000 00000000 00000000      ...............
	...

000d8078 <__sf_fake_stdin>:
	...

000d8098 <__sf_fake_stdout>:
	...

000d80b8 <__sf_fake_stderr>:
	...
   d80d8:	00000043                                         C.

000d80da <link_const_variable_data_end>:
	...

000d80dc <link_constructors_location>:
   d80dc:	000d5061 	.word	0x000d5061
   d80e0:	000d50b1 	.word	0x000d50b1
   d80e4:	000d50bd 	.word	0x000d50bd
   d80e8:	000d50f1 	.word	0x000d50f1
   d80ec:	000d55f5 	.word	0x000d55f5
   d80f0:	000d5649 	.word	0x000d5649
   d80f4:	000d5661 	.word	0x000d5661
   d80f8:	000d5961 	.word	0x000d5961
   d80fc:	000d5971 	.word	0x000d5971
   d8100:	000d59a9 	.word	0x000d59a9
   d8104:	000d5f71 	.word	0x000d5f71
   d8108:	000d65b5 	.word	0x000d65b5
   d810c:	000d66fd 	.word	0x000d66fd
   d8110:	000d684d 	.word	0x000d684d
   d8114:	000d68e1 	.word	0x000d68e1
   d8118:	000d6965 	.word	0x000d6965
   d811c:	000d6a29 	.word	0x000d6a29
   d8120:	000d6aed 	.word	0x000d6aed

000d8124 <link_constructors_end>:
	...
